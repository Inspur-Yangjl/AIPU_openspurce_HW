// This system-verilog module was generated by Vega
//               Please do not edit!

//---------------------------------------------------------------------------
//                                                                           
//              Inspur Confidential                                          
// Copyright (c) 2021 Inspur. All rights reserved
//                                                                           
// File    : /nfs/work/shared/aipu.work/zhangqian06/workspace/zhangqian06.aipu.default/design_repo/rtl/soc_top/rtl/sv/cpu_subsys.sv
// Author  : Inspur Xi'an R&D                                                
// History : 2021-Nov-23 09:58:32 AM - Created    
//                                                                           
//---------------------------------------------------------------------------

module cpu_subsys(
    u_scu_top_per_clk_i,
    u_scu_top_uncore_nic_rst_n_i,
    u_uncore_top_jtag_rst_sync_bypass_i,
    u_per_apb_penable_o,
    u_per_apb_pselx_o,
    u_per_apb_pwrite_o,
    u_per_apb_paddr_o,
    u_per_apb_hwdata_o,
    u_per_apb_hrdata_i,
    u_per_apb_hready_i,
    u_per_apb_slverr_i,
    u_scu_top_ahb_hselx_o,
    u_scu_top_ahb_hready_o,
    u_scu_top_ahb_htrans_o,
    u_scu_top_ahb_hsize_o,
    u_scu_top_ahb_hwrite_o,
    u_scu_top_ahb_haddr_o,
    u_scu_top_ahb_hwdata_o,
    u_scu_top_ahb_rdata_i,
    u_scu_top_ahb_resp_i,
    u_scu_top_ahb_readyout_i,
    u_uncore_top_AWID_AXI_UNCORE_SLV_i,
    u_uncore_top_AWVALID_AXI_UNCORE_SLV_i,
    u_uncore_top_AWREADY_AXI_UNCORE_SLV_o,
    u_uncore_top_AWADDR_AXI_UNCORE_SLV_i,
    u_uncore_top_AWLEN_AXI_UNCORE_SLV_i,
    u_uncore_top_AWSIZE_AXI_UNCORE_SLV_i,
    u_uncore_top_AWBURST_AXI_UNCORE_SLV_i,
    u_uncore_top_AWLOCK_AXI_UNCORE_SLV_i,
    u_uncore_top_AWCACHE_AXI_UNCORE_SLV_i,
    u_uncore_top_AWPROT_AXI_UNCORE_SLV_i,
    u_uncore_top_WVALID_AXI_UNCORE_SLV_i,
    u_uncore_top_WREADY_AXI_UNCORE_SLV_o,
    u_uncore_top_WLAST_AXI_UNCORE_SLV_i,
    u_uncore_top_WDATA_AXI_UNCORE_SLV_i,
    u_uncore_top_WSTRB_AXI_UNCORE_SLV_i,
    u_uncore_top_BID_AXI_UNCORE_SLV_o,
    u_uncore_top_BVALID_AXI_UNCORE_SLV_o,
    u_uncore_top_BREADY_AXI_UNCORE_SLV_i,
    u_uncore_top_BRESP_AXI_UNCORE_SLV_o,
    u_uncore_top_ARID_AXI_UNCORE_SLV_i,
    u_uncore_top_ARVALID_AXI_UNCORE_SLV_i,
    u_uncore_top_ARREADY_AXI_UNCORE_SLV_o,
    u_uncore_top_ARADDR_AXI_UNCORE_SLV_i,
    u_uncore_top_ARLEN_AXI_UNCORE_SLV_i,
    u_uncore_top_ARSIZE_AXI_UNCORE_SLV_i,
    u_uncore_top_ARBURST_AXI_UNCORE_SLV_i,
    u_uncore_top_ARLOCK_AXI_UNCORE_SLV_i,
    u_uncore_top_ARCACHE_AXI_UNCORE_SLV_i,
    u_uncore_top_ARPROT_AXI_UNCORE_SLV_i,
    u_uncore_top_RVALID_AXI_UNCORE_SLV_o,
    u_uncore_top_RREADY_AXI_UNCORE_SLV_i,
    u_uncore_top_RLAST_AXI_UNCORE_SLV_o,
    u_uncore_top_RDATA_AXI_UNCORE_SLV_o,
    u_uncore_top_RRESP_AXI_UNCORE_SLV_o,
    u_uncore_top_RID_AXI_UNCORE_SLV_o
);


input          u_scu_top_per_clk_i;
input          u_scu_top_uncore_nic_rst_n_i;
input          u_uncore_top_jtag_rst_sync_bypass_i;

output         u_per_apb_penable_o;
output         u_per_apb_pselx_o;
output         u_per_apb_pwrite_o;
output [31:0]  u_per_apb_paddr_o;
output [31:0]  u_per_apb_hwdata_o;
input  [31:0]  u_per_apb_hrdata_i;
input          u_per_apb_hready_i;
input          u_per_apb_slverr_i;

output         u_scu_top_ahb_hselx_o;
output         u_scu_top_ahb_hready_o;
output [1:0]   u_scu_top_ahb_htrans_o;
output [2:0]   u_scu_top_ahb_hsize_o;
output         u_scu_top_ahb_hwrite_o;
output [31:0]  u_scu_top_ahb_haddr_o;
output [31:0]  u_scu_top_ahb_hwdata_o;
input  [31:0]  u_scu_top_ahb_rdata_i;
input  [1:0]   u_scu_top_ahb_resp_i;
input          u_scu_top_ahb_readyout_i;

input  [10:0]  u_uncore_top_AWID_AXI_UNCORE_SLV_i;
input          u_uncore_top_AWVALID_AXI_UNCORE_SLV_i;
output         u_uncore_top_AWREADY_AXI_UNCORE_SLV_o;
input  [31:0]  u_uncore_top_AWADDR_AXI_UNCORE_SLV_i;
input  [7:0]   u_uncore_top_AWLEN_AXI_UNCORE_SLV_i;
input  [2:0]   u_uncore_top_AWSIZE_AXI_UNCORE_SLV_i;
input  [1:0]   u_uncore_top_AWBURST_AXI_UNCORE_SLV_i;
input          u_uncore_top_AWLOCK_AXI_UNCORE_SLV_i;
input  [3:0]   u_uncore_top_AWCACHE_AXI_UNCORE_SLV_i;
input  [2:0]   u_uncore_top_AWPROT_AXI_UNCORE_SLV_i;
input          u_uncore_top_WVALID_AXI_UNCORE_SLV_i;
output         u_uncore_top_WREADY_AXI_UNCORE_SLV_o;
input          u_uncore_top_WLAST_AXI_UNCORE_SLV_i;
input  [31:0]  u_uncore_top_WDATA_AXI_UNCORE_SLV_i;
input  [3:0]   u_uncore_top_WSTRB_AXI_UNCORE_SLV_i;
output [10:0]  u_uncore_top_BID_AXI_UNCORE_SLV_o;
output         u_uncore_top_BVALID_AXI_UNCORE_SLV_o;
input          u_uncore_top_BREADY_AXI_UNCORE_SLV_i;
output [1:0]   u_uncore_top_BRESP_AXI_UNCORE_SLV_o;
input  [10:0]  u_uncore_top_ARID_AXI_UNCORE_SLV_i;
input          u_uncore_top_ARVALID_AXI_UNCORE_SLV_i;
output         u_uncore_top_ARREADY_AXI_UNCORE_SLV_o;
input  [31:0]  u_uncore_top_ARADDR_AXI_UNCORE_SLV_i;
input  [7:0]   u_uncore_top_ARLEN_AXI_UNCORE_SLV_i;
input  [2:0]   u_uncore_top_ARSIZE_AXI_UNCORE_SLV_i;
input  [1:0]   u_uncore_top_ARBURST_AXI_UNCORE_SLV_i;
input          u_uncore_top_ARLOCK_AXI_UNCORE_SLV_i;
input  [3:0]   u_uncore_top_ARCACHE_AXI_UNCORE_SLV_i;
input  [2:0]   u_uncore_top_ARPROT_AXI_UNCORE_SLV_i;
output [10:0]  u_uncore_top_RID_AXI_UNCORE_SLV_o;
output         u_uncore_top_RVALID_AXI_UNCORE_SLV_o;
input          u_uncore_top_RREADY_AXI_UNCORE_SLV_i;
output         u_uncore_top_RLAST_AXI_UNCORE_SLV_o;
output [31:0]  u_uncore_top_RDATA_AXI_UNCORE_SLV_o;
output [1:0]   u_uncore_top_RRESP_AXI_UNCORE_SLV_o;

// input wires

// output wires

// internal wires
/*********************************************************************/
// SCU AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [11+0-1:0]   scu_axi_slv_32_awid;
wire    [64-1:0]     scu_axi_slv_32_awaddr;
wire    [7:0]        scu_axi_slv_32_awlen;
wire    [2:0]        scu_axi_slv_32_awsize;
wire    [1:0]        scu_axi_slv_32_awburst;
wire                 scu_axi_slv_32_awlock;
wire    [3:0]        scu_axi_slv_32_awcache;
wire    [2:0]        scu_axi_slv_32_awprot;
wire    [3:0]        scu_axi_slv_32_awregion;
wire    [3:0]        scu_axi_slv_32_awqos;
wire                 scu_axi_slv_32_awuser;
wire                 scu_axi_slv_32_awvalid;
wire                 scu_axi_slv_32_awready;
wire    [32-1:0]     scu_axi_slv_32_wdata;
wire    [32/8-1:0]   scu_axi_slv_32_wstrb;
wire                 scu_axi_slv_32_wlast;
wire                 scu_axi_slv_32_wuser;
wire                 scu_axi_slv_32_wvalid;
wire                 scu_axi_slv_32_wready;
wire    [11+0-1:0]   scu_axi_slv_32_bid;
wire    [1:0]        scu_axi_slv_32_bresp;
wire                 scu_axi_slv_32_buser;
wire                 scu_axi_slv_32_bvalid;
wire                 scu_axi_slv_32_bready;
wire    [11+0-1:0]   scu_axi_slv_32_arid;
wire    [64-1:0]     scu_axi_slv_32_araddr;
wire    [7:0]        scu_axi_slv_32_arlen;
wire    [2:0]        scu_axi_slv_32_arsize;
wire    [1:0]        scu_axi_slv_32_arburst;
wire                 scu_axi_slv_32_arlock;
wire    [3:0]        scu_axi_slv_32_arcache;
wire    [2:0]        scu_axi_slv_32_arprot;
wire    [3:0]        scu_axi_slv_32_arregion;
wire    [3:0]        scu_axi_slv_32_arqos;
wire                 scu_axi_slv_32_aruser;
wire                 scu_axi_slv_32_arvalid;
wire                 scu_axi_slv_32_arready;
wire    [11+0-1:0]   scu_axi_slv_32_rid;
wire    [32-1:0]     scu_axi_slv_32_rdata;
wire    [32-1:0]     scu_axi_slv_32_rdata_nc;
wire    [1:0]        scu_axi_slv_32_rresp;
wire                 scu_axi_slv_32_rlast;
wire                 scu_axi_slv_32_ruser;
wire                 scu_axi_slv_32_rvalid;
wire                 scu_axi_slv_32_rready; 
/*********************************************************************/
// UART/Timer0/TIMER1 AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [11+0-1:0]   peri_axi_slv_32_awid;
wire    [64-1:0]     peri_axi_slv_32_awaddr;
wire    [7:0]        peri_axi_slv_32_awlen;
wire    [2:0]        peri_axi_slv_32_awsize;
wire    [1:0]        peri_axi_slv_32_awburst;
wire                 peri_axi_slv_32_awlock;
wire    [3:0]        peri_axi_slv_32_awcache;
wire    [2:0]        peri_axi_slv_32_awprot;
wire    [3:0]        peri_axi_slv_32_awregion;
wire    [3:0]        peri_axi_slv_32_awqos;
wire                 peri_axi_slv_32_awuser;
wire                 peri_axi_slv_32_awvalid;
wire                 peri_axi_slv_32_awready;
wire    [32-1:0]     peri_axi_slv_32_wdata;
wire    [32/8-1:0]   peri_axi_slv_32_wstrb;
wire                 peri_axi_slv_32_wlast;
wire                 peri_axi_slv_32_wuser;
wire                 peri_axi_slv_32_wvalid;
wire                 peri_axi_slv_32_wready;
wire    [11+0-1:0]   peri_axi_slv_32_bid;
wire    [1:0]        peri_axi_slv_32_bresp;
wire                 peri_axi_slv_32_buser;
wire                 peri_axi_slv_32_bvalid;
wire                 peri_axi_slv_32_bready;
wire    [11+0-1:0]   peri_axi_slv_32_arid;
wire    [64-1:0]     peri_axi_slv_32_araddr;
wire    [7:0]        peri_axi_slv_32_arlen;
wire    [2:0]        peri_axi_slv_32_arsize;
wire    [1:0]        peri_axi_slv_32_arburst;
wire                 peri_axi_slv_32_arlock;
wire    [3:0]        peri_axi_slv_32_arcache;
wire    [2:0]        peri_axi_slv_32_arprot;
wire    [3:0]        peri_axi_slv_32_arregion;
wire    [3:0]        peri_axi_slv_32_arqos;
wire                 peri_axi_slv_32_aruser;
wire                 peri_axi_slv_32_arvalid;
wire                 peri_axi_slv_32_arready;
wire    [11+0-1:0]   peri_axi_slv_32_rid;
wire    [32-1:0]     peri_axi_slv_32_rdata;
wire    [32-1:0]     peri_axi_slv_32_rdata_nc;
wire    [1:0]        peri_axi_slv_32_rresp;
wire                 peri_axi_slv_32_rlast;
wire                 peri_axi_slv_32_ruser;
wire                 peri_axi_slv_32_rvalid;
wire                 peri_axi_slv_32_rready; 
/*********************************************************************/
// LMU-ROM AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [11+0-1:0]   rom_axi_slv_32_awid;
wire    [64-1:0]     rom_axi_slv_32_awaddr;
wire    [7:0]        rom_axi_slv_32_awlen;
wire    [2:0]        rom_axi_slv_32_awsize;
wire    [1:0]        rom_axi_slv_32_awburst;
wire                 rom_axi_slv_32_awlock;
wire    [3:0]        rom_axi_slv_32_awcache;
wire    [2:0]        rom_axi_slv_32_awprot;
wire    [3:0]        rom_axi_slv_32_awregion;
wire    [3:0]        rom_axi_slv_32_awqos;
wire                 rom_axi_slv_32_awuser;
wire                 rom_axi_slv_32_awvalid;
wire                 rom_axi_slv_32_awready;
wire    [32-1:0]     rom_axi_slv_32_wdata;
wire    [32/8-1:0]   rom_axi_slv_32_wstrb;
wire                 rom_axi_slv_32_wlast;
wire                 rom_axi_slv_32_wuser;
wire                 rom_axi_slv_32_wvalid;
wire                 rom_axi_slv_32_wready;
wire    [11+0-1:0]   rom_axi_slv_32_bid;
wire    [1:0]        rom_axi_slv_32_bresp;
wire                 rom_axi_slv_32_buser;
wire                 rom_axi_slv_32_bvalid;
wire                 rom_axi_slv_32_bready;
wire    [11+0-1:0]   rom_axi_slv_32_arid;
wire    [64-1:0]     rom_axi_slv_32_araddr;
wire    [7:0]        rom_axi_slv_32_arlen;
wire    [2:0]        rom_axi_slv_32_arsize;
wire    [1:0]        rom_axi_slv_32_arburst;
wire                 rom_axi_slv_32_arlock;
wire    [3:0]        rom_axi_slv_32_arcache;
wire    [2:0]        rom_axi_slv_32_arprot;
wire    [3:0]        rom_axi_slv_32_arregion;
wire    [3:0]        rom_axi_slv_32_arqos;
wire                 rom_axi_slv_32_aruser;
wire                 rom_axi_slv_32_arvalid;
wire                 rom_axi_slv_32_arready;
wire    [11+0-1:0]   rom_axi_slv_32_rid;
wire    [32-1:0]     rom_axi_slv_32_rdata;
wire    [32-1:0]     rom_axi_slv_32_rdata_nc;
wire    [1:0]        rom_axi_slv_32_rresp;
wire                 rom_axi_slv_32_rlast;
wire                 rom_axi_slv_32_ruser;
wire                 rom_axi_slv_32_rvalid;
wire                 rom_axi_slv_32_rready; 
/*********************************************************************/
// SCU AHB-Lite Slave Interface -- 32bit
/*********************************************************************/
wire    [31 : 0]     scu_ahb_mst_32_haddr;
wire                 scu_ahb_mst_32_hwrite;
wire    [2 : 0]      scu_ahb_mst_32_hsize;
wire    [2 : 0]      scu_ahb_mst_32_hburst;
wire    [3 : 0]      scu_ahb_mst_32_hprot;
wire    [1 : 0]      scu_ahb_mst_32_htrans;
wire                 scu_ahb_mst_32_hmastlock;
wire    [31 : 0]     scu_ahb_mst_32_hwdata;
wire    [31 : 0]     scu_ahb_mst_32_hwdata_nc;
wire                 scu_ahb_mst_32_hready;
wire    [31 : 0]     scu_ahb_mst_32_hrdata;
wire    [1 : 0]      scu_ahb_mst_32_hresp;
/*********************************************************************/
// UART/Timer APB Slave Interface -- 32bit
/*********************************************************************/
wire                 peri_apb_mst_32_penable;
wire                 peri_apb_mst_32_pwrite ;
wire    [31: 0]      peri_apb_mst_32_paddr  ;
wire                 peri_apb_mst_32_psel   ;
wire    [31: 0]      peri_apb_mst_32_pwdata ;
wire    [31: 0]      peri_apb_mst_32_prdata ;
wire                 peri_apb_mst_32_pready ;
wire                 peri_apb_mst_32_pslverr;
/*********************************************************************/
// LMU-ROM AHB-Lite Slave Interface -- 32bit
/*********************************************************************/
wire    [31 : 0]     rom_ahb_mst_32_haddr;
wire                 rom_ahb_mst_32_hwrite;
wire    [2 : 0]      rom_ahb_mst_32_hsize;
wire    [2 : 0]      rom_ahb_mst_32_hburst;
wire    [3 : 0]      rom_ahb_mst_32_hprot;
wire    [1 : 0]      rom_ahb_mst_32_htrans;
wire                 rom_ahb_mst_32_hmastlock;
wire    [31 : 0]     rom_ahb_mst_32_hwdata;
wire    [31 : 0]     rom_ahb_mst_32_hwdata_nc;
wire                 rom_ahb_mst_32_hready;
wire    [31 : 0]     rom_ahb_mst_32_hrdata;
wire    [1 : 0]      rom_ahb_mst_32_hresp;
/*********************************************************************/
// LMU-ROM MEM Interface -- 32bit
/*********************************************************************/
wire                 rom_req;
wire                 rom_we;
wire    [64-1:0]     rom_addr;
wire    [32/8-1:0]   rom_be;
wire    [32-1:0]     rom_wdata;
wire    [32-1:0]     rom_rdata;
/*********************************************************************/
wire    [10:0]       u_uncore_top_BID_AXI_UNCORE_SLV_s;
wire    [10:0]       u_uncore_top_RID_AXI_UNCORE_SLV_s;



// input assign

// output assign
assign u_uncore_top_BID_AXI_UNCORE_SLV_o = u_uncore_top_BID_AXI_UNCORE_SLV_s[10:0];//5'd1;
assign u_uncore_top_RID_AXI_UNCORE_SLV_o = u_uncore_top_RID_AXI_UNCORE_SLV_s[10:0];//5'd1;


// internal assign


uncore_axi_xbar 
#(
  .AXI_ADDR_WIDTH(64),
  .AXI_DATA_WIDTH(32),
  .AXI_ID_WIDTH(11),
  .AXI_USER_WIDTH(1)
) u_uncore_axi_xbar 
(
    .clk_i           (u_scu_top_per_clk_i                         ), //input                           clk_i;
    .rst_ni          (u_scu_top_uncore_nic_rst_n_i                ), //input                           rst_ni;

    .slv0_aw_awid    (u_uncore_top_AWID_AXI_UNCORE_SLV_i          ), //input  [AXI_ID_WIDTH-1:0]       slv0_aw_awid;
    .slv0_aw_awaddr  ({32'd0,u_uncore_top_AWADDR_AXI_UNCORE_SLV_i}), //input  [AXI_ADDR_WIDTH-1:0]     slv0_aw_awaddr;
    .slv0_aw_awlen   (u_uncore_top_AWLEN_AXI_UNCORE_SLV_i         ), //input  [7:0]                    slv0_aw_awlen;
    .slv0_aw_awsize  (u_uncore_top_AWSIZE_AXI_UNCORE_SLV_i        ), //input  [2:0]                    slv0_aw_awsize;
    .slv0_aw_awburst (u_uncore_top_AWBURST_AXI_UNCORE_SLV_i       ), //input  [1:0]                    slv0_aw_awburst;
    .slv0_aw_awlock  (u_uncore_top_AWLOCK_AXI_UNCORE_SLV_i        ), //input                           slv0_aw_awlock;
    .slv0_aw_awcache (u_uncore_top_AWCACHE_AXI_UNCORE_SLV_i       ), //input  [3:0]                    slv0_aw_awcache;
    .slv0_aw_awprot  (u_uncore_top_AWPROT_AXI_UNCORE_SLV_i        ), //input  [2:0]                    slv0_aw_awprot;
    .slv0_aw_awregion(4'd0                                        ), //input  [3:0]                    slv0_aw_awregion;
    .slv0_aw_awqos   (4'd0                                        ), //input  [3:0]                    slv0_aw_awqos;
    .slv0_aw_awuser  (1'b0                                        ), //input                           slv0_aw_awuser;//
    .slv0_aw_awvalid (u_uncore_top_AWVALID_AXI_UNCORE_SLV_i       ), //input                           slv0_aw_awvalid;
    .slv0_aw_awready (u_uncore_top_AWREADY_AXI_UNCORE_SLV_o       ), //output                          slv0_aw_awready;
    .slv0_w_wdata    (u_uncore_top_WDATA_AXI_UNCORE_SLV_i         ), //input  [AXI_DATA_WIDTH-1:0]     slv0_w_wdata;
    .slv0_w_wstrb    (u_uncore_top_WSTRB_AXI_UNCORE_SLV_i         ), //input  [AXI_DATA_WIDTH/8-1:0]   slv0_w_wstrb;
    .slv0_w_wlast    (u_uncore_top_WLAST_AXI_UNCORE_SLV_i         ), //input                           slv0_w_wlast;
    .slv0_w_wuser    (1'b0                                        ), //input                           slv0_w_wuser;
    .slv0_w_wvalid   (u_uncore_top_WVALID_AXI_UNCORE_SLV_i        ), //input                           slv0_w_wvalid;
    .slv0_w_wready   (u_uncore_top_WREADY_AXI_UNCORE_SLV_o        ), //output                          slv0_w_wready;
    .slv0_b_bid      (u_uncore_top_BID_AXI_UNCORE_SLV_s           ), //output [AXI_ID_WIDTH-1:0]       slv0_b_bid;
    .slv0_b_bresp    (u_uncore_top_BRESP_AXI_UNCORE_SLV_o         ), //output [1:0]                    slv0_b_bresp;
    .slv0_b_buser    (/*no connection*/                           ), //output                          slv0_b_buser;
    .slv0_b_bvalid   (u_uncore_top_BVALID_AXI_UNCORE_SLV_o        ), //output                          slv0_b_bvalid;
    .slv0_b_bready   (u_uncore_top_BREADY_AXI_UNCORE_SLV_i        ), //input                           slv0_b_bready;
    .slv0_ar_arid    (u_uncore_top_ARID_AXI_UNCORE_SLV_i          ), //input  [AXI_ID_WIDTH-1:0]       slv0_ar_arid;
    .slv0_ar_araddr  ({32'd0,u_uncore_top_ARADDR_AXI_UNCORE_SLV_i}), //input  [AXI_ADDR_WIDTH-1:0]     slv0_ar_araddr;
    .slv0_ar_arlen   (u_uncore_top_ARLEN_AXI_UNCORE_SLV_i         ), //input  [7:0]                    slv0_ar_arlen;
    .slv0_ar_arsize  (u_uncore_top_ARSIZE_AXI_UNCORE_SLV_i        ), //input  [2:0]                    slv0_ar_arsize;
    .slv0_ar_arburst (u_uncore_top_ARBURST_AXI_UNCORE_SLV_i       ), //input  [1:0]                    slv0_ar_arburst;
    .slv0_ar_arlock  (u_uncore_top_ARLOCK_AXI_UNCORE_SLV_i        ), //input                           slv0_ar_arlock;
    .slv0_ar_arcache (u_uncore_top_ARCACHE_AXI_UNCORE_SLV_i       ), //input  [3:0]                    slv0_ar_arcache;
    .slv0_ar_arprot  (u_uncore_top_ARPROT_AXI_UNCORE_SLV_i        ), //input  [2:0]                    slv0_ar_arprot;
    .slv0_ar_arregion(4'd0                                        ), //input  [3:0]                    slv0_ar_arregion;
    .slv0_ar_arqos   (4'd0                                        ), //input  [3:0]                    slv0_ar_arqos;
    .slv0_ar_aruser  (1'b0                                        ), //input                           slv0_ar_aruser;
    .slv0_ar_arvalid (u_uncore_top_ARVALID_AXI_UNCORE_SLV_i       ), //input                           slv0_ar_arvalid;
    .slv0_ar_arready (u_uncore_top_ARREADY_AXI_UNCORE_SLV_o       ), //output                          slv0_ar_arready;
    .slv0_r_rid      (u_uncore_top_RID_AXI_UNCORE_SLV_s           ), //output [AXI_ID_WIDTH-1:0]       slv0_r_rid;
    .slv0_r_rdata    (u_uncore_top_RDATA_AXI_UNCORE_SLV_o         ), //output [AXI_DATA_WIDTH-1:0]     slv0_r_rdata;
    .slv0_r_rresp    (u_uncore_top_RRESP_AXI_UNCORE_SLV_o         ), //output [1:0]                    slv0_r_rresp;
    .slv0_r_rlast    (u_uncore_top_RLAST_AXI_UNCORE_SLV_o         ), //output                          slv0_r_rlast;
    .slv0_r_ruser    (/*no connection*/                           ), //output                          slv0_r_ruser;
    .slv0_r_rvalid   (u_uncore_top_RVALID_AXI_UNCORE_SLV_o        ), //output                          slv0_r_rvalid;
    .slv0_r_rready   (u_uncore_top_RREADY_AXI_UNCORE_SLV_i        ), //input                           slv0_r_rready; 

    .mst0_aw_awid    (scu_axi_slv_32_awid                         ), //output [AXI_ID_WIDTH+0-1:0]     mst0_aw_awid;
    .mst0_aw_awaddr  (scu_axi_slv_32_awaddr                       ), //output [AXI_ADDR_WIDTH-1:0]     mst0_aw_awaddr;
    .mst0_aw_awlen   (scu_axi_slv_32_awlen                        ), //output [7:0]                    mst0_aw_awlen;
    .mst0_aw_awsize  (scu_axi_slv_32_awsize                       ), //output [2:0]                    mst0_aw_awsize;
    .mst0_aw_awburst (scu_axi_slv_32_awburst                      ), //output [1:0]                    mst0_aw_awburst;
    .mst0_aw_awlock  (scu_axi_slv_32_awlock                       ), //output                          mst0_aw_awlock;
    .mst0_aw_awcache (scu_axi_slv_32_awcache                      ), //output [3:0]                    mst0_aw_awcache;
    .mst0_aw_awprot  (scu_axi_slv_32_awprot                       ), //output [2:0]                    mst0_aw_awprot;
    .mst0_aw_awregion(scu_axi_slv_32_awregion                     ), //output [3:0]                    mst0_aw_awregion;
    .mst0_aw_awqos   (scu_axi_slv_32_awqos                        ), //output [3:0]                    mst0_aw_awqos;
    .mst0_aw_awuser  (scu_axi_slv_32_awuser                       ), //output                          mst0_aw_awuser;//
    .mst0_aw_awvalid (scu_axi_slv_32_awvalid                      ), //output                          mst0_aw_awvalid;
    .mst0_aw_awready (scu_axi_slv_32_awready                      ), //input                           mst0_aw_awready;
    .mst0_w_wdata    (scu_axi_slv_32_wdata                        ), //output [AXI_DATA_WIDTH-1:0]     mst0_w_wdata;
    .mst0_w_wstrb    (scu_axi_slv_32_wstrb                        ), //output [AXI_DATA_WIDTH/8-1:0]   mst0_w_wstrb;
    .mst0_w_wlast    (scu_axi_slv_32_wlast                        ), //output                          mst0_w_wlast;
    .mst0_w_wuser    (scu_axi_slv_32_wuser                        ), //output                          mst0_w_wuser;
    .mst0_w_wvalid   (scu_axi_slv_32_wvalid                       ), //output                          mst0_w_wvalid;
    .mst0_w_wready   (scu_axi_slv_32_wready                       ), //input                           mst0_w_wready;
    .mst0_b_bid      (scu_axi_slv_32_bid                          ), //input  [AXI_ID_WIDTH+0-1:0]     mst0_b_bid;
    .mst0_b_bresp    (scu_axi_slv_32_bresp                        ), //input  [1:0]                    mst0_b_bresp;
    .mst0_b_buser    (1'b0                                        ), //input                           mst0_b_buser;
    .mst0_b_bvalid   (scu_axi_slv_32_bvalid                       ), //input                           mst0_b_bvalid;
    .mst0_b_bready   (scu_axi_slv_32_bready                       ), //output                          mst0_b_bready;
    .mst0_ar_arid    (scu_axi_slv_32_arid                         ), //output [AXI_ID_WIDTH+0-1:0]     mst0_ar_arid;
    .mst0_ar_araddr  (scu_axi_slv_32_araddr                       ), //output [AXI_ADDR_WIDTH-1:0]     mst0_ar_araddr;
    .mst0_ar_arlen   (scu_axi_slv_32_arlen                        ), //output [7:0]                    mst0_ar_arlen;
    .mst0_ar_arsize  (scu_axi_slv_32_arsize                       ), //output [2:0]                    mst0_ar_arsize;
    .mst0_ar_arburst (scu_axi_slv_32_arburst                      ), //output [1:0]                    mst0_ar_arburst;
    .mst0_ar_arlock  (scu_axi_slv_32_arlock                       ), //output                          mst0_ar_arlock;
    .mst0_ar_arcache (scu_axi_slv_32_arcache                      ), //output [3:0]                    mst0_ar_arcache;
    .mst0_ar_arprot  (scu_axi_slv_32_arprot                       ), //output [2:0]                    mst0_ar_arprot;
    .mst0_ar_arregion(scu_axi_slv_32_arregion                     ), //output [3:0]                    mst0_ar_arregion;
    .mst0_ar_arqos   (scu_axi_slv_32_arqos                        ), //output [3:0]                    mst0_ar_arqos;
    .mst0_ar_aruser  (scu_axi_slv_32_aruser                       ), //output                          mst0_ar_aruser;
    .mst0_ar_arvalid (scu_axi_slv_32_arvalid                      ), //output                          mst0_ar_arvalid;
    .mst0_ar_arready (scu_axi_slv_32_arready                      ), //input                           mst0_ar_arready;
    .mst0_r_rid      (scu_axi_slv_32_rid                          ), //input  [AXI_ID_WIDTH+0-1:0]     mst0_r_rid;
    .mst0_r_rdata    (scu_axi_slv_32_rdata                        ), //input  [AXI_DATA_WIDTH-1:0]     mst0_r_rdata;
    .mst0_r_rresp    (scu_axi_slv_32_rresp                        ), //input  [1:0]                    mst0_r_rresp;
    .mst0_r_rlast    (scu_axi_slv_32_rlast                        ), //input                           mst0_r_rlast;
    .mst0_r_ruser    (1'b0                                        ), //input                           mst0_r_ruser;
    .mst0_r_rvalid   (scu_axi_slv_32_rvalid                       ), //input                           mst0_r_rvalid;
    .mst0_r_rready   (scu_axi_slv_32_rready                       ), //output                          mst0_r_rready; 

    .mst1_aw_awid    (peri_axi_slv_32_awid                        ), //output [AXI_ID_WIDTH+0-1:0]     mst1_aw_awid;
    .mst1_aw_awaddr  (peri_axi_slv_32_awaddr                      ), //output [AXI_ADDR_WIDTH-1:0]     mst1_aw_awaddr;
    .mst1_aw_awlen   (peri_axi_slv_32_awlen                       ), //output [7:0]                    mst1_aw_awlen;
    .mst1_aw_awsize  (peri_axi_slv_32_awsize                      ), //output [2:0]                    mst1_aw_awsize;
    .mst1_aw_awburst (peri_axi_slv_32_awburst                     ), //output [1:0]                    mst1_aw_awburst;
    .mst1_aw_awlock  (peri_axi_slv_32_awlock                      ), //output                          mst1_aw_awlock;
    .mst1_aw_awcache (peri_axi_slv_32_awcache                     ), //output [3:0]                    mst1_aw_awcache;
    .mst1_aw_awprot  (peri_axi_slv_32_awprot                      ), //output [2:0]                    mst1_aw_awprot;
    .mst1_aw_awregion(peri_axi_slv_32_awregion                    ), //output [3:0]                    mst1_aw_awregion;
    .mst1_aw_awqos   (peri_axi_slv_32_awqos                       ), //output [3:0]                    mst1_aw_awqos;
    .mst1_aw_awuser  (peri_axi_slv_32_awuser                      ), //output                          mst1_aw_awuser;//
    .mst1_aw_awvalid (peri_axi_slv_32_awvalid                     ), //output                          mst1_aw_awvalid;
    .mst1_aw_awready (peri_axi_slv_32_awready                     ), //input                           mst1_aw_awready;
    .mst1_w_wdata    (peri_axi_slv_32_wdata                       ), //output [AXI_DATA_WIDTH-1:0]     mst1_w_wdata;
    .mst1_w_wstrb    (peri_axi_slv_32_wstrb                       ), //output [AXI_DATA_WIDTH/8-1:0]   mst1_w_wstrb;
    .mst1_w_wlast    (peri_axi_slv_32_wlast                       ), //output                          mst1_w_wlast;
    .mst1_w_wuser    (peri_axi_slv_32_wuser                       ), //output                          mst1_w_wuser;
    .mst1_w_wvalid   (peri_axi_slv_32_wvalid                      ), //output                          mst1_w_wvalid;
    .mst1_w_wready   (peri_axi_slv_32_wready                      ), //input                           mst1_w_wready;
    .mst1_b_bid      (peri_axi_slv_32_bid                         ), //input  [AXI_ID_WIDTH+0-1:0]     mst1_b_bid;
    .mst1_b_bresp    (peri_axi_slv_32_bresp                       ), //input  [1:0]                    mst1_b_bresp;
    .mst1_b_buser    (peri_axi_slv_32_buser                       ), //input                           mst1_b_buser;
    .mst1_b_bvalid   (peri_axi_slv_32_bvalid                      ), //input                           mst1_b_bvalid;
    .mst1_b_bready   (peri_axi_slv_32_bready                      ), //output                          mst1_b_bready;
    .mst1_ar_arid    (peri_axi_slv_32_arid                        ), //output [AXI_ID_WIDTH+0-1:0]     mst1_ar_arid;
    .mst1_ar_araddr  (peri_axi_slv_32_araddr                      ), //output [AXI_ADDR_WIDTH-1:0]     mst1_ar_araddr;
    .mst1_ar_arlen   (peri_axi_slv_32_arlen                       ), //output [7:0]                    mst1_ar_arlen;
    .mst1_ar_arsize  (peri_axi_slv_32_arsize                      ), //output [2:0]                    mst1_ar_arsize;
    .mst1_ar_arburst (peri_axi_slv_32_arburst                     ), //output [1:0]                    mst1_ar_arburst;
    .mst1_ar_arlock  (peri_axi_slv_32_arlock                      ), //output                          mst1_ar_arlock;
    .mst1_ar_arcache (peri_axi_slv_32_arcache                     ), //output [3:0]                    mst1_ar_arcache;
    .mst1_ar_arprot  (peri_axi_slv_32_arprot                      ), //output [2:0]                    mst1_ar_arprot;
    .mst1_ar_arregion(peri_axi_slv_32_arregion                    ), //output [3:0]                    mst1_ar_arregion;
    .mst1_ar_arqos   (peri_axi_slv_32_arqos                       ), //output [3:0]                    mst1_ar_arqos;
    .mst1_ar_aruser  (peri_axi_slv_32_aruser                      ), //output                          mst1_ar_aruser;
    .mst1_ar_arvalid (peri_axi_slv_32_arvalid                     ), //output                          mst1_ar_arvalid;
    .mst1_ar_arready (peri_axi_slv_32_arready                     ), //input                           mst1_ar_arready;
    .mst1_r_rid      (peri_axi_slv_32_rid                         ), //input  [AXI_ID_WIDTH+0-1:0]     mst1_r_rid;
    .mst1_r_rdata    (peri_axi_slv_32_rdata                       ), //input  [AXI_DATA_WIDTH-1:0]     mst1_r_rdata;
    .mst1_r_rresp    (peri_axi_slv_32_rresp                       ), //input  [1:0]                    mst1_r_rresp;
    .mst1_r_rlast    (peri_axi_slv_32_rlast                       ), //input                           mst1_r_rlast;
    .mst1_r_ruser    (1'b0                                        ), //input                           mst1_r_ruser;
    .mst1_r_rvalid   (peri_axi_slv_32_rvalid                      ), //input                           mst1_r_rvalid;
    .mst1_r_rready   (peri_axi_slv_32_rready                      ), //output                          mst1_r_rready; 

    .mst2_aw_awid    (rom_axi_slv_32_awid                         ), //output [AXI_ID_WIDTH+0-1:0]     mst2_aw_awid;
    .mst2_aw_awaddr  (rom_axi_slv_32_awaddr                       ), //output [AXI_ADDR_WIDTH-1:0]     mst2_aw_awaddr;
    .mst2_aw_awlen   (rom_axi_slv_32_awlen                        ), //output [7:0]                    mst2_aw_awlen;
    .mst2_aw_awsize  (rom_axi_slv_32_awsize                       ), //output [2:0]                    mst2_aw_awsize;
    .mst2_aw_awburst (rom_axi_slv_32_awburst                      ), //output [1:0]                    mst2_aw_awburst;
    .mst2_aw_awlock  (rom_axi_slv_32_awlock                       ), //output                          mst2_aw_awlock;
    .mst2_aw_awcache (rom_axi_slv_32_awcache                      ), //output [3:0]                    mst2_aw_awcache;
    .mst2_aw_awprot  (rom_axi_slv_32_awprot                       ), //output [2:0]                    mst2_aw_awprot;
    .mst2_aw_awregion(rom_axi_slv_32_awregion                     ), //output [3:0]                    mst2_aw_awregion;
    .mst2_aw_awqos   (rom_axi_slv_32_awqos                        ), //output [3:0]                    mst2_aw_awqos;
    .mst2_aw_awuser  (rom_axi_slv_32_awuser                       ), //output                          mst2_aw_awuser;//
    .mst2_aw_awvalid (rom_axi_slv_32_awvalid                      ), //output                          mst2_aw_awvalid;
    .mst2_aw_awready (rom_axi_slv_32_awready                      ), //input                           mst2_aw_awready;
    .mst2_w_wdata    (rom_axi_slv_32_wdata                        ), //output [AXI_DATA_WIDTH-1:0]     mst2_w_wdata;
    .mst2_w_wstrb    (rom_axi_slv_32_wstrb                        ), //output [AXI_DATA_WIDTH/8-1:0]   mst2_w_wstrb;
    .mst2_w_wlast    (rom_axi_slv_32_wlast                        ), //output                          mst2_w_wlast;
    .mst2_w_wuser    (rom_axi_slv_32_wuser                        ), //output                          mst2_w_wuser;
    .mst2_w_wvalid   (rom_axi_slv_32_wvalid                       ), //output                          mst2_w_wvalid;
    .mst2_w_wready   (rom_axi_slv_32_wready                       ), //input                           mst2_w_wready;
    .mst2_b_bid      (rom_axi_slv_32_bid                          ), //input  [AXI_ID_WIDTH+0-1:0]     mst2_b_bid;
    .mst2_b_bresp    (rom_axi_slv_32_bresp                        ), //input  [1:0]                    mst2_b_bresp;
    .mst2_b_buser    (rom_axi_slv_32_buser                        ), //input                           mst2_b_buser;
    .mst2_b_bvalid   (rom_axi_slv_32_bvalid                       ), //input                           mst2_b_bvalid;
    .mst2_b_bready   (rom_axi_slv_32_bready                       ), //output                          mst2_b_bready;
    .mst2_ar_arid    (rom_axi_slv_32_arid                         ), //output [AXI_ID_WIDTH+0-1:0]     mst2_ar_arid;
    .mst2_ar_araddr  (rom_axi_slv_32_araddr                       ), //output [AXI_ADDR_WIDTH-1:0]     mst2_ar_araddr;
    .mst2_ar_arlen   (rom_axi_slv_32_arlen                        ), //output [7:0]                    mst2_ar_arlen;
    .mst2_ar_arsize  (rom_axi_slv_32_arsize                       ), //output [2:0]                    mst2_ar_arsize;
    .mst2_ar_arburst (rom_axi_slv_32_arburst                      ), //output [1:0]                    mst2_ar_arburst;
    .mst2_ar_arlock  (rom_axi_slv_32_arlock                       ), //output                          mst2_ar_arlock;
    .mst2_ar_arcache (rom_axi_slv_32_arcache                      ), //output [3:0]                    mst2_ar_arcache;
    .mst2_ar_arprot  (rom_axi_slv_32_arprot                       ), //output [2:0]                    mst2_ar_arprot;
    .mst2_ar_arregion(rom_axi_slv_32_arregion                     ), //output [3:0]                    mst2_ar_arregion;
    .mst2_ar_arqos   (rom_axi_slv_32_arqos                        ), //output [3:0]                    mst2_ar_arqos;
    .mst2_ar_aruser  (rom_axi_slv_32_aruser                       ), //output                          mst2_ar_aruser;
    .mst2_ar_arvalid (rom_axi_slv_32_arvalid                      ), //output                          mst2_ar_arvalid;
    .mst2_ar_arready (rom_axi_slv_32_arready                      ), //input                           mst2_ar_arready;
    .mst2_r_rid      (rom_axi_slv_32_rid                          ), //input  [AXI_ID_WIDTH+0-1:0]     mst2_r_rid;
    .mst2_r_rdata    (rom_axi_slv_32_rdata                        ), //input  [AXI_DATA_WIDTH-1:0]     mst2_r_rdata;
    .mst2_r_rresp    (rom_axi_slv_32_rresp                        ), //input  [1:0]                    mst2_r_rresp;
    .mst2_r_rlast    (rom_axi_slv_32_rlast                        ), //input                           mst2_r_rlast;
    .mst2_r_ruser    (rom_axi_slv_32_ruser                        ), //input                           mst2_r_ruser;
    .mst2_r_rvalid   (rom_axi_slv_32_rvalid                       ), //input                           mst2_r_rvalid;
    .mst2_r_rready   (rom_axi_slv_32_rready                       )  //output                          mst2_r_rready; 
);



//wire    [7+1-1:0]    scu_axi_slv_32_awid_s;
//wire    [7+1-1:0]    scu_axi_slv_32_wid_s;
//wire    [7+1-1:0]    scu_axi_slv_32_arid_s;
//assign scu_axi_slv_32_awid_s = 8'b1111_0000;
//assign scu_axi_slv_32_wid_s  = 8'b1111_0000;
//assign scu_axi_slv_32_arid_s = 8'b1111_0000;

axi2ahb_bridge_top 
#(
  .AXI_ID_WIDTH(11)
) u_scu_axi_to_ahb_slv_32 
(
	.aclk   (u_scu_top_per_clk_i                              ), //input          aclk,
	.aresetn(u_scu_top_uncore_nic_rst_n_i                     ), //input          aresetn,

	.awid   (scu_axi_slv_32_awid                              ), //input  [10:0]  awid,
	.awaddr (scu_axi_slv_32_awaddr[31:0]                      ), //input  [31:0]  awaddr,
	.awlen  (scu_axi_slv_32_awlen                             ), //input  [7:0]   awlen,
	.awsize (scu_axi_slv_32_awsize                            ), //input  [2:0]   awsize,
	.awburst(scu_axi_slv_32_awburst                           ), //input  [1:0]   awburst,
	.awvalid(scu_axi_slv_32_awvalid                           ), //input          awvalid,
	.awready(scu_axi_slv_32_awready                           ), //output         awready,
	.wdata  ({32'd0,scu_axi_slv_32_wdata}                     ), //input  [63:0]  wdata,
	.wstrb  ({4'd0,scu_axi_slv_32_wstrb}                      ), //input  [7:0]   wstrb,
	.wlast  (scu_axi_slv_32_wlast                             ), //input          wlast,
	.wvalid (scu_axi_slv_32_wvalid                            ), //input          wvalid,
	.wready (scu_axi_slv_32_wready                            ), //output         wready,
	.arid   (scu_axi_slv_32_arid                              ), //input  [10:0]  arid,
	.araddr (scu_axi_slv_32_araddr[31:0]                      ), //input  [31:0]  araddr,
	.arlen  (scu_axi_slv_32_arlen                             ), //input  [7:0]   arlen,
	.arsize (scu_axi_slv_32_arsize                            ), //input  [2:0]   arsize,
	.arburst(scu_axi_slv_32_arburst                           ), //input  [1:0]   arburst,
	.arvalid(scu_axi_slv_32_arvalid                           ), //input          arvalid,
	.arready(scu_axi_slv_32_arready                           ), //output         arready,
	.bid    (scu_axi_slv_32_bid                               ), //output [10:0]  bid,
	.bresp  (scu_axi_slv_32_bresp                             ), //output [1:0]   bresp,
	.bvalid (scu_axi_slv_32_bvalid                            ), //output         bvalid,
	.bready (scu_axi_slv_32_bready                            ), //input          bready,
	.rid    (scu_axi_slv_32_rid                               ), //output [10:0]  rid,
	.rdata  ({scu_axi_slv_32_rdata_nc,scu_axi_slv_32_rdata}   ), //output [63:0]  rdata,
	.rresp  (scu_axi_slv_32_rresp                             ), //output [1:0]   rresp,
	.rlast  (scu_axi_slv_32_rlast                             ), //output         rlast,
	.rvalid (scu_axi_slv_32_rvalid                            ), //output         rvalid,
	.rready (scu_axi_slv_32_rready                            ), //input          rready,

	.hclk   (u_scu_top_per_clk_i                              ), //input          hclk,
	.hresetn(u_scu_top_uncore_nic_rst_n_i                     ), //input          hresetn,

	.haddr  (scu_ahb_mst_32_haddr                             ), //output [31:0]  haddr,
	.htrans (scu_ahb_mst_32_htrans                            ), //output [1:0]   htrans,
	.hwrite (scu_ahb_mst_32_hwrite                            ), //output         hwrite,
	.hsize  (scu_ahb_mst_32_hsize                             ), //output [2:0]   hsize,
	.hburst (/*no connection*/                                ), //output [2:0]   hburst,
	.hwdata ({scu_ahb_mst_32_hwdata_nc,scu_ahb_mst_32_hwdata} ), //output [63:0]  hwdata,
	.hbusreq(/*no connection*/                                ), //output         hbusreq,
	.hlock  (/*no connection*/                                ), //output         hlock,
	.hrdata ({32'd0,scu_ahb_mst_32_hrdata}                    ), //input  [63:0]  hrdata,
	.hready (scu_ahb_mst_32_hready                            ), //input          hready,
	.hresp  (scu_ahb_mst_32_hresp                             ), //input  [1:0]   hresp,
	.hgrant (scu_ahb_mst_32_hready                            ), //input          hgrant,
	.hmaster(4'd0                                             )  //input  [3:0]   hmaster
);

assign u_scu_top_ahb_hselx_o  = (scu_ahb_mst_32_haddr >= 32'h40300000) && (scu_ahb_mst_32_haddr <= 32'h4030ffff);
assign u_scu_top_ahb_hready_o = u_scu_top_ahb_readyout_i;
assign u_scu_top_ahb_htrans_o = scu_ahb_mst_32_htrans;
assign u_scu_top_ahb_hsize_o  = scu_ahb_mst_32_hsize;
assign u_scu_top_ahb_hwrite_o = scu_ahb_mst_32_hwrite;
assign u_scu_top_ahb_haddr_o  = scu_ahb_mst_32_haddr;
assign u_scu_top_ahb_hwdata_o = scu_ahb_mst_32_hwdata;

assign scu_ahb_mst_32_hready               = u_scu_top_ahb_readyout_i;
assign scu_ahb_mst_32_hrdata               = u_scu_top_ahb_rdata_i;
assign scu_ahb_mst_32_hresp                = u_scu_top_ahb_resp_i;



//wire    [7+1-1:0]    peri_axi_slv_32_awid_s;
//wire    [7+1-1:0]    peri_axi_slv_32_wid_s;
//wire    [7+1-1:0]    peri_axi_slv_32_arid_s;
//assign peri_axi_slv_32_awid_s = 8'b1111_0001;
//assign peri_axi_slv_32_wid_s  = 8'b1111_0001;
//assign peri_axi_slv_32_arid_s = 8'b1111_0001;

axi2apb #(
    .AXI4_ADDRESS_WIDTH ( 32 ),
    .AXI4_RDATA_WIDTH   ( 32 ),
    .AXI4_WDATA_WIDTH   ( 32 ),
    .AXI4_ID_WIDTH      ( 11 ),
    .AXI4_USER_WIDTH    ( 1  ),
    .BUFF_DEPTH_SLAVE   ( 2  ),
    .APB_ADDR_WIDTH     ( 32 )
) u_peri_axi2apb_32 (
    .ACLK       ( u_scu_top_per_clk_i             ),
    .ARESETn    ( u_scu_top_uncore_nic_rst_n_i    ),
    .test_en_i  ( 1'b0                            ),

    .AWID_i     ( peri_axi_slv_32_awid            ),                       
    .AWADDR_i   ( peri_axi_slv_32_awaddr[31:0]    ),                       
    .AWLEN_i    ( peri_axi_slv_32_awlen           ),                       
    .AWSIZE_i   ( peri_axi_slv_32_awsize          ),                       
    .AWBURST_i  ( peri_axi_slv_32_awburst         ),                       
    .AWLOCK_i   ( peri_axi_slv_32_awlock          ),
    .AWCACHE_i  ( peri_axi_slv_32_awcache         ),
    .AWPROT_i   ( peri_axi_slv_32_awprot          ),
    .AWREGION_i ( peri_axi_slv_32_awregion        ),
    .AWUSER_i   ( peri_axi_slv_32_awuser          ),
    .AWQOS_i    ( peri_axi_slv_32_awqos           ),
    .AWVALID_i  ( peri_axi_slv_32_awvalid         ),                       
    .AWREADY_o  ( peri_axi_slv_32_awready         ),                       
    .WDATA_i    ( peri_axi_slv_32_wdata           ),               
    .WSTRB_i    ( peri_axi_slv_32_wstrb           ),                
    .WLAST_i    ( peri_axi_slv_32_wlast           ),                       
    .WUSER_i    ( peri_axi_slv_32_wuser           ),                      
    .WVALID_i   ( peri_axi_slv_32_wvalid          ),                       
    .WREADY_o   ( peri_axi_slv_32_wready          ),
    .BID_o      ( peri_axi_slv_32_bid             ),                       
    .BRESP_o    ( peri_axi_slv_32_bresp           ),                       
    .BVALID_o   ( peri_axi_slv_32_bvalid          ),                       
    .BUSER_o    ( peri_axi_slv_32_buser           ),                      
    .BREADY_i   ( peri_axi_slv_32_bready          ),
    .ARID_i     ( peri_axi_slv_32_arid            ),                       
    .ARADDR_i   ( peri_axi_slv_32_araddr[31:0]    ),                       
    .ARLEN_i    ( peri_axi_slv_32_arlen           ),                       
    .ARSIZE_i   ( peri_axi_slv_32_arsize          ),                       
    .ARBURST_i  ( peri_axi_slv_32_arburst         ),                       
    .ARLOCK_i   ( peri_axi_slv_32_arlock          ),                        
    .ARCACHE_i  ( peri_axi_slv_32_arcache         ),                        
    .ARPROT_i   ( peri_axi_slv_32_arprot          ),
    .ARREGION_i ( peri_axi_slv_32_arregion        ),
    .ARUSER_i   ( peri_axi_slv_32_aruser          ),
    .ARQOS_i    ( peri_axi_slv_32_arqos           ),
    .ARVALID_i  ( peri_axi_slv_32_arvalid         ),
    .ARREADY_o  ( peri_axi_slv_32_arready         ),
    .RID_o      ( peri_axi_slv_32_rid             ),                       
    .RDATA_o    ( peri_axi_slv_32_rdata           ),
    .RRESP_o    ( peri_axi_slv_32_rresp           ),                       
    .RLAST_o    ( peri_axi_slv_32_rlast           ),                       
    .RUSER_o    ( peri_axi_slv_32_ruser           ),                      
    .RVALID_o   ( peri_axi_slv_32_rvalid          ),                       
    .RREADY_i   ( peri_axi_slv_32_rready          ),

    .PENABLE    ( peri_apb_mst_32_penable         ),
    .PWRITE     ( peri_apb_mst_32_pwrite          ),
    .PADDR      ( peri_apb_mst_32_paddr           ),
    .PSEL       ( peri_apb_mst_32_psel            ),
    .PWDATA     ( peri_apb_mst_32_pwdata          ),
    .PRDATA     ( peri_apb_mst_32_prdata          ),
    .PREADY     ( peri_apb_mst_32_pready          ),
    .PSLVERR    ( peri_apb_mst_32_pslverr         )
);

assign u_per_apb_penable_o     = peri_apb_mst_32_penable;//&&(peri_apb_mst_32_paddr >= 32'h40100000) && (peri_apb_mst_32_paddr <= 32'h4012ffff);
assign u_per_apb_pwrite_o      = peri_apb_mst_32_pwrite ;
assign u_per_apb_paddr_o       = peri_apb_mst_32_paddr  ;
assign u_per_apb_pselx_o       = peri_apb_mst_32_psel   ;
assign u_per_apb_hwdata_o      = peri_apb_mst_32_pwdata ;

assign peri_apb_mst_32_pready  = u_per_apb_hready_i;
assign peri_apb_mst_32_prdata  = u_per_apb_hrdata_i;
assign peri_apb_mst_32_pslverr = u_per_apb_slverr_i;



axi2mem_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(32 ),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  )
) u_rom_axi2mem 
(
    .clk_i          (u_scu_top_per_clk_i          ), //input                           clk_i,
    .rst_ni         (u_scu_top_uncore_nic_rst_n_i ), //input                           rst_ni,

    .axi_aw_awid    (rom_axi_slv_32_awid          ), //input  [AXI_ID_WIDTH-1:0]       axi_aw_awid,
    .axi_aw_awaddr  (rom_axi_slv_32_awaddr        ), //input  [AXI_ADDR_WIDTH-1:0]     axi_aw_awaddr,
    .axi_aw_awlen   (rom_axi_slv_32_awlen         ), //input  [7:0]                    axi_aw_awlen,
    .axi_aw_awsize  (rom_axi_slv_32_awsize        ), //input  [2:0]                    axi_aw_awsize,
    .axi_aw_awburst (rom_axi_slv_32_awburst       ), //input  [1:0]                    axi_aw_awburst,
    .axi_aw_awlock  (rom_axi_slv_32_awlock        ), //input                           axi_aw_awlock,
    .axi_aw_awcache (rom_axi_slv_32_awcache       ), //input  [3:0]                    axi_aw_awcache,
    .axi_aw_awprot  (rom_axi_slv_32_awprot        ), //input  [2:0]                    axi_aw_awprot,
    .axi_aw_awregion(rom_axi_slv_32_awregion      ), //input  [3:0]                    axi_aw_awregion,
    .axi_aw_awqos   (rom_axi_slv_32_awqos         ), //input  [3:0]                    axi_aw_awqos,
    .axi_aw_awuser  (rom_axi_slv_32_awuser        ), //input  [AXI_USER_WIDTH-1:0]     axi_aw_awuser,//
    .axi_aw_awvalid (rom_axi_slv_32_awvalid       ), //input                           axi_aw_awvalid,
    .axi_aw_awready (rom_axi_slv_32_awready       ), //output                          axi_aw_awready,
    .axi_w_wdata    (rom_axi_slv_32_wdata         ), //input  [AXI_DATA_WIDTH-1:0]     axi_w_wdata,
    .axi_w_wstrb    (rom_axi_slv_32_wstrb         ), //input  [AXI_DATA_WIDTH/8-1:0]   axi_w_wstrb,
    .axi_w_wlast    (rom_axi_slv_32_wlast         ), //input                           axi_w_wlast,
    .axi_w_wuser    (rom_axi_slv_32_wuser         ), //input  [AXI_USER_WIDTH-1:0]     axi_w_wuser,
    .axi_w_wvalid   (rom_axi_slv_32_wvalid        ), //input                           axi_w_wvalid,
    .axi_w_wready   (rom_axi_slv_32_wready        ), //output                          axi_w_wready,
    .axi_b_bid      (rom_axi_slv_32_bid           ), //output [AXI_ID_WIDTH-1:0]       axi_b_bid,
    .axi_b_bresp    (rom_axi_slv_32_bresp         ), //output [1:0]                    axi_b_bresp,
    .axi_b_buser    (rom_axi_slv_32_buser         ), //output [AXI_USER_WIDTH-1:0]     axi_b_buser,
    .axi_b_bvalid   (rom_axi_slv_32_bvalid        ), //output                          axi_b_bvalid,
    .axi_b_bready   (rom_axi_slv_32_bready        ), //input                           axi_b_bready,
    .axi_ar_arid    (rom_axi_slv_32_arid          ), //input  [AXI_ID_WIDTH-1:0]       axi_ar_arid,
    .axi_ar_araddr  (rom_axi_slv_32_araddr        ), //input  [AXI_ADDR_WIDTH-1:0]     axi_ar_araddr,
    .axi_ar_arlen   (rom_axi_slv_32_arlen         ), //input  [7:0]                    axi_ar_arlen,
    .axi_ar_arsize  (rom_axi_slv_32_arsize        ), //input  [2:0]                    axi_ar_arsize,
    .axi_ar_arburst (rom_axi_slv_32_arburst       ), //input  [1:0]                    axi_ar_arburst,
    .axi_ar_arlock  (rom_axi_slv_32_arlock        ), //input                           axi_ar_arlock,
    .axi_ar_arcache (rom_axi_slv_32_arcache       ), //input  [3:0]                    axi_ar_arcache,
    .axi_ar_arprot  (rom_axi_slv_32_arprot        ), //input  [2:0]                    axi_ar_arprot,
    .axi_ar_arregion(rom_axi_slv_32_arregion      ), //input  [3:0]                    axi_ar_arregion,
    .axi_ar_arqos   (rom_axi_slv_32_arqos         ), //input  [3:0]                    axi_ar_arqos,
    .axi_ar_aruser  (rom_axi_slv_32_aruser        ), //input  [AXI_USER_WIDTH-1:0]     axi_ar_aruser,
    .axi_ar_arvalid (rom_axi_slv_32_arvalid       ), //input                           axi_ar_arvalid,
    .axi_ar_arready (rom_axi_slv_32_arready       ), //output                          axi_ar_arready,
    .axi_r_rid      (rom_axi_slv_32_rid           ), //output [AXI_ID_WIDTH-1:0]       axi_r_rid,
    .axi_r_rdata    (rom_axi_slv_32_rdata         ), //output [AXI_DATA_WIDTH-1:0]     axi_r_rdata,
    .axi_r_rresp    (rom_axi_slv_32_rresp         ), //output [1:0]                    axi_r_rresp,
    .axi_r_rlast    (rom_axi_slv_32_rlast         ), //output                          axi_r_rlast,
    .axi_r_ruser    (rom_axi_slv_32_ruser         ), //output [AXI_USER_WIDTH-1:0]     axi_r_ruser,
    .axi_r_rvalid   (rom_axi_slv_32_rvalid        ), //output                          axi_r_rvalid,
    .axi_r_rready   (rom_axi_slv_32_rready        ), //input                           axi_r_rready, 

    .mem_req_o      (rom_req                      ), //output                          mem_req_o,
    .mem_we_o       (rom_we                       ), //output                          mem_we_o,
    .mem_addr_o     (rom_addr                     ), //output [AXI_ADDR_WIDTH-1:0]     mem_addr_o,
    .mem_be_o       (rom_be                       ), //output [AXI_DATA_WIDTH/8-1:0]   mem_be_o,
    .mem_data_o     (rom_wdata                    ), //output [AXI_DATA_WIDTH-1:0]     mem_data_o,
    .mem_data_i     (rom_rdata                    )  //input  [AXI_DATA_WIDTH-1:0]     mem_data_i
);

lmu_rom #(
  .NUM_WORDS  ( 32768      )
) u_lmu_rom (
    .clk_i      ( u_scu_top_per_clk_i          ),
    .rst_ni     ( u_scu_top_uncore_nic_rst_n_i ),
    .req_i      ( rom_req                      ),
    .addr_i     ( rom_addr[16:2]               ),
    .rdata_o    ( rom_rdata                    )
);



endmodule
