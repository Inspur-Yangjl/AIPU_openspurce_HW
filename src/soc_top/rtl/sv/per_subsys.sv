// This system-verilog module was generated by Vega
//               Please do not edit!

//---------------------------------------------------------------------------
//                                                                           
//              Inspur Confidential                                          
// Copyright (c) 2021 Inspur. All rights reserved
//                                                                           
// File    : /nfs/work/shared/aipu.work/zhangqian06/workspace/zhangqian06.aipu.default/design_repo/rtl/soc_top/rtl/sv/per_subsys.sv
// Author  : Inspur Xi'an R&D                                                
// History : 2021-Nov-23 09:58:32 AM - Created    
//                                                                           
//---------------------------------------------------------------------------

module per_subsys(
    u_per_clk_i,
    u_per_rst_n_i,
    u_uart_clk_i,
    u_uart_kernel_clk_i,
    u_uart_rst_n_i,
    u_timer0_apb_clk_i,
    u_timer0_kernel_clk_i,
    u_timer0_rst_n_i,
    u_timer1_apb_clk_i,
    u_timer1_kernel_clk_i,
    u_timer1_rst_n_i,
    u_per_apb_penable_i,
    u_per_apb_pselx_i,
    u_per_apb_paddr_i,
    u_per_apb_pwrite_i,
    u_per_apb_pwdata_i,
    u_per_apb_prdata_o,
    u_per_apb_pready_o,
    u_per_apb_pslverr_o,
    u_apb_uart_txd_o,
    u_apb_uart_rxd_i,
    u_apb_uart_int_o,
    u_apb_timer_timer0_int_ovf_o,
    u_apb_timer_timer0_int_cmp_o,
    u_apb_timer_timer1_int_ovf_o,
    u_apb_timer_timer1_int_cmp_o
);

input         u_per_clk_i;
input         u_per_rst_n_i;
input         u_uart_clk_i;
input         u_uart_rst_n_i;
input         u_timer1_kernel_clk_i;
input         u_timer1_apb_clk_i;
input         u_timer1_rst_n_i;
input         u_timer0_apb_clk_i;
input         u_timer0_kernel_clk_i;
input         u_timer0_rst_n_i;
input         u_uart_kernel_clk_i;

input         u_per_apb_penable_i;
input         u_per_apb_pselx_i;
input  [31:0] u_per_apb_paddr_i;
input         u_per_apb_pwrite_i;
input  [31:0] u_per_apb_pwdata_i;
output [31:0] u_per_apb_prdata_o;
output        u_per_apb_pready_o;
output        u_per_apb_pslverr_o;

output        u_apb_uart_txd_o;
input         u_apb_uart_rxd_i;

output        u_apb_uart_int_o;
output        u_apb_timer_timer0_int_ovf_o;
output        u_apb_timer_timer0_int_cmp_o;
output        u_apb_timer_timer1_int_ovf_o;
output        u_apb_timer_timer1_int_cmp_o;

// input wires

// output wires

// internal wires
wire [1:0]       utt_apb_penable;
wire [1:0]       utt_apb_pwrite;
wire [1:0][31:0] utt_apb_paddr;
wire [1:0]       utt_apb_psel;
wire [1:0][31:0] utt_apb_pwdata;
wire [1:0][31:0] utt_apb_prdata;
wire [1:0]       utt_apb_pready;
wire [1:0]       utt_apb_pslverr;

wire             uart_apb_penable;
wire             uart_apb_pwrite;
wire      [31:0] uart_apb_paddr;
wire             uart_apb_psel;
wire      [31:0] uart_apb_pwdata;
wire      [31:0] uart_apb_prdata;
wire             uart_apb_pready;
wire             uart_apb_pslverr;

wire             timer_apb_penable;
wire             timer_apb_pwrite;
wire      [31:0] timer_apb_paddr;
wire             timer_apb_psel;
wire      [31:0] timer_apb_pwdata;
wire      [31:0] timer_apb_prdata;
wire             timer_apb_pready;
wire             timer_apb_pslverr;
wire      [3:0]  timer_int;


// input assign

// output assign
assign u_apb_timer_timer0_int_ovf_o = timer_int[0];
assign u_apb_timer_timer0_int_cmp_o = timer_int[1];
assign u_apb_timer_timer1_int_ovf_o = timer_int[2];
assign u_apb_timer_timer1_int_cmp_o = timer_int[3];

// internal assign
assign uart_apb_penable   = utt_apb_penable[0];
assign uart_apb_pwrite    = utt_apb_pwrite [0];
assign uart_apb_paddr     = utt_apb_paddr  [0];
assign uart_apb_psel      = utt_apb_psel   [0];
assign uart_apb_pwdata    = utt_apb_pwdata [0];
assign utt_apb_prdata [0] = uart_apb_prdata   ;
assign utt_apb_pready [0] = uart_apb_pready   ;
assign utt_apb_pslverr[0] = uart_apb_pslverr  ;

assign timer_apb_penable  = utt_apb_penable[1];
assign timer_apb_pwrite   = utt_apb_pwrite [1];
assign timer_apb_paddr    = utt_apb_paddr  [1];
assign timer_apb_psel     = utt_apb_psel   [1];
assign timer_apb_pwdata   = utt_apb_pwdata [1];
assign utt_apb_prdata [1] = timer_apb_prdata  ;
assign utt_apb_pready [1] = timer_apb_pready  ;
assign utt_apb_pslverr[1] = timer_apb_pslverr ;


apb_node #(
    .NB_MASTER     (2 ),
    .APB_DATA_WIDTH(32),
    .APB_ADDR_WIDTH(32)
) u_uncore_apb_node
(
    // SLAVE PORT    
    .penable_i   ( u_per_apb_penable_i           ),   //input  logic 					                 penable_i,
    .pwrite_i    ( u_per_apb_pwrite_i            ),   //input  logic 					                 pwrite_i,
    .paddr_i     ( u_per_apb_paddr_i             ),   //input  logic [APB_ADDR_WIDTH-1:0] 		         paddr_i,
    .psel_i      ( u_per_apb_pselx_i             ),   //input  logic                                     psel_i,
    .pwdata_i    ( u_per_apb_pwdata_i            ),   //input  logic [APB_DATA_WIDTH-1:0] 		         pwdata_i,
    .prdata_o    ( u_per_apb_prdata_o            ),   //output logic [APB_DATA_WIDTH-1:0] 		         prdata_o,
    .pready_o    ( u_per_apb_pready_o            ),   //output logic 					                 pready_o,
    .pslverr_o   ( u_per_apb_pslverr_o           ),   //output logic 					                 pslverr_o,
    // MASTER PORTS 
    .penable_o   ( utt_apb_penable               ),   //output logic [NB_MASTER-1:0] 			         penable_o,
    .pwrite_o    ( utt_apb_pwrite                ),   //output logic [NB_MASTER-1:0] 			         pwrite_o,
    .paddr_o     ( utt_apb_paddr                 ),   //output logic [NB_MASTER-1:0][APB_ADDR_WIDTH-1:0] paddr_o,
    .psel_o      ( utt_apb_psel                  ),   //output logic [NB_MASTER-1:0] 			         psel_o,
    .pwdata_o    ( utt_apb_pwdata                ),   //output logic [NB_MASTER-1:0][APB_DATA_WIDTH-1:0] pwdata_o,
    .prdata_i    ( utt_apb_prdata                ),   //input  logic [NB_MASTER-1:0][APB_DATA_WIDTH-1:0] prdata_i,
    .pready_i    ( utt_apb_pready                ),   //input  logic [NB_MASTER-1:0] 			         pready_i,
    .pslverr_i   ( utt_apb_pslverr               ),   //input  logic [NB_MASTER-1:0] 			         pslverr_i,
    // CONFIGURATION PORT  
    .START_ADDR_i( {32'h4011_0000,32'h4010_0000} ),   //input logic  [NB_MASTER-1:0][APB_ADDR_WIDTH-1:0] START_ADDR_i,
    .END_ADDR_i  ( {32'h4011_ffff,32'h4010_ffff} )    //input logic  [NB_MASTER-1:0][APB_ADDR_WIDTH-1:0] END_ADDR_i
);


apb_uart u_apb_uart (
    .CLK     ( u_per_clk_i            ),
    .RSTN    ( u_per_rst_n_i          ),
    .PSEL    ( uart_apb_psel          ),
    .PENABLE ( uart_apb_penable       ),
    .PWRITE  ( uart_apb_pwrite        ),
    .PADDR   ( uart_apb_paddr[4:2]    ),
    .PWDATA  ( uart_apb_pwdata        ),
    .PRDATA  ( uart_apb_prdata        ),
    .PREADY  ( uart_apb_pready        ),
    .PSLVERR ( uart_apb_pslverr       ),
    .INT     ( u_apb_uart_int_o       ),
    .OUT1N   (                        ), // keep open
    .OUT2N   (                        ), // keep open
    .RTSN    (                        ), // no flow control
    .DTRN    (                        ), // no flow control
    .CTSN    ( 1'b0                   ),
    .DSRN    ( 1'b0                   ),
    .DCDN    ( 1'b0                   ),
    .RIN     ( 1'b0                   ),
    .SIN     ( u_apb_uart_rxd_i       ),
    .SOUT    ( u_apb_uart_txd_o       )
);


apb_timer #(
    .APB_ADDR_WIDTH ( 32 ),
    .TIMER_CNT      ( 2  )
) u_apb_timer (
    .HCLK    ( u_per_clk_i            ),
    .HRESETn ( u_per_rst_n_i          ),
    .PSEL    ( timer_apb_psel         ),
    .PENABLE ( timer_apb_penable      ),
    .PWRITE  ( timer_apb_pwrite       ),
    .PADDR   ( timer_apb_paddr        ),
    .PWDATA  ( timer_apb_pwdata       ),
    .PRDATA  ( timer_apb_prdata       ),
    .PREADY  ( timer_apb_pready       ),
    .PSLVERR ( timer_apb_pslverr      ),
    .irq_o   ( timer_int              )
);



endmodule
