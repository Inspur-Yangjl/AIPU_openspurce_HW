// This system-verilog module was generated by Vega
//               Please do not edit!

//---------------------------------------------------------------------------
//                                                                           
//              Inspur Confidential                                          
// Copyright (c) 2021 Inspur. All rights reserved
//                                                                           
// File    : /nfs/work/shared/aipu.work/dingzhiming/workspace/dingzhiming.aipu.default/env_repo/design_repo/rtl/soc_top/rtl/sv/riscv_subsys_top.sv
// Author  : Inspur Xi'an R&D                                                
// History : 2021-Sep-29 11:27:35 AM - Created    
//                                                                           
//---------------------------------------------------------------------------

module riscv_subsys_top #(
localparam int unsigned RISCV_NRLANES = 2
)(
    u_uncore_top_riscv_clk_i,
    u_uncore_top_riscv_core_clk_i,
    u_uncore_top_riscv_rst_i,
    u_uncore_top_riscv_debug_clk_i,
    u_uncore_top_riscv_debug_rst_i,
    u_uncore_top_riscv_rtc_toggle_i,
    u_uncore_top_per_clk_i,
    u_uncore_top_core_nic_rst_n_i,
    u_uncore_top_dma_clk_i,
    u_uncore_top_dma_rst_n_i,
    u_xdma_0_top_axi_aclk_i,
    u_xdma_0_top_axi_aresetn_i,
    u_ddr4_0_top_c0_ddr4_ui_clk_i,
    por_rstn_sync,
    u_soc_top_TCK_i,
    u_soc_top_TRST_n_i,
    u_tdi_rmux_z_i,
    u_tms_rmux_z_i,
    debug_systemjtag_jtag_TDO_driven,
    u_SiFive_CoreIPSubsystem_debug_systemjtag_jtag_TDO_data_o,
    riscv_debug_dmactive,
    riscv_debug_dmactiveack,
    u_xdma_0_top_s_axil_awvalid_o,
    u_xdma_0_top_s_axil_awready_i,
    u_xdma_0_top_s_axil_awaddr_o,
    u_xdma_0_top_s_axil_awprot_o,
    u_xdma_0_top_s_axil_wvalid_o,
    u_xdma_0_top_s_axil_wready_i,
    u_xdma_0_top_s_axil_wdata_o,
    u_xdma_0_top_s_axil_wstrb_o,
    u_xdma_0_top_s_axil_bvalid_i,
    u_xdma_0_top_s_axil_bready_o,
    u_xdma_0_top_s_axil_bresp_i,
    u_xdma_0_top_s_axil_arvalid_o,
    u_xdma_0_top_s_axil_arready_i,
    u_xdma_0_top_s_axil_araddr_o,
    u_xdma_0_top_s_axil_arprot_o,
    u_xdma_0_top_s_axil_rvalid_i,
    u_xdma_0_top_s_axil_rready_o,
    u_xdma_0_top_s_axil_rdata_i,
    u_xdma_0_top_s_axil_rresp_i,
    u_xdma_0_top_m_axi_awid_i,
    u_xdma_0_top_m_axi_awvalid_i,
    u_xdma_0_top_m_axi_awready_o,
    u_xdma_0_top_m_axi_awaddr_i,
    u_xdma_0_top_m_axi_awlen_i,
    u_xdma_0_top_m_axi_awsize_i,
    u_xdma_0_top_m_axi_awburst_i,
    u_xdma_0_top_m_axi_awlock_i,
    u_xdma_0_top_m_axi_awcache_i,
    u_xdma_0_top_m_axi_awprot_i,
    u_xdma_0_top_m_axi_wvalid_i,
    u_xdma_0_top_m_axi_wready_o,
    u_xdma_0_top_m_axi_wlast_i,
    u_xdma_0_top_m_axi_wdata_i,
    u_xdma_0_top_m_axi_wstrb_i,
    u_xdma_0_top_m_axi_bid_o,
    u_xdma_0_top_m_axi_bvalid_o,
    u_xdma_0_top_m_axi_bready_i,
    u_xdma_0_top_m_axi_bresp_o,
    u_xdma_0_top_m_axi_arid_i,
    u_xdma_0_top_m_axi_arvalid_i,
    u_xdma_0_top_m_axi_arready_o,
    u_xdma_0_top_m_axi_araddr_i,
    u_xdma_0_top_m_axi_arlen_i,
    u_xdma_0_top_m_axi_arsize_i,
    u_xdma_0_top_m_axi_arburst_i,
    u_xdma_0_top_m_axi_arlock_i,
    u_xdma_0_top_m_axi_arcache_i,
    u_xdma_0_top_m_axi_arprot_i,
    u_xdma_0_top_m_axi_rid_o,
    u_xdma_0_top_m_axi_rvalid_o,
    u_xdma_0_top_m_axi_rready_i,
    u_xdma_0_top_m_axi_rdata_o,
    u_xdma_0_top_m_axi_rresp_o,
    u_xdma_0_top_m_axi_rlast_o,
    u_xdma_0_top_m_axil_awvalid_i,
    u_xdma_0_top_m_axil_awready_o,
    u_xdma_0_top_m_axil_awaddr_i,
    u_xdma_0_top_m_axil_awprot_i,
    u_xdma_0_top_m_axil_wvalid_i,
    u_xdma_0_top_m_axil_wready_o,
    u_xdma_0_top_m_axil_wdata_i,
    u_xdma_0_top_m_axil_wstrb_i,
    u_xdma_0_top_m_axil_bvalid_o,
    u_xdma_0_top_m_axil_bready_i,
    u_xdma_0_top_m_axil_bresp_o,
    u_xdma_0_top_m_axil_arvalid_i,
    u_xdma_0_top_m_axil_arready_o,
    u_xdma_0_top_m_axil_araddr_i,
    u_xdma_0_top_m_axil_arprot_i,
    u_xdma_0_top_m_axil_rvalid_o,
    u_xdma_0_top_m_axil_rready_i,
    u_xdma_0_top_m_axil_rdata_o,
    u_xdma_0_top_m_axil_rresp_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awid_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awvalid_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awready_i,
    u_ddr4_0_top_c0_ddr4_s_axi_awaddr_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awlen_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awsize_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awburst_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awlock_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awcache_o,
    u_ddr4_0_top_c0_ddr4_s_axi_awprot_o,
    u_ddr4_0_top_c0_ddr4_s_axi_wvalid_o,
    u_ddr4_0_top_c0_ddr4_s_axi_wready_i,
    u_ddr4_0_top_c0_ddr4_s_axi_wlast_o,
    u_ddr4_0_top_c0_ddr4_s_axi_wdata_o,
    u_ddr4_0_top_c0_ddr4_s_axi_wstrb_o,
    u_ddr4_0_top_c0_ddr4_s_axi_bid_i,
    u_ddr4_0_top_c0_ddr4_s_axi_bvalid_i,
    u_ddr4_0_top_c0_ddr4_s_axi_bready_o,
    u_ddr4_0_top_c0_ddr4_s_axi_bresp_i,
    u_ddr4_0_top_c0_ddr4_s_axi_arid_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arvalid_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arready_i,
    u_ddr4_0_top_c0_ddr4_s_axi_araddr_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arlen_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arsize_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arburst_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arlock_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arcache_o,
    u_ddr4_0_top_c0_ddr4_s_axi_arprot_o,
    u_ddr4_0_top_c0_ddr4_s_axi_rid_i,
    u_ddr4_0_top_c0_ddr4_s_axi_rvalid_i,
    u_ddr4_0_top_c0_ddr4_s_axi_rready_o,
    u_ddr4_0_top_c0_ddr4_s_axi_rdata_i,
    u_ddr4_0_top_c0_ddr4_s_axi_rresp_i,
    u_ddr4_0_top_c0_ddr4_s_axi_rlast_i,
    u_NV_nvdla_top_pwrite_o,
    u_NV_nvdla_top_paddr_o,
    u_NV_nvdla_top_pwdata_o,
    u_NV_nvdla_top_pselX_o,
    u_NV_nvdla_top_penable_o,
    u_NV_nvdla_top_prdata_i,
    u_NV_nvdla_top_pready_i,
    u_NV_nvdla_top_pslverr_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awid_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awvalid_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awready_o,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awaddr_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awlen_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awsize_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awburst_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awlock_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awcache_i,
    u_NV_nvdla_top_nvdla_core2dbb_aw_awprot_i,
    u_NV_nvdla_top_nvdla_core2dbb_w_wvalid_i,
    u_NV_nvdla_top_nvdla_core2dbb_w_wready_o,
    u_NV_nvdla_top_nvdla_core2dbb_w_wlast_i,
    u_NV_nvdla_top_nvdla_core2dbb_w_wdata_i,
    u_NV_nvdla_top_nvdla_core2dbb_w_wstrb_i,
    u_NV_nvdla_top_nvdla_core2dbb_b_bid_o,
    u_NV_nvdla_top_nvdla_core2dbb_b_bvalid_o,
    u_NV_nvdla_top_nvdla_core2dbb_b_bready_i,
    u_NV_nvdla_top_nvdla_core2dbb_b_bresp_o,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arid_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arvalid_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arready_o,
    u_NV_nvdla_top_nvdla_core2dbb_ar_araddr_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arlen_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arsize_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arburst_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arlock_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arcache_i,
    u_NV_nvdla_top_nvdla_core2dbb_ar_arprot_i,
    u_NV_nvdla_top_nvdla_core2dbb_r_rid_o,
    u_NV_nvdla_top_nvdla_core2dbb_r_rvalid_o,
    u_NV_nvdla_top_nvdla_core2dbb_r_rready_i,
    u_NV_nvdla_top_nvdla_core2dbb_r_rdata_o,
    u_NV_nvdla_top_nvdla_core2dbb_r_rresp_o,
    u_NV_nvdla_top_nvdla_core2dbb_r_rlast_o,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awid_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awvalid_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awready_o,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awaddr_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awlen_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awsize_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awburst_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awlock_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awcache_i,
    u_NV_nvdla_top_nvdla_core2cvsram_aw_awprot_i,
    u_NV_nvdla_top_nvdla_core2cvsram_w_wvalid_i,
    u_NV_nvdla_top_nvdla_core2cvsram_w_wready_o,
    u_NV_nvdla_top_nvdla_core2cvsram_w_wlast_i,
    u_NV_nvdla_top_nvdla_core2cvsram_w_wdata_i,
    u_NV_nvdla_top_nvdla_core2cvsram_w_wstrb_i,
    u_NV_nvdla_top_nvdla_core2cvsram_b_bid_o,
    u_NV_nvdla_top_nvdla_core2cvsram_b_bvalid_o,
    u_NV_nvdla_top_nvdla_core2cvsram_b_bready_i,
    u_NV_nvdla_top_nvdla_core2cvsram_b_bresp_o,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arid_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arvalid_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arready_o,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_araddr_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arlen_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arsize_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arburst_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arlock_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arcache_i,
    u_NV_nvdla_top_nvdla_core2cvsram_ar_arprot_i,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rid_o,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rvalid_o,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rready_i,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rdata_o,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rresp_o,
    u_NV_nvdla_top_nvdla_core2cvsram_r_rlast_o,
    u_uncore_top_AWID_AXI_CORE_MST_o,
    u_uncore_top_AWVALID_AXI_CORE_MST_o,
    u_uncore_top_AWREADY_AXI_CORE_MST_i,
    u_uncore_top_AWADDR_AXI_CORE_MST_o,
    u_uncore_top_AWLEN_AXI_CORE_MST_o,
    u_uncore_top_AWSIZE_AXI_CORE_MST_o,
    u_uncore_top_AWBURST_AXI_CORE_MST_o,
    u_uncore_top_AWLOCK_AXI_CORE_MST_o,
    u_uncore_top_AWCACHE_AXI_CORE_MST_o,
    u_uncore_top_AWPROT_AXI_CORE_MST_o,
    u_uncore_top_WVALID_AXI_CORE_MST_o,
    u_uncore_top_WREADY_AXI_CORE_MST_i,
    u_uncore_top_WLAST_AXI_CORE_MST_o,
    u_uncore_top_WDATA_AXI_CORE_MST_o,
    u_uncore_top_WSTRB_AXI_CORE_MST_o,
    u_uncore_top_BID_AXI_CORE_MST_i,
    u_uncore_top_BVALID_AXI_CORE_MST_i,
    u_uncore_top_BREADY_AXI_CORE_MST_o,
    u_uncore_top_BRESP_AXI_CORE_MST_i,
    u_uncore_top_ARID_AXI_CORE_MST_o,
    u_uncore_top_ARVALID_AXI_CORE_MST_o,
    u_uncore_top_ARREADY_AXI_CORE_MST_i,
    u_uncore_top_ARADDR_AXI_CORE_MST_o,
    u_uncore_top_ARLEN_AXI_CORE_MST_o,
    u_uncore_top_ARSIZE_AXI_CORE_MST_o,
    u_uncore_top_ARBURST_AXI_CORE_MST_o,
    u_uncore_top_ARLOCK_AXI_CORE_MST_o,
    u_uncore_top_ARCACHE_AXI_CORE_MST_o,
    u_uncore_top_ARPROT_AXI_CORE_MST_o,
    u_uncore_top_RID_AXI_CORE_MST_i,
    u_uncore_top_RVALID_AXI_CORE_MST_i,
    u_uncore_top_RREADY_AXI_CORE_MST_o,
    u_uncore_top_RDATA_AXI_CORE_MST_i,
    u_uncore_top_RRESP_AXI_CORE_MST_i,
    u_uncore_top_RLAST_AXI_CORE_MST_i,
    u_uncore_top_timer0_int_cmp_i,
    u_uncore_top_timer0_int_ovf_i,
    u_uncore_top_timer1_int_cmp_i,
    u_uncore_top_timer1_int_ovf_i,
    u_uncore_top_sw_int0_i,
    u_uncore_top_sw_int1_i,
    u_uncore_top_scu_int_i,
    u_uncore_top_uart_int_i,
    u_NV_nvdla_top_nvdla_intr_i
);

input              u_uncore_top_riscv_clk_i;
input              u_uncore_top_riscv_core_clk_i;
input              u_uncore_top_riscv_rst_i;
input              u_uncore_top_riscv_debug_clk_i;
input              u_uncore_top_riscv_debug_rst_i;
input              u_uncore_top_riscv_rtc_toggle_i;
input              u_uncore_top_per_clk_i;
input              u_uncore_top_core_nic_rst_n_i;
input              u_uncore_top_dma_clk_i;
input              u_uncore_top_dma_rst_n_i;
input              u_xdma_0_top_axi_aclk_i;
input              u_xdma_0_top_axi_aresetn_i;
input              u_ddr4_0_top_c0_ddr4_ui_clk_i;
input              por_rstn_sync;

input              u_soc_top_TCK_i;
input              u_soc_top_TRST_n_i;
input              u_tdi_rmux_z_i;
input              u_tms_rmux_z_i;
output             debug_systemjtag_jtag_TDO_driven;
output             u_SiFive_CoreIPSubsystem_debug_systemjtag_jtag_TDO_data_o;

output             wire riscv_debug_dmactive;
input              wire riscv_debug_dmactiveack;

output             u_xdma_0_top_s_axil_awvalid_o;
input              u_xdma_0_top_s_axil_awready_i;
output [31:0]      u_xdma_0_top_s_axil_awaddr_o;
output [2:0]       u_xdma_0_top_s_axil_awprot_o;
output             u_xdma_0_top_s_axil_wvalid_o;
input              u_xdma_0_top_s_axil_wready_i;
output [31:0]      u_xdma_0_top_s_axil_wdata_o;
output [3:0]       u_xdma_0_top_s_axil_wstrb_o;
input              u_xdma_0_top_s_axil_bvalid_i;
output             u_xdma_0_top_s_axil_bready_o;
input  [1:0]       u_xdma_0_top_s_axil_bresp_i;
output             u_xdma_0_top_s_axil_arvalid_o;
input              u_xdma_0_top_s_axil_arready_i;
output [31:0]      u_xdma_0_top_s_axil_araddr_o;
output [2:0]       u_xdma_0_top_s_axil_arprot_o;
input              u_xdma_0_top_s_axil_rvalid_i;
output             u_xdma_0_top_s_axil_rready_o;
input  [31:0]      u_xdma_0_top_s_axil_rdata_i;
input  [1:0]       u_xdma_0_top_s_axil_rresp_i;

input  [3:0]       u_xdma_0_top_m_axi_awid_i;
input              u_xdma_0_top_m_axi_awvalid_i;
output             u_xdma_0_top_m_axi_awready_o;
input  [63:0]      u_xdma_0_top_m_axi_awaddr_i;
input  [7:0]       u_xdma_0_top_m_axi_awlen_i;
input  [2:0]       u_xdma_0_top_m_axi_awsize_i;
input  [1:0]       u_xdma_0_top_m_axi_awburst_i;
input              u_xdma_0_top_m_axi_awlock_i;
input  [3:0]       u_xdma_0_top_m_axi_awcache_i;
input  [2:0]       u_xdma_0_top_m_axi_awprot_i;
input              u_xdma_0_top_m_axi_wvalid_i;
output             u_xdma_0_top_m_axi_wready_o;
input              u_xdma_0_top_m_axi_wlast_i;
input  [63:0]      u_xdma_0_top_m_axi_wdata_i;
input  [7:0]       u_xdma_0_top_m_axi_wstrb_i;
output [3:0]       u_xdma_0_top_m_axi_bid_o;
output             u_xdma_0_top_m_axi_bvalid_o;
input              u_xdma_0_top_m_axi_bready_i;
output [1:0]       u_xdma_0_top_m_axi_bresp_o;
input  [3:0]       u_xdma_0_top_m_axi_arid_i;
input              u_xdma_0_top_m_axi_arvalid_i;
output             u_xdma_0_top_m_axi_arready_o;
input  [63:0]      u_xdma_0_top_m_axi_araddr_i;
input  [7:0]       u_xdma_0_top_m_axi_arlen_i;
input  [2:0]       u_xdma_0_top_m_axi_arsize_i;
input  [1:0]       u_xdma_0_top_m_axi_arburst_i;
input              u_xdma_0_top_m_axi_arlock_i;
input  [3:0]       u_xdma_0_top_m_axi_arcache_i;
input  [2:0]       u_xdma_0_top_m_axi_arprot_i;
output [3:0]       u_xdma_0_top_m_axi_rid_o;
output             u_xdma_0_top_m_axi_rvalid_o;
input              u_xdma_0_top_m_axi_rready_i;
output [63:0]      u_xdma_0_top_m_axi_rdata_o;
output [1:0]       u_xdma_0_top_m_axi_rresp_o;
output             u_xdma_0_top_m_axi_rlast_o;

input              u_xdma_0_top_m_axil_awvalid_i;
output             u_xdma_0_top_m_axil_awready_o;
input  [31:0]      u_xdma_0_top_m_axil_awaddr_i;
input  [2:0]       u_xdma_0_top_m_axil_awprot_i;
input              u_xdma_0_top_m_axil_wvalid_i;
output             u_xdma_0_top_m_axil_wready_o;
input  [31:0]      u_xdma_0_top_m_axil_wdata_i;
input  [3:0]       u_xdma_0_top_m_axil_wstrb_i;
output             u_xdma_0_top_m_axil_bvalid_o;
input              u_xdma_0_top_m_axil_bready_i;
output [1:0]       u_xdma_0_top_m_axil_bresp_o;
input              u_xdma_0_top_m_axil_arvalid_i;
output             u_xdma_0_top_m_axil_arready_o;
input  [31:0]      u_xdma_0_top_m_axil_araddr_i;
input  [2:0]       u_xdma_0_top_m_axil_arprot_i;
output             u_xdma_0_top_m_axil_rvalid_o;
input              u_xdma_0_top_m_axil_rready_i;
output [31:0]      u_xdma_0_top_m_axil_rdata_o;
output [1:0]       u_xdma_0_top_m_axil_rresp_o;

output [12:0]      u_ddr4_0_top_c0_ddr4_s_axi_awid_o;
output             u_ddr4_0_top_c0_ddr4_s_axi_awvalid_o;
input              u_ddr4_0_top_c0_ddr4_s_axi_awready_i;
output [63:0]      u_ddr4_0_top_c0_ddr4_s_axi_awaddr_o;
output [7:0]       u_ddr4_0_top_c0_ddr4_s_axi_awlen_o;
output [2:0]       u_ddr4_0_top_c0_ddr4_s_axi_awsize_o;
output [1:0]       u_ddr4_0_top_c0_ddr4_s_axi_awburst_o;
output             u_ddr4_0_top_c0_ddr4_s_axi_awlock_o;
output [3:0]       u_ddr4_0_top_c0_ddr4_s_axi_awcache_o;
output [2:0]       u_ddr4_0_top_c0_ddr4_s_axi_awprot_o;
output             u_ddr4_0_top_c0_ddr4_s_axi_wvalid_o;
input              u_ddr4_0_top_c0_ddr4_s_axi_wready_i;
output             u_ddr4_0_top_c0_ddr4_s_axi_wlast_o;
output [255:0]     u_ddr4_0_top_c0_ddr4_s_axi_wdata_o;
output [31:0]      u_ddr4_0_top_c0_ddr4_s_axi_wstrb_o;
input  [12:0]      u_ddr4_0_top_c0_ddr4_s_axi_bid_i;
input              u_ddr4_0_top_c0_ddr4_s_axi_bvalid_i;
output             u_ddr4_0_top_c0_ddr4_s_axi_bready_o;
input  [1:0]       u_ddr4_0_top_c0_ddr4_s_axi_bresp_i;
output [12:0]      u_ddr4_0_top_c0_ddr4_s_axi_arid_o;
output             u_ddr4_0_top_c0_ddr4_s_axi_arvalid_o;
input              u_ddr4_0_top_c0_ddr4_s_axi_arready_i;
output [63:0]      u_ddr4_0_top_c0_ddr4_s_axi_araddr_o;
output [7:0]       u_ddr4_0_top_c0_ddr4_s_axi_arlen_o;
output [2:0]       u_ddr4_0_top_c0_ddr4_s_axi_arsize_o;
output [1:0]       u_ddr4_0_top_c0_ddr4_s_axi_arburst_o;
output             u_ddr4_0_top_c0_ddr4_s_axi_arlock_o;
output [3:0]       u_ddr4_0_top_c0_ddr4_s_axi_arcache_o;
output [2:0]       u_ddr4_0_top_c0_ddr4_s_axi_arprot_o;
input  [12:0]      u_ddr4_0_top_c0_ddr4_s_axi_rid_i;
input              u_ddr4_0_top_c0_ddr4_s_axi_rvalid_i;
output             u_ddr4_0_top_c0_ddr4_s_axi_rready_o;
input  [255:0]     u_ddr4_0_top_c0_ddr4_s_axi_rdata_i;
input  [1:0]       u_ddr4_0_top_c0_ddr4_s_axi_rresp_i;
input              u_ddr4_0_top_c0_ddr4_s_axi_rlast_i;

output             u_NV_nvdla_top_pselX_o;
output             u_NV_nvdla_top_penable_o;
output             u_NV_nvdla_top_pwrite_o;
output [31:0]      u_NV_nvdla_top_paddr_o;
output [31:0]      u_NV_nvdla_top_pwdata_o;
input  [31:0]      u_NV_nvdla_top_prdata_i;
input              u_NV_nvdla_top_pready_i;
input              u_NV_nvdla_top_pslverr_i;

input  [3:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awid_i;
input              u_NV_nvdla_top_nvdla_core2dbb_aw_awvalid_i;
output             u_NV_nvdla_top_nvdla_core2dbb_aw_awready_o;
input  [64 -1:0]   u_NV_nvdla_top_nvdla_core2dbb_aw_awaddr_i;
input  [7:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awlen_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awsize_i;
input  [1:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awburst_i;
input              u_NV_nvdla_top_nvdla_core2dbb_aw_awlock_i;
input  [3:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awcache_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2dbb_aw_awprot_i;
input              u_NV_nvdla_top_nvdla_core2dbb_w_wvalid_i;
output             u_NV_nvdla_top_nvdla_core2dbb_w_wready_o;
input              u_NV_nvdla_top_nvdla_core2dbb_w_wlast_i;
input  [256-1:0]   u_NV_nvdla_top_nvdla_core2dbb_w_wdata_i;
input  [256/8-1:0] u_NV_nvdla_top_nvdla_core2dbb_w_wstrb_i;
output [3:0]       u_NV_nvdla_top_nvdla_core2dbb_b_bid_o;
output             u_NV_nvdla_top_nvdla_core2dbb_b_bvalid_o;
input              u_NV_nvdla_top_nvdla_core2dbb_b_bready_i;
output [1:0]       u_NV_nvdla_top_nvdla_core2dbb_b_bresp_o;
input  [3:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arid_i;
input              u_NV_nvdla_top_nvdla_core2dbb_ar_arvalid_i;
output             u_NV_nvdla_top_nvdla_core2dbb_ar_arready_o;
input  [64 -1:0]   u_NV_nvdla_top_nvdla_core2dbb_ar_araddr_i;
input  [7:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arlen_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arsize_i;
input  [1:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arburst_i;
input              u_NV_nvdla_top_nvdla_core2dbb_ar_arlock_i;
input  [3:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arcache_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2dbb_ar_arprot_i;
output [3:0]       u_NV_nvdla_top_nvdla_core2dbb_r_rid_o;
output             u_NV_nvdla_top_nvdla_core2dbb_r_rvalid_o;
input              u_NV_nvdla_top_nvdla_core2dbb_r_rready_i;
output [255:0]     u_NV_nvdla_top_nvdla_core2dbb_r_rdata_o;
output [1:0]       u_NV_nvdla_top_nvdla_core2dbb_r_rresp_o;
output             u_NV_nvdla_top_nvdla_core2dbb_r_rlast_o;

input  [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awid_i;
input              u_NV_nvdla_top_nvdla_core2cvsram_aw_awvalid_i;
output             u_NV_nvdla_top_nvdla_core2cvsram_aw_awready_o;
input  [63:0]      u_NV_nvdla_top_nvdla_core2cvsram_aw_awaddr_i;
input  [7:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awlen_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awsize_i;
input  [1:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awburst_i;
input              u_NV_nvdla_top_nvdla_core2cvsram_aw_awlock_i;
input  [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awcache_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2cvsram_aw_awprot_i;
input              u_NV_nvdla_top_nvdla_core2cvsram_w_wvalid_i;
output             u_NV_nvdla_top_nvdla_core2cvsram_w_wready_o;
input              u_NV_nvdla_top_nvdla_core2cvsram_w_wlast_i;
input  [255:0]     u_NV_nvdla_top_nvdla_core2cvsram_w_wdata_i;
input  [31:0]      u_NV_nvdla_top_nvdla_core2cvsram_w_wstrb_i;
output [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_b_bid_o;
output             u_NV_nvdla_top_nvdla_core2cvsram_b_bvalid_o;
input              u_NV_nvdla_top_nvdla_core2cvsram_b_bready_i;
output [1:0]       u_NV_nvdla_top_nvdla_core2cvsram_b_bresp_o;
input  [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arid_i;
input              u_NV_nvdla_top_nvdla_core2cvsram_ar_arvalid_i;
output             u_NV_nvdla_top_nvdla_core2cvsram_ar_arready_o;
input  [63:0]      u_NV_nvdla_top_nvdla_core2cvsram_ar_araddr_i;
input  [7:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arlen_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arsize_i;
input  [1:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arburst_i;
input              u_NV_nvdla_top_nvdla_core2cvsram_ar_arlock_i;
input  [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arcache_i;
input  [2:0]       u_NV_nvdla_top_nvdla_core2cvsram_ar_arprot_i;
output [3:0]       u_NV_nvdla_top_nvdla_core2cvsram_r_rid_o;
output             u_NV_nvdla_top_nvdla_core2cvsram_r_rvalid_o;
input              u_NV_nvdla_top_nvdla_core2cvsram_r_rready_i;
output [255:0]     u_NV_nvdla_top_nvdla_core2cvsram_r_rdata_o;
output [1:0]       u_NV_nvdla_top_nvdla_core2cvsram_r_rresp_o;
output             u_NV_nvdla_top_nvdla_core2cvsram_r_rlast_o;

output [10:0]      u_uncore_top_AWID_AXI_CORE_MST_o;
output             u_uncore_top_AWVALID_AXI_CORE_MST_o;
input              u_uncore_top_AWREADY_AXI_CORE_MST_i;
output [31:0]      u_uncore_top_AWADDR_AXI_CORE_MST_o;
output [7:0]       u_uncore_top_AWLEN_AXI_CORE_MST_o;
output [2:0]       u_uncore_top_AWSIZE_AXI_CORE_MST_o;
output [1:0]       u_uncore_top_AWBURST_AXI_CORE_MST_o;
output             u_uncore_top_AWLOCK_AXI_CORE_MST_o;
output [3:0]       u_uncore_top_AWCACHE_AXI_CORE_MST_o;
output [2:0]       u_uncore_top_AWPROT_AXI_CORE_MST_o;
output             u_uncore_top_WVALID_AXI_CORE_MST_o;
input              u_uncore_top_WREADY_AXI_CORE_MST_i;
output             u_uncore_top_WLAST_AXI_CORE_MST_o;
output [31:0]      u_uncore_top_WDATA_AXI_CORE_MST_o;
output [3:0]       u_uncore_top_WSTRB_AXI_CORE_MST_o;
input  [10:0]      u_uncore_top_BID_AXI_CORE_MST_i;
input              u_uncore_top_BVALID_AXI_CORE_MST_i;
output             u_uncore_top_BREADY_AXI_CORE_MST_o;
input  [1:0]       u_uncore_top_BRESP_AXI_CORE_MST_i;
output [10:0]      u_uncore_top_ARID_AXI_CORE_MST_o;
output             u_uncore_top_ARVALID_AXI_CORE_MST_o;
input              u_uncore_top_ARREADY_AXI_CORE_MST_i;
output [31:0]      u_uncore_top_ARADDR_AXI_CORE_MST_o;
output [7:0]       u_uncore_top_ARLEN_AXI_CORE_MST_o;
output [2:0]       u_uncore_top_ARSIZE_AXI_CORE_MST_o;
output [1:0]       u_uncore_top_ARBURST_AXI_CORE_MST_o;
output             u_uncore_top_ARLOCK_AXI_CORE_MST_o;
output [3:0]       u_uncore_top_ARCACHE_AXI_CORE_MST_o;
output [2:0]       u_uncore_top_ARPROT_AXI_CORE_MST_o;
input  [10:0]      u_uncore_top_RID_AXI_CORE_MST_i;
input              u_uncore_top_RVALID_AXI_CORE_MST_i;
output             u_uncore_top_RREADY_AXI_CORE_MST_o;
input  [31:0]      u_uncore_top_RDATA_AXI_CORE_MST_i;
input  [1:0]       u_uncore_top_RRESP_AXI_CORE_MST_i;
input              u_uncore_top_RLAST_AXI_CORE_MST_i;

input              u_uncore_top_timer0_int_cmp_i;
input              u_uncore_top_timer0_int_ovf_i;
input              u_uncore_top_timer1_int_cmp_i;
input              u_uncore_top_timer1_int_ovf_i;
input              u_uncore_top_sw_int0_i;
input              u_uncore_top_sw_int1_i;
input              u_uncore_top_scu_int_i;
input              u_uncore_top_uart_int_i;
input              u_NV_nvdla_top_nvdla_intr_i;


// input wires
wire        u_NV_nvdla_top_nvdla_intr_s;
wire        u_ddr4_0_top_c0_ddr4_ui_clk_s;
wire        u_uncore_top_c0_nic_ddr4_ui_clk_sync_rst_s;
wire        u_uncore_top_core_nic_rst_n_s;
wire        u_uncore_top_per_clk_s;
wire        u_uncore_top_riscv_clk_s;
wire        u_uncore_top_riscv_core_clk_s;
wire        u_uncore_top_riscv_debug_clk_s;
wire        u_uncore_top_riscv_debug_rst_s;
wire        u_uncore_top_riscv_rst_s;
wire        u_uncore_top_riscv_rtc_toggle_s;
wire        u_uncore_top_scu_int_s;
wire        u_uncore_top_sw_int0_s;
wire        u_uncore_top_sw_int1_s;
wire        u_uncore_top_timer0_int_ovf_s;
wire        u_uncore_top_timer0_int_cmp_s;
wire        u_uncore_top_timer1_int_ovf_s;
wire        u_uncore_top_timer1_int_cmp_s;
wire        u_uncore_top_uart_int_s;
wire        u_xdma_0_top_axi_aclk_s;
wire        u_xdma_0_top_pcie_nic_aresetn_s;
wire        u_xdma_0_top_axi_aresetn_s;


// output wires
wire [7:0]  u_xdma_0_top_m_axi_bid_s;
wire [7:0]  u_xdma_0_top_m_axi_rid_s;
wire [7:0]  u_NV_nvdla_top_nvdla_core2dbb_b_bid_s;
wire [7:0]  u_NV_nvdla_top_nvdla_core2dbb_r_rid_s;
wire [7:0]  u_NV_nvdla_top_nvdla_core2cvsram_b_bid_s;
wire [7:0]  u_NV_nvdla_top_nvdla_core2cvsram_r_rid_s;
wire [63:0] u_xdma_0_top_s_axil_awaddr_s;
wire [63:0] u_xdma_0_top_s_axil_araddr_s;
wire [10:0] u_ddr4_0_top_c0_ddr4_s_axi_awid_s;
wire [10:0] u_ddr4_0_top_c0_ddr4_s_axi_arid_s;
wire [63:0] u_NV_nvdla_top_paddr_s;
wire [63:0] u_uncore_top_AWADDR_AXI_CORE_MST_s;
wire [63:0] u_uncore_top_ARADDR_AXI_CORE_MST_s;
wire [10:0] u_uncore_top_AWID_AXI_CORE_MST_s;
wire [10:0] u_uncore_top_ARID_AXI_CORE_MST_s;


// internal wires
wire        u_misc_mac_int_out_s;
wire        u_misc_scu_int_out_s;
wire        u_misc_sw_int0_out_s;
wire        u_misc_sw_int1_out_s;
wire        u_misc_timer0_int_ovf_out_s;
wire        u_misc_timer0_int_cmp_out_s;
wire        u_misc_timer1_int_ovf_out_s;
wire        u_misc_timer1_int_cmp_out_s;
wire        u_misc_uart_int_out_s;
wire        jtag_trst_sync_rst_s;

// XDMA AXI Mster Interface -- 256bit
/*********************************************************************/
wire    [7 : 0]     xdma_axi_mst0_256_awid;
wire    [63 : 0]    xdma_axi_mst0_256_awaddr;
wire    [7 : 0]     xdma_axi_mst0_256_awlen;
wire    [2 : 0]     xdma_axi_mst0_256_awsize;
wire    [1 : 0]     xdma_axi_mst0_256_awburst;
wire    [0 : 0]     xdma_axi_mst0_256_awlock;
wire    [3 : 0]     xdma_axi_mst0_256_awcache;
wire    [2 : 0]     xdma_axi_mst0_256_awprot;
wire    [3 : 0]     xdma_axi_mst0_256_awregion;
wire    [3 : 0]     xdma_axi_mst0_256_awqos;
wire                xdma_axi_mst0_256_awuser;
wire                xdma_axi_mst0_256_awvalid;
wire                xdma_axi_mst0_256_awready;
wire    [255 : 0]   xdma_axi_mst0_256_wdata;
wire    [31 : 0]    xdma_axi_mst0_256_wstrb;
wire                xdma_axi_mst0_256_wlast;
wire                xdma_axi_mst0_256_wuser;
wire                xdma_axi_mst0_256_wvalid;
wire                xdma_axi_mst0_256_wready;
wire    [7 : 0]     xdma_axi_mst0_256_bid;
wire    [2 : 0]     xdma_axi_mst0_256_bid_nc;
wire    [1 : 0]     xdma_axi_mst0_256_bresp;
wire                xdma_axi_mst0_256_buser;
wire                xdma_axi_mst0_256_bvalid;
wire                xdma_axi_mst0_256_bready;
wire    [7 : 0]     xdma_axi_mst0_256_arid;
wire    [63 : 0]    xdma_axi_mst0_256_araddr;
wire    [7 : 0]     xdma_axi_mst0_256_arlen;
wire    [2 : 0]     xdma_axi_mst0_256_arsize;
wire    [1 : 0]     xdma_axi_mst0_256_arburst;
wire    [0 : 0]     xdma_axi_mst0_256_arlock;
wire    [3 : 0]     xdma_axi_mst0_256_arcache;
wire    [2 : 0]     xdma_axi_mst0_256_arprot;
wire    [3 : 0]     xdma_axi_mst0_256_arregion;
wire    [3 : 0]     xdma_axi_mst0_256_arqos;
wire                xdma_axi_mst0_256_aruser;
wire                xdma_axi_mst0_256_arvalid;
wire                xdma_axi_mst0_256_arready;
wire    [7 : 0]     xdma_axi_mst0_256_rid;
wire    [2 : 0]     xdma_axi_mst0_256_rid_nc;
wire    [255 : 0]   xdma_axi_mst0_256_rdata;
wire    [1 : 0]     xdma_axi_mst0_256_rresp;
wire                xdma_axi_mst0_256_rlast;
wire                xdma_axi_mst0_256_ruser;
wire                xdma_axi_mst0_256_rvalid;
wire                xdma_axi_mst0_256_rready;
/*********************************************************************/
// XDMA AXI Mster Interface -- 256bit
/*********************************************************************/
wire    [7 : 0]     xdma_axi_mst0_256_sync_awid;
wire    [2 : 0]     xdma_axi_mst0_256_sync_awid_nc;
wire    [63 : 0]    xdma_axi_mst0_256_sync_awaddr;
wire    [7 : 0]     xdma_axi_mst0_256_sync_awlen;
wire    [2 : 0]     xdma_axi_mst0_256_sync_awsize;
wire    [1 : 0]     xdma_axi_mst0_256_sync_awburst;
wire    [0 : 0]     xdma_axi_mst0_256_sync_awlock;
wire    [3 : 0]     xdma_axi_mst0_256_sync_awcache;
wire    [2 : 0]     xdma_axi_mst0_256_sync_awprot;
wire    [3 : 0]     xdma_axi_mst0_256_sync_awregion;
wire    [3 : 0]     xdma_axi_mst0_256_sync_awqos;
wire                xdma_axi_mst0_256_sync_awuser;
wire                xdma_axi_mst0_256_sync_awvalid;
wire                xdma_axi_mst0_256_sync_awready;
wire    [255 : 0]   xdma_axi_mst0_256_sync_wdata;
wire    [31 : 0]    xdma_axi_mst0_256_sync_wstrb;
wire                xdma_axi_mst0_256_sync_wlast;
wire                xdma_axi_mst0_256_sync_wuser;
wire                xdma_axi_mst0_256_sync_wvalid;
wire                xdma_axi_mst0_256_sync_wready;
wire    [7 : 0]     xdma_axi_mst0_256_sync_bid;
wire    [1 : 0]     xdma_axi_mst0_256_sync_bresp;
wire                xdma_axi_mst0_256_sync_buser;
wire                xdma_axi_mst0_256_sync_bvalid;
wire                xdma_axi_mst0_256_sync_bready;
wire    [7 : 0]     xdma_axi_mst0_256_sync_arid;
wire    [2 : 0]     xdma_axi_mst0_256_sync_arid_nc;
wire    [63 : 0]    xdma_axi_mst0_256_sync_araddr;
wire    [7 : 0]     xdma_axi_mst0_256_sync_arlen;
wire    [2 : 0]     xdma_axi_mst0_256_sync_arsize;
wire    [1 : 0]     xdma_axi_mst0_256_sync_arburst;
wire    [0 : 0]     xdma_axi_mst0_256_sync_arlock;
wire    [3 : 0]     xdma_axi_mst0_256_sync_arcache;
wire    [2 : 0]     xdma_axi_mst0_256_sync_arprot;
wire    [3 : 0]     xdma_axi_mst0_256_sync_arregion;
wire    [3 : 0]     xdma_axi_mst0_256_sync_arqos;
wire                xdma_axi_mst0_256_sync_aruser;
wire                xdma_axi_mst0_256_sync_arvalid;
wire                xdma_axi_mst0_256_sync_arready;
wire    [7 : 0]     xdma_axi_mst0_256_sync_rid;
wire    [255 : 0]   xdma_axi_mst0_256_sync_rdata;
wire    [1 : 0]     xdma_axi_mst0_256_sync_rresp;
wire                xdma_axi_mst0_256_sync_rlast;
wire                xdma_axi_mst0_256_sync_ruser;
wire                xdma_axi_mst0_256_sync_rvalid;
wire                xdma_axi_mst0_256_sync_rready;
/*********************************************************************/
// XDMA AXI Mster Interface -- 32bit
/*********************************************************************/
wire    [7 : 0]     xdma_axi_mst_32_awid;
wire    [63 : 0]    xdma_axi_mst_32_awaddr;
wire    [7 : 0]     xdma_axi_mst_32_awlen;
wire    [2 : 0]     xdma_axi_mst_32_awsize;
wire    [1 : 0]     xdma_axi_mst_32_awburst;
wire    [0 : 0]     xdma_axi_mst_32_awlock;
wire    [3 : 0]     xdma_axi_mst_32_awcache;
wire    [2 : 0]     xdma_axi_mst_32_awprot;
wire    [3 : 0]     xdma_axi_mst_32_awregion;
wire    [3 : 0]     xdma_axi_mst_32_awqos;
wire                xdma_axi_mst_32_awuser;
wire                xdma_axi_mst_32_awvalid;
wire                xdma_axi_mst_32_awready;
wire    [31 : 0]    xdma_axi_mst_32_wdata;
wire    [3 : 0]     xdma_axi_mst_32_wstrb;
wire                xdma_axi_mst_32_wlast;
wire                xdma_axi_mst_32_wuser;
wire                xdma_axi_mst_32_wvalid;
wire                xdma_axi_mst_32_wready;
wire    [7 : 0]     xdma_axi_mst_32_bid;
wire    [1 : 0]     xdma_axi_mst_32_bresp;
wire                xdma_axi_mst_32_buser;
wire                xdma_axi_mst_32_bvalid;
wire                xdma_axi_mst_32_bready;
wire    [7 : 0]     xdma_axi_mst_32_arid;
wire    [63 : 0]    xdma_axi_mst_32_araddr;
wire    [7 : 0]     xdma_axi_mst_32_arlen;
wire    [2 : 0]     xdma_axi_mst_32_arsize;
wire    [1 : 0]     xdma_axi_mst_32_arburst;
wire    [0 : 0]     xdma_axi_mst_32_arlock;
wire    [3 : 0]     xdma_axi_mst_32_arcache;
wire    [2 : 0]     xdma_axi_mst_32_arprot;
wire    [3 : 0]     xdma_axi_mst_32_arregion;
wire    [3 : 0]     xdma_axi_mst_32_arqos;
wire                xdma_axi_mst_32_aruser;
wire                xdma_axi_mst_32_arvalid;
wire                xdma_axi_mst_32_arready;
wire    [7 : 0]     xdma_axi_mst_32_rid;
wire    [31 : 0]    xdma_axi_mst_32_rdata;
wire    [1 : 0]     xdma_axi_mst_32_rresp;
wire                xdma_axi_mst_32_rlast;
wire                xdma_axi_mst_32_ruser;
wire                xdma_axi_mst_32_rvalid;
wire                xdma_axi_mst_32_rready;
/*********************************************************************/
// XDMA AXI Mster Interface -- 256bit
/*********************************************************************/
wire    [7 : 0]     xdma_axi_mst1_256_awid;
wire    [63 : 0]    xdma_axi_mst1_256_awaddr;
wire    [7 : 0]     xdma_axi_mst1_256_awlen;
wire    [2 : 0]     xdma_axi_mst1_256_awsize;
wire    [1 : 0]     xdma_axi_mst1_256_awburst;
wire    [0 : 0]     xdma_axi_mst1_256_awlock;
wire    [3 : 0]     xdma_axi_mst1_256_awcache;
wire    [2 : 0]     xdma_axi_mst1_256_awprot;
wire    [3 : 0]     xdma_axi_mst1_256_awregion;
wire    [3 : 0]     xdma_axi_mst1_256_awqos;
wire                xdma_axi_mst1_256_awuser;
wire                xdma_axi_mst1_256_awvalid;
wire                xdma_axi_mst1_256_awready;
wire    [255 : 0]   xdma_axi_mst1_256_wdata;
wire    [31 : 0]    xdma_axi_mst1_256_wstrb;
wire                xdma_axi_mst1_256_wlast;
wire                xdma_axi_mst1_256_wuser;
wire                xdma_axi_mst1_256_wvalid;
wire                xdma_axi_mst1_256_wready;
wire    [7 : 0]     xdma_axi_mst1_256_bid;
wire    [2 : 0]     xdma_axi_mst1_256_bid_nc;
wire    [1 : 0]     xdma_axi_mst1_256_bresp;
wire                xdma_axi_mst1_256_buser;
wire                xdma_axi_mst1_256_bvalid;
wire                xdma_axi_mst1_256_bready;
wire    [7 : 0]     xdma_axi_mst1_256_arid;
wire    [63 : 0]    xdma_axi_mst1_256_araddr;
wire    [7 : 0]     xdma_axi_mst1_256_arlen;
wire    [2 : 0]     xdma_axi_mst1_256_arsize;
wire    [1 : 0]     xdma_axi_mst1_256_arburst;
wire    [0 : 0]     xdma_axi_mst1_256_arlock;
wire    [3 : 0]     xdma_axi_mst1_256_arcache;
wire    [2 : 0]     xdma_axi_mst1_256_arprot;
wire    [3 : 0]     xdma_axi_mst1_256_arregion;
wire    [3 : 0]     xdma_axi_mst1_256_arqos;
wire                xdma_axi_mst1_256_aruser;
wire                xdma_axi_mst1_256_arvalid;
wire                xdma_axi_mst1_256_arready;
wire    [7 : 0]     xdma_axi_mst1_256_rid;
wire    [2 : 0]     xdma_axi_mst1_256_rid_nc;
wire    [255 : 0]   xdma_axi_mst1_256_rdata;
wire    [1 : 0]     xdma_axi_mst1_256_rresp;
wire                xdma_axi_mst1_256_rlast;
wire                xdma_axi_mst1_256_ruser;
wire                xdma_axi_mst1_256_rvalid;
wire                xdma_axi_mst1_256_rready;
/*********************************************************************/
// XDMA AXI Mster Interface -- 256bit
/*********************************************************************/
wire    [7 : 0]     xdma_axi_mst1_256_sync_awid;
wire    [2 : 0]     xdma_axi_mst1_256_sync_awid_nc;
wire    [63 : 0]    xdma_axi_mst1_256_sync_awaddr;
wire    [7 : 0]     xdma_axi_mst1_256_sync_awlen;
wire    [2 : 0]     xdma_axi_mst1_256_sync_awsize;
wire    [1 : 0]     xdma_axi_mst1_256_sync_awburst;
wire    [0 : 0]     xdma_axi_mst1_256_sync_awlock;
wire    [3 : 0]     xdma_axi_mst1_256_sync_awcache;
wire    [2 : 0]     xdma_axi_mst1_256_sync_awprot;
wire    [3 : 0]     xdma_axi_mst1_256_sync_awregion;
wire    [3 : 0]     xdma_axi_mst1_256_sync_awqos;
wire                xdma_axi_mst1_256_sync_awuser;
wire                xdma_axi_mst1_256_sync_awvalid;
wire                xdma_axi_mst1_256_sync_awready;
wire    [255 : 0]   xdma_axi_mst1_256_sync_wdata;
wire    [31 : 0]    xdma_axi_mst1_256_sync_wstrb;
wire                xdma_axi_mst1_256_sync_wlast;
wire                xdma_axi_mst1_256_sync_wuser;
wire                xdma_axi_mst1_256_sync_wvalid;
wire                xdma_axi_mst1_256_sync_wready;
wire    [7 : 0]     xdma_axi_mst1_256_sync_bid;
wire    [1 : 0]     xdma_axi_mst1_256_sync_bresp;
wire                xdma_axi_mst1_256_sync_buser;
wire                xdma_axi_mst1_256_sync_bvalid;
wire                xdma_axi_mst1_256_sync_bready;
wire    [7 : 0]     xdma_axi_mst1_256_sync_arid;
wire    [2 : 0]     xdma_axi_mst1_256_sync_arid_nc;
wire    [63 : 0]    xdma_axi_mst1_256_sync_araddr;
wire    [7 : 0]     xdma_axi_mst1_256_sync_arlen;
wire    [2 : 0]     xdma_axi_mst1_256_sync_arsize;
wire    [1 : 0]     xdma_axi_mst1_256_sync_arburst;
wire    [0 : 0]     xdma_axi_mst1_256_sync_arlock;
wire    [3 : 0]     xdma_axi_mst1_256_sync_arcache;
wire    [2 : 0]     xdma_axi_mst1_256_sync_arprot;
wire    [3 : 0]     xdma_axi_mst1_256_sync_arregion;
wire    [3 : 0]     xdma_axi_mst1_256_sync_arqos;
wire                xdma_axi_mst1_256_sync_aruser;
wire                xdma_axi_mst1_256_sync_arvalid;
wire                xdma_axi_mst1_256_sync_arready;
wire    [7 : 0]     xdma_axi_mst1_256_sync_rid;
wire    [255 : 0]   xdma_axi_mst1_256_sync_rdata;
wire    [1 : 0]     xdma_axi_mst1_256_sync_rresp;
wire                xdma_axi_mst1_256_sync_rlast;
wire                xdma_axi_mst1_256_sync_ruser;
wire                xdma_axi_mst1_256_sync_rvalid;
wire                xdma_axi_mst1_256_sync_rready;
/*********************************************************************/
// RISCV AXI Master Interface -- 32*NrLanes bit
/*********************************************************************/
wire    [4:0]                    riscv_axi_mst_awid;
wire    [64-1:0]                 riscv_axi_mst_awaddr;
wire    [7:0]                    riscv_axi_mst_awlen;
wire    [2:0]                    riscv_axi_mst_awsize;
wire    [1:0]                    riscv_axi_mst_awburst;
wire                             riscv_axi_mst_awlock;
wire    [3:0]                    riscv_axi_mst_awcache;
wire    [2:0]                    riscv_axi_mst_awprot;
wire    [3:0]                    riscv_axi_mst_awregion;
wire    [3:0]                    riscv_axi_mst_awqos;
wire                             riscv_axi_mst_awuser;//
wire                             riscv_axi_mst_awvalid;
wire                             riscv_axi_mst_awready;
wire    [32*RISCV_NRLANES-1:0]   riscv_axi_mst_wdata;
wire    [32*RISCV_NRLANES/8-1:0] riscv_axi_mst_wstrb;
wire                             riscv_axi_mst_wlast;
wire                             riscv_axi_mst_wuser;
wire                             riscv_axi_mst_wvalid;
wire                             riscv_axi_mst_wready;
wire    [4:0]                    riscv_axi_mst_bid;
wire    [2:0]                    riscv_axi_mst_bid_nc;
wire    [1:0]                    riscv_axi_mst_bresp;
wire                             riscv_axi_mst_buser;
wire                             riscv_axi_mst_bvalid;
wire                             riscv_axi_mst_bready;
wire    [4:0]                    riscv_axi_mst_arid;
wire    [64-1:0]                 riscv_axi_mst_araddr;
wire    [7:0]                    riscv_axi_mst_arlen;
wire    [2:0]                    riscv_axi_mst_arsize;
wire    [1:0]                    riscv_axi_mst_arburst;
wire                             riscv_axi_mst_arlock;
wire    [3:0]                    riscv_axi_mst_arcache;
wire    [2:0]                    riscv_axi_mst_arprot;
wire    [3:0]                    riscv_axi_mst_arregion;
wire    [3:0]                    riscv_axi_mst_arqos;
wire                             riscv_axi_mst_aruser;
wire                             riscv_axi_mst_arvalid;
wire                             riscv_axi_mst_arready;
wire    [4:0]                    riscv_axi_mst_rid;
wire    [2:0]                    riscv_axi_mst_rid_nc;
wire    [32*RISCV_NRLANES-1:0]   riscv_axi_mst_rdata;
wire    [1:0]                    riscv_axi_mst_rresp;
wire                             riscv_axi_mst_rlast;
wire                             riscv_axi_mst_ruser;
wire                             riscv_axi_mst_rvalid;
wire                             riscv_axi_mst_rready;
/*********************************************************************/
// RISCV AXI Master Interface -- 256bit
/*********************************************************************/
wire    [7 : 0]     riscv_axi_mst_256_awid;
wire    [63 : 0]    riscv_axi_mst_256_awaddr;
wire    [7 : 0]     riscv_axi_mst_256_awlen;
wire    [2 : 0]     riscv_axi_mst_256_awsize;
wire    [1 : 0]     riscv_axi_mst_256_awburst;
wire    [0 : 0]     riscv_axi_mst_256_awlock;
wire    [3 : 0]     riscv_axi_mst_256_awcache;
wire    [2 : 0]     riscv_axi_mst_256_awprot;
wire    [3 : 0]     riscv_axi_mst_256_awregion;
wire    [3 : 0]     riscv_axi_mst_256_awqos;
wire                riscv_axi_mst_256_awuser;
wire                riscv_axi_mst_256_awvalid;
wire                riscv_axi_mst_256_awready;
wire    [255 : 0]   riscv_axi_mst_256_wdata;
wire    [31 : 0]    riscv_axi_mst_256_wstrb;
wire                riscv_axi_mst_256_wlast;
wire                riscv_axi_mst_256_wuser;
wire                riscv_axi_mst_256_wvalid;
wire                riscv_axi_mst_256_wready;
wire    [7 : 0]     riscv_axi_mst_256_bid;
wire    [1 : 0]     riscv_axi_mst_256_bresp;
wire                riscv_axi_mst_256_buser;
wire                riscv_axi_mst_256_bvalid;
wire                riscv_axi_mst_256_bready;
wire    [7 : 0]     riscv_axi_mst_256_arid;
wire    [63 : 0]    riscv_axi_mst_256_araddr;
wire    [7 : 0]     riscv_axi_mst_256_arlen;
wire    [2 : 0]     riscv_axi_mst_256_arsize;
wire    [1 : 0]     riscv_axi_mst_256_arburst;
wire    [0 : 0]     riscv_axi_mst_256_arlock;
wire    [3 : 0]     riscv_axi_mst_256_arcache;
wire    [2 : 0]     riscv_axi_mst_256_arprot;
wire    [3 : 0]     riscv_axi_mst_256_arregion;
wire    [3 : 0]     riscv_axi_mst_256_arqos;
wire                riscv_axi_mst_256_aruser;
wire                riscv_axi_mst_256_arvalid;
wire                riscv_axi_mst_256_arready;
wire    [7 : 0]     riscv_axi_mst_256_rid;
wire    [255 : 0]   riscv_axi_mst_256_rdata;
wire    [1 : 0]     riscv_axi_mst_256_rresp;
wire                riscv_axi_mst_256_rlast;
wire                riscv_axi_mst_256_ruser;
wire                riscv_axi_mst_256_rvalid;
wire                riscv_axi_mst_256_rready;
/*********************************************************************/
// PCIE-CFG AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   pciecfg_axi_slv_256_awid;
wire    [64-1:0]    pciecfg_axi_slv_256_awaddr;
wire    [7:0]       pciecfg_axi_slv_256_awlen;
wire    [2:0]       pciecfg_axi_slv_256_awsize;
wire    [1:0]       pciecfg_axi_slv_256_awburst;
wire                pciecfg_axi_slv_256_awlock;
wire    [3:0]       pciecfg_axi_slv_256_awcache;
wire    [2:0]       pciecfg_axi_slv_256_awprot;
wire    [3:0]       pciecfg_axi_slv_256_awregion;
wire    [3:0]       pciecfg_axi_slv_256_awqos;
wire                pciecfg_axi_slv_256_awuser;
wire                pciecfg_axi_slv_256_awvalid;
wire                pciecfg_axi_slv_256_awready;
wire    [256-1:0]   pciecfg_axi_slv_256_wdata;
wire    [256/8-1:0] pciecfg_axi_slv_256_wstrb;
wire                pciecfg_axi_slv_256_wlast;
wire                pciecfg_axi_slv_256_wuser;
wire                pciecfg_axi_slv_256_wvalid;
wire                pciecfg_axi_slv_256_wready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_bid;
wire    [1:0]       pciecfg_axi_slv_256_bresp;
wire                pciecfg_axi_slv_256_buser;
wire                pciecfg_axi_slv_256_bvalid;
wire                pciecfg_axi_slv_256_bready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_arid;
wire    [64-1:0]    pciecfg_axi_slv_256_araddr;
wire    [7:0]       pciecfg_axi_slv_256_arlen;
wire    [2:0]       pciecfg_axi_slv_256_arsize;
wire    [1:0]       pciecfg_axi_slv_256_arburst;
wire                pciecfg_axi_slv_256_arlock;
wire    [3:0]       pciecfg_axi_slv_256_arcache;
wire    [2:0]       pciecfg_axi_slv_256_arprot;
wire    [3:0]       pciecfg_axi_slv_256_arregion;
wire    [3:0]       pciecfg_axi_slv_256_arqos;
wire                pciecfg_axi_slv_256_aruser;
wire                pciecfg_axi_slv_256_arvalid;
wire                pciecfg_axi_slv_256_arready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_rid;
wire    [256-1:0]   pciecfg_axi_slv_256_rdata;
wire    [1:0]       pciecfg_axi_slv_256_rresp;
wire                pciecfg_axi_slv_256_rlast;
wire                pciecfg_axi_slv_256_ruser;
wire                pciecfg_axi_slv_256_rvalid;
wire                pciecfg_axi_slv_256_rready; 
/*********************************************************************/
// DDR-CTRL AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   ddr_axi_slv_256_awid;
wire    [64-1:0]    ddr_axi_slv_256_awaddr;
wire    [7:0]       ddr_axi_slv_256_awlen;
wire    [2:0]       ddr_axi_slv_256_awsize;
wire    [1:0]       ddr_axi_slv_256_awburst;
wire                ddr_axi_slv_256_awlock;
wire    [3:0]       ddr_axi_slv_256_awcache;
wire    [2:0]       ddr_axi_slv_256_awprot;
wire    [3:0]       ddr_axi_slv_256_awregion;
wire    [3:0]       ddr_axi_slv_256_awqos;
wire                ddr_axi_slv_256_awuser;
wire                ddr_axi_slv_256_awvalid;
wire                ddr_axi_slv_256_awready;
wire    [256-1:0]   ddr_axi_slv_256_wdata;
wire    [256/8-1:0] ddr_axi_slv_256_wstrb;
wire                ddr_axi_slv_256_wlast;
wire                ddr_axi_slv_256_wuser;
wire                ddr_axi_slv_256_wvalid;
wire                ddr_axi_slv_256_wready;
wire    [8+3-1:0]   ddr_axi_slv_256_bid;
wire    [1:0]       ddr_axi_slv_256_bresp;
wire                ddr_axi_slv_256_buser;
wire                ddr_axi_slv_256_bvalid;
wire                ddr_axi_slv_256_bready;
wire    [8+3-1:0]   ddr_axi_slv_256_arid;
wire    [64-1:0]    ddr_axi_slv_256_araddr;
wire    [7:0]       ddr_axi_slv_256_arlen;
wire    [2:0]       ddr_axi_slv_256_arsize;
wire    [1:0]       ddr_axi_slv_256_arburst;
wire                ddr_axi_slv_256_arlock;
wire    [3:0]       ddr_axi_slv_256_arcache;
wire    [2:0]       ddr_axi_slv_256_arprot;
wire    [3:0]       ddr_axi_slv_256_arregion;
wire    [3:0]       ddr_axi_slv_256_arqos;
wire                ddr_axi_slv_256_aruser;
wire                ddr_axi_slv_256_arvalid;
wire                ddr_axi_slv_256_arready;
wire    [8+3-1:0]   ddr_axi_slv_256_rid;
wire    [256-1:0]   ddr_axi_slv_256_rdata;
wire    [1:0]       ddr_axi_slv_256_rresp;
wire                ddr_axi_slv_256_rlast;
wire                ddr_axi_slv_256_ruser;
wire                ddr_axi_slv_256_rvalid;
wire                ddr_axi_slv_256_rready; 
/*********************************************************************/
// LMU RAM AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   ram_axi_slv_256_awid;
wire    [64-1:0]    ram_axi_slv_256_awaddr;
wire    [7:0]       ram_axi_slv_256_awlen;
wire    [2:0]       ram_axi_slv_256_awsize;
wire    [1:0]       ram_axi_slv_256_awburst;
wire                ram_axi_slv_256_awlock;
wire    [3:0]       ram_axi_slv_256_awcache;
wire    [2:0]       ram_axi_slv_256_awprot;
wire    [3:0]       ram_axi_slv_256_awregion;
wire    [3:0]       ram_axi_slv_256_awqos;
wire                ram_axi_slv_256_awuser;
wire                ram_axi_slv_256_awvalid;
wire                ram_axi_slv_256_awready;
wire    [256-1:0]   ram_axi_slv_256_wdata;
wire    [256/8-1:0] ram_axi_slv_256_wstrb;
wire                ram_axi_slv_256_wlast;
wire                ram_axi_slv_256_wuser;
wire                ram_axi_slv_256_wvalid;
wire                ram_axi_slv_256_wready;
wire    [8+3-1:0]   ram_axi_slv_256_bid;
wire    [1:0]       ram_axi_slv_256_bresp;
wire                ram_axi_slv_256_buser;
wire                ram_axi_slv_256_bvalid;
wire                ram_axi_slv_256_bready;
wire    [8+3-1:0]   ram_axi_slv_256_arid;
wire    [64-1:0]    ram_axi_slv_256_araddr;
wire    [7:0]       ram_axi_slv_256_arlen;
wire    [2:0]       ram_axi_slv_256_arsize;
wire    [1:0]       ram_axi_slv_256_arburst;
wire                ram_axi_slv_256_arlock;
wire    [3:0]       ram_axi_slv_256_arcache;
wire    [2:0]       ram_axi_slv_256_arprot;
wire    [3:0]       ram_axi_slv_256_arregion;
wire    [3:0]       ram_axi_slv_256_arqos;
wire                ram_axi_slv_256_aruser;
wire                ram_axi_slv_256_arvalid;
wire                ram_axi_slv_256_arready;
wire    [8+3-1:0]   ram_axi_slv_256_rid;
wire    [256-1:0]   ram_axi_slv_256_rdata;
wire    [1:0]       ram_axi_slv_256_rresp;
wire                ram_axi_slv_256_rlast;
wire                ram_axi_slv_256_ruser;
wire                ram_axi_slv_256_rvalid;
wire                ram_axi_slv_256_rready; 
/*********************************************************************/
// MAC-CFG AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   maccfg_axi_slv_256_awid;
wire    [64-1:0]    maccfg_axi_slv_256_awaddr;
wire    [7:0]       maccfg_axi_slv_256_awlen;
wire    [2:0]       maccfg_axi_slv_256_awsize;
wire    [1:0]       maccfg_axi_slv_256_awburst;
wire                maccfg_axi_slv_256_awlock;
wire    [3:0]       maccfg_axi_slv_256_awcache;
wire    [2:0]       maccfg_axi_slv_256_awprot;
wire    [3:0]       maccfg_axi_slv_256_awregion;
wire    [3:0]       maccfg_axi_slv_256_awqos;
wire                maccfg_axi_slv_256_awuser;
wire                maccfg_axi_slv_256_awvalid;
wire                maccfg_axi_slv_256_awready;
wire    [256-1:0]   maccfg_axi_slv_256_wdata;
wire    [256/8-1:0] maccfg_axi_slv_256_wstrb;
wire                maccfg_axi_slv_256_wlast;
wire                maccfg_axi_slv_256_wuser;
wire                maccfg_axi_slv_256_wvalid;
wire                maccfg_axi_slv_256_wready;
wire    [8+3-1:0]   maccfg_axi_slv_256_bid;
wire    [1:0]       maccfg_axi_slv_256_bresp;
wire                maccfg_axi_slv_256_buser;
wire                maccfg_axi_slv_256_bvalid;
wire                maccfg_axi_slv_256_bready;
wire    [8+3-1:0]   maccfg_axi_slv_256_arid;
wire    [64-1:0]    maccfg_axi_slv_256_araddr;
wire    [7:0]       maccfg_axi_slv_256_arlen;
wire    [2:0]       maccfg_axi_slv_256_arsize;
wire    [1:0]       maccfg_axi_slv_256_arburst;
wire                maccfg_axi_slv_256_arlock;
wire    [3:0]       maccfg_axi_slv_256_arcache;
wire    [2:0]       maccfg_axi_slv_256_arprot;
wire    [3:0]       maccfg_axi_slv_256_arregion;
wire    [3:0]       maccfg_axi_slv_256_arqos;
wire                maccfg_axi_slv_256_aruser;
wire                maccfg_axi_slv_256_arvalid;
wire                maccfg_axi_slv_256_arready;
wire    [8+3-1:0]   maccfg_axi_slv_256_rid;
wire    [256-1:0]   maccfg_axi_slv_256_rdata;
wire    [1:0]       maccfg_axi_slv_256_rresp;
wire                maccfg_axi_slv_256_rlast;
wire                maccfg_axi_slv_256_ruser;
wire                maccfg_axi_slv_256_rvalid;
wire                maccfg_axi_slv_256_rready; 
/*********************************************************************/
// clint AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   clint_axi_slv_256_awid;
wire    [64-1:0]    clint_axi_slv_256_awaddr;
wire    [7:0]       clint_axi_slv_256_awlen;
wire    [2:0]       clint_axi_slv_256_awsize;
wire    [1:0]       clint_axi_slv_256_awburst;
wire                clint_axi_slv_256_awlock;
wire    [3:0]       clint_axi_slv_256_awcache;
wire    [2:0]       clint_axi_slv_256_awprot;
wire    [3:0]       clint_axi_slv_256_awregion;
wire    [3:0]       clint_axi_slv_256_awqos;
wire                clint_axi_slv_256_awuser;
wire                clint_axi_slv_256_awvalid;
wire                clint_axi_slv_256_awready;
wire    [256-1:0]   clint_axi_slv_256_wdata;
wire    [256/8-1:0] clint_axi_slv_256_wstrb;
wire                clint_axi_slv_256_wlast;
wire                clint_axi_slv_256_wuser;
wire                clint_axi_slv_256_wvalid;
wire                clint_axi_slv_256_wready;
wire    [8+3-1:0]   clint_axi_slv_256_bid;
wire    [1:0]       clint_axi_slv_256_bresp;
wire                clint_axi_slv_256_buser;
wire                clint_axi_slv_256_bvalid;
wire                clint_axi_slv_256_bready;
wire    [8+3-1:0]   clint_axi_slv_256_arid;
wire    [64-1:0]    clint_axi_slv_256_araddr;
wire    [7:0]       clint_axi_slv_256_arlen;
wire    [2:0]       clint_axi_slv_256_arsize;
wire    [1:0]       clint_axi_slv_256_arburst;
wire                clint_axi_slv_256_arlock;
wire    [3:0]       clint_axi_slv_256_arcache;
wire    [2:0]       clint_axi_slv_256_arprot;
wire    [3:0]       clint_axi_slv_256_arregion;
wire    [3:0]       clint_axi_slv_256_arqos;
wire                clint_axi_slv_256_aruser;
wire                clint_axi_slv_256_arvalid;
wire                clint_axi_slv_256_arready;
wire    [8+3-1:0]   clint_axi_slv_256_rid;
wire    [256-1:0]   clint_axi_slv_256_rdata;
wire    [1:0]       clint_axi_slv_256_rresp;
wire                clint_axi_slv_256_rlast;
wire                clint_axi_slv_256_ruser;
wire                clint_axi_slv_256_rvalid;
wire                clint_axi_slv_256_rready; 
/*********************************************************************/
// clint AXI Slave Interface -- 64bit
/*********************************************************************/
wire    [8+3-1:0]   clint_axi_slv_64_awid;
wire    [64-1:0]    clint_axi_slv_64_awaddr;
wire    [7:0]       clint_axi_slv_64_awlen;
wire    [2:0]       clint_axi_slv_64_awsize;
wire    [1:0]       clint_axi_slv_64_awburst;
wire                clint_axi_slv_64_awlock;
wire    [3:0]       clint_axi_slv_64_awcache;
wire    [2:0]       clint_axi_slv_64_awprot;
wire    [3:0]       clint_axi_slv_64_awregion;
wire    [3:0]       clint_axi_slv_64_awqos;
wire                clint_axi_slv_64_awuser;
wire                clint_axi_slv_64_awvalid;
wire                clint_axi_slv_64_awready;
wire    [64-1:0]    clint_axi_slv_64_wdata;
wire    [64/8-1:0]  clint_axi_slv_64_wstrb;
wire                clint_axi_slv_64_wlast;
wire                clint_axi_slv_64_wuser;
wire                clint_axi_slv_64_wvalid;
wire                clint_axi_slv_64_wready;
//wire    [8+3-1:0]   clint_axi_slv_64_bid;
wire    [1:0]       clint_axi_slv_64_bresp;
wire                clint_axi_slv_64_buser;
wire                clint_axi_slv_64_bvalid;
wire                clint_axi_slv_64_bready;
wire    [8+3-1:0]   clint_axi_slv_64_arid;
wire    [64-1:0]    clint_axi_slv_64_araddr;
wire    [7:0]       clint_axi_slv_64_arlen;
wire    [2:0]       clint_axi_slv_64_arsize;
wire    [1:0]       clint_axi_slv_64_arburst;
wire                clint_axi_slv_64_arlock;
wire    [3:0]       clint_axi_slv_64_arcache;
wire    [2:0]       clint_axi_slv_64_arprot;
wire    [3:0]       clint_axi_slv_64_arregion;
wire    [3:0]       clint_axi_slv_64_arqos;
wire                clint_axi_slv_64_aruser;
wire                clint_axi_slv_64_arvalid;
wire                clint_axi_slv_64_arready;
//wire    [8+3-1:0]   clint_axi_slv_64_rid;
wire    [64-1:0]    clint_axi_slv_64_rdata;
wire    [1:0]       clint_axi_slv_64_rresp;
wire                clint_axi_slv_64_rlast;
wire                clint_axi_slv_64_ruser;
wire                clint_axi_slv_64_rvalid;
wire                clint_axi_slv_64_rready; 
/*********************************************************************/
// plic AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   plic_axi_slv_256_awid;
wire    [64-1:0]    plic_axi_slv_256_awaddr;
wire    [7:0]       plic_axi_slv_256_awlen;
wire    [2:0]       plic_axi_slv_256_awsize;
wire    [1:0]       plic_axi_slv_256_awburst;
wire                plic_axi_slv_256_awlock;
wire    [3:0]       plic_axi_slv_256_awcache;
wire    [2:0]       plic_axi_slv_256_awprot;
wire    [3:0]       plic_axi_slv_256_awregion;
wire    [3:0]       plic_axi_slv_256_awqos;
wire                plic_axi_slv_256_awuser;
wire                plic_axi_slv_256_awvalid;
wire                plic_axi_slv_256_awready;
wire    [256-1:0]   plic_axi_slv_256_wdata;
wire    [256/8-1:0] plic_axi_slv_256_wstrb;
wire                plic_axi_slv_256_wlast;
wire                plic_axi_slv_256_wuser;
wire                plic_axi_slv_256_wvalid;
wire                plic_axi_slv_256_wready;
wire    [8+3-1:0]   plic_axi_slv_256_bid;
wire    [1:0]       plic_axi_slv_256_bresp;
wire                plic_axi_slv_256_buser;
wire                plic_axi_slv_256_bvalid;
wire                plic_axi_slv_256_bready;
wire    [8+3-1:0]   plic_axi_slv_256_arid;
wire    [64-1:0]    plic_axi_slv_256_araddr;
wire    [7:0]       plic_axi_slv_256_arlen;
wire    [2:0]       plic_axi_slv_256_arsize;
wire    [1:0]       plic_axi_slv_256_arburst;
wire                plic_axi_slv_256_arlock;
wire    [3:0]       plic_axi_slv_256_arcache;
wire    [2:0]       plic_axi_slv_256_arprot;
wire    [3:0]       plic_axi_slv_256_arregion;
wire    [3:0]       plic_axi_slv_256_arqos;
wire                plic_axi_slv_256_aruser;
wire                plic_axi_slv_256_arvalid;
wire                plic_axi_slv_256_arready;
wire    [8+3-1:0]   plic_axi_slv_256_rid;
wire    [256-1:0]   plic_axi_slv_256_rdata;
wire    [1:0]       plic_axi_slv_256_rresp;
wire                plic_axi_slv_256_rlast;
wire                plic_axi_slv_256_ruser;
wire                plic_axi_slv_256_rvalid;
wire                plic_axi_slv_256_rready; 
/*********************************************************************/
// plic AXI Slave Interface -- 64bit
/*********************************************************************/
wire    [8+3-1:0]   plic_axi_slv_64_awid;
wire    [64-1:0]    plic_axi_slv_64_awaddr;
wire    [7:0]       plic_axi_slv_64_awlen;
wire    [2:0]       plic_axi_slv_64_awsize;
wire    [1:0]       plic_axi_slv_64_awburst;
wire                plic_axi_slv_64_awlock;
wire    [3:0]       plic_axi_slv_64_awcache;
wire    [2:0]       plic_axi_slv_64_awprot;
wire    [3:0]       plic_axi_slv_64_awregion;
wire    [3:0]       plic_axi_slv_64_awqos;
wire                plic_axi_slv_64_awuser;
wire                plic_axi_slv_64_awvalid;
wire                plic_axi_slv_64_awready;
wire    [64-1:0]    plic_axi_slv_64_wdata;
wire    [64/8-1:0]  plic_axi_slv_64_wstrb;
wire                plic_axi_slv_64_wlast;
wire                plic_axi_slv_64_wuser;
wire                plic_axi_slv_64_wvalid;
wire                plic_axi_slv_64_wready;
//wire    [8+3-1:0]   plic_axi_slv_64_bid;
wire    [1:0]       plic_axi_slv_64_bresp;
wire                plic_axi_slv_64_buser;
wire                plic_axi_slv_64_bvalid;
wire                plic_axi_slv_64_bready;
wire    [8+3-1:0]   plic_axi_slv_64_arid;
wire    [64-1:0]    plic_axi_slv_64_araddr;
wire    [7:0]       plic_axi_slv_64_arlen;
wire    [2:0]       plic_axi_slv_64_arsize;
wire    [1:0]       plic_axi_slv_64_arburst;
wire                plic_axi_slv_64_arlock;
wire    [3:0]       plic_axi_slv_64_arcache;
wire    [2:0]       plic_axi_slv_64_arprot;
wire    [3:0]       plic_axi_slv_64_arregion;
wire    [3:0]       plic_axi_slv_64_arqos;
wire                plic_axi_slv_64_aruser;
wire                plic_axi_slv_64_arvalid;
wire                plic_axi_slv_64_arready;
//wire    [8+3-1:0]   plic_axi_slv_64_rid;
wire    [64-1:0]    plic_axi_slv_64_rdata;
wire    [1:0]       plic_axi_slv_64_rresp;
wire                plic_axi_slv_64_rlast;
wire                plic_axi_slv_64_ruser;
wire                plic_axi_slv_64_rvalid;
wire                plic_axi_slv_64_rready; 
/*********************************************************************/
// UNCORE AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   uncore_axi_slv_256_awid;
wire    [64-1:0]    uncore_axi_slv_256_awaddr;
wire    [7:0]       uncore_axi_slv_256_awlen;
wire    [2:0]       uncore_axi_slv_256_awsize;
wire    [1:0]       uncore_axi_slv_256_awburst;
wire                uncore_axi_slv_256_awlock;
wire    [3:0]       uncore_axi_slv_256_awcache;
wire    [2:0]       uncore_axi_slv_256_awprot;
wire    [3:0]       uncore_axi_slv_256_awregion;
wire    [3:0]       uncore_axi_slv_256_awqos;
wire                uncore_axi_slv_256_awuser;
wire                uncore_axi_slv_256_awvalid;
wire                uncore_axi_slv_256_awready;
wire    [256-1:0]   uncore_axi_slv_256_wdata;
wire    [256/8-1:0] uncore_axi_slv_256_wstrb;
wire                uncore_axi_slv_256_wlast;
wire                uncore_axi_slv_256_wuser;
wire                uncore_axi_slv_256_wvalid;
wire                uncore_axi_slv_256_wready;
wire    [8+3-1:0]   uncore_axi_slv_256_bid;
wire    [1:0]       uncore_axi_slv_256_bresp;
wire                uncore_axi_slv_256_buser;
wire                uncore_axi_slv_256_bvalid;
wire                uncore_axi_slv_256_bready;
wire    [8+3-1:0]   uncore_axi_slv_256_arid;
wire    [64-1:0]    uncore_axi_slv_256_araddr;
wire    [7:0]       uncore_axi_slv_256_arlen;
wire    [2:0]       uncore_axi_slv_256_arsize;
wire    [1:0]       uncore_axi_slv_256_arburst;
wire                uncore_axi_slv_256_arlock;
wire    [3:0]       uncore_axi_slv_256_arcache;
wire    [2:0]       uncore_axi_slv_256_arprot;
wire    [3:0]       uncore_axi_slv_256_arregion;
wire    [3:0]       uncore_axi_slv_256_arqos;
wire                uncore_axi_slv_256_aruser;
wire                uncore_axi_slv_256_arvalid;
wire                uncore_axi_slv_256_arready;
wire    [8+3-1:0]   uncore_axi_slv_256_rid;
wire    [256-1:0]   uncore_axi_slv_256_rdata;
wire    [1:0]       uncore_axi_slv_256_rresp;
wire                uncore_axi_slv_256_rlast;
wire                uncore_axi_slv_256_ruser;
wire                uncore_axi_slv_256_rvalid;
wire                uncore_axi_slv_256_rready; 
/*********************************************************************/
// PCIE-CFG AXI Slave Interface -- 256bit
/*********************************************************************/
wire    [8+3-1:0]   pciecfg_axi_slv_256_sync_awid;
wire    [64-1:0]    pciecfg_axi_slv_256_sync_awaddr;
wire    [7:0]       pciecfg_axi_slv_256_sync_awlen;
wire    [2:0]       pciecfg_axi_slv_256_sync_awsize;
wire    [1:0]       pciecfg_axi_slv_256_sync_awburst;
wire                pciecfg_axi_slv_256_sync_awlock;
wire    [3:0]       pciecfg_axi_slv_256_sync_awcache;
wire    [2:0]       pciecfg_axi_slv_256_sync_awprot;
wire    [3:0]       pciecfg_axi_slv_256_sync_awregion;
wire    [3:0]       pciecfg_axi_slv_256_sync_awqos;
wire                pciecfg_axi_slv_256_sync_awuser;
wire                pciecfg_axi_slv_256_sync_awvalid;
wire                pciecfg_axi_slv_256_sync_awready;
wire    [256-1:0]   pciecfg_axi_slv_256_sync_wdata;
wire    [256/8-1:0] pciecfg_axi_slv_256_sync_wstrb;
wire                pciecfg_axi_slv_256_sync_wlast;
wire                pciecfg_axi_slv_256_sync_wuser;
wire                pciecfg_axi_slv_256_sync_wvalid;
wire                pciecfg_axi_slv_256_sync_wready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_sync_bid;
wire    [1:0]       pciecfg_axi_slv_256_sync_bresp;
wire                pciecfg_axi_slv_256_sync_buser;
wire                pciecfg_axi_slv_256_sync_bvalid;
wire                pciecfg_axi_slv_256_sync_bready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_sync_arid;
wire    [64-1:0]    pciecfg_axi_slv_256_sync_araddr;
wire    [7:0]       pciecfg_axi_slv_256_sync_arlen;
wire    [2:0]       pciecfg_axi_slv_256_sync_arsize;
wire    [1:0]       pciecfg_axi_slv_256_sync_arburst;
wire                pciecfg_axi_slv_256_sync_arlock;
wire    [3:0]       pciecfg_axi_slv_256_sync_arcache;
wire    [2:0]       pciecfg_axi_slv_256_sync_arprot;
wire    [3:0]       pciecfg_axi_slv_256_sync_arregion;
wire    [3:0]       pciecfg_axi_slv_256_sync_arqos;
wire                pciecfg_axi_slv_256_sync_aruser;
wire                pciecfg_axi_slv_256_sync_arvalid;
wire                pciecfg_axi_slv_256_sync_arready;
wire    [8+3-1:0]   pciecfg_axi_slv_256_sync_rid;
wire    [256-1:0]   pciecfg_axi_slv_256_sync_rdata;
wire    [1:0]       pciecfg_axi_slv_256_sync_rresp;
wire                pciecfg_axi_slv_256_sync_rlast;
wire                pciecfg_axi_slv_256_sync_ruser;
wire                pciecfg_axi_slv_256_sync_rvalid;
wire                pciecfg_axi_slv_256_sync_rready; 
/*********************************************************************/
// PCIE-CFG AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [10 : 0]    pciecfg_axi_slv_32_awid;
wire    [63 : 0]    pciecfg_axi_slv_32_awaddr;
wire    [7 : 0]     pciecfg_axi_slv_32_awlen;
wire    [2 : 0]     pciecfg_axi_slv_32_awsize;
wire    [1 : 0]     pciecfg_axi_slv_32_awburst;
wire    [0 : 0]     pciecfg_axi_slv_32_awlock;
wire    [3 : 0]     pciecfg_axi_slv_32_awcache;
wire    [2 : 0]     pciecfg_axi_slv_32_awprot;
wire    [3 : 0]     pciecfg_axi_slv_32_awregion;
wire    [3 : 0]     pciecfg_axi_slv_32_awqos;
wire                pciecfg_axi_slv_32_awuser;
wire                pciecfg_axi_slv_32_awvalid;
wire                pciecfg_axi_slv_32_awready;
wire    [31 : 0]    pciecfg_axi_slv_32_wdata;
wire    [3 : 0]     pciecfg_axi_slv_32_wstrb;
wire                pciecfg_axi_slv_32_wlast;
wire                pciecfg_axi_slv_32_wuser;
wire                pciecfg_axi_slv_32_wvalid;
wire                pciecfg_axi_slv_32_wready;
wire    [10 : 0]    pciecfg_axi_slv_32_bid;
wire    [1 : 0]     pciecfg_axi_slv_32_bresp;
wire                pciecfg_axi_slv_32_buser;
wire                pciecfg_axi_slv_32_bvalid;
wire                pciecfg_axi_slv_32_bready;
wire    [10 : 0]    pciecfg_axi_slv_32_arid;
wire    [63 : 0]    pciecfg_axi_slv_32_araddr;
wire    [7 : 0]     pciecfg_axi_slv_32_arlen;
wire    [2 : 0]     pciecfg_axi_slv_32_arsize;
wire    [1 : 0]     pciecfg_axi_slv_32_arburst;
wire    [0 : 0]     pciecfg_axi_slv_32_arlock;
wire    [3 : 0]     pciecfg_axi_slv_32_arcache;
wire    [2 : 0]     pciecfg_axi_slv_32_arprot;
wire    [3 : 0]     pciecfg_axi_slv_32_arregion;
wire    [3 : 0]     pciecfg_axi_slv_32_arqos;
wire                pciecfg_axi_slv_32_aruser;
wire                pciecfg_axi_slv_32_arvalid;
wire                pciecfg_axi_slv_32_arready;
wire    [10 : 0]    pciecfg_axi_slv_32_rid;
wire    [31 : 0]    pciecfg_axi_slv_32_rdata;
wire    [1 : 0]     pciecfg_axi_slv_32_rresp;
wire                pciecfg_axi_slv_32_rlast;
wire                pciecfg_axi_slv_32_ruser;
wire                pciecfg_axi_slv_32_rvalid;
wire                pciecfg_axi_slv_32_rready;
/*********************************************************************/
// PCIE-CFG AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [10 : 0]    pciecfg_axi_slv_32_cut_awid;
wire    [63 : 0]    pciecfg_axi_slv_32_cut_awaddr;
wire    [7 : 0]     pciecfg_axi_slv_32_cut_awlen;
wire    [2 : 0]     pciecfg_axi_slv_32_cut_awsize;
wire    [1 : 0]     pciecfg_axi_slv_32_cut_awburst;
wire    [0 : 0]     pciecfg_axi_slv_32_cut_awlock;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_awcache;
wire    [2 : 0]     pciecfg_axi_slv_32_cut_awprot;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_awregion;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_awqos;
wire                pciecfg_axi_slv_32_cut_awuser;
wire                pciecfg_axi_slv_32_cut_awvalid;
wire                pciecfg_axi_slv_32_cut_awready;
wire    [31 : 0]    pciecfg_axi_slv_32_cut_wdata;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_wstrb;
wire                pciecfg_axi_slv_32_cut_wlast;
wire                pciecfg_axi_slv_32_cut_wuser;
wire                pciecfg_axi_slv_32_cut_wvalid;
wire                pciecfg_axi_slv_32_cut_wready;
wire    [10 : 0]    pciecfg_axi_slv_32_cut_bid;
wire    [1 : 0]     pciecfg_axi_slv_32_cut_bresp;
wire                pciecfg_axi_slv_32_cut_buser;
wire                pciecfg_axi_slv_32_cut_bvalid;
wire                pciecfg_axi_slv_32_cut_bready;
wire    [10 : 0]    pciecfg_axi_slv_32_cut_arid;
wire    [63 : 0]    pciecfg_axi_slv_32_cut_araddr;
wire    [7 : 0]     pciecfg_axi_slv_32_cut_arlen;
wire    [2 : 0]     pciecfg_axi_slv_32_cut_arsize;
wire    [1 : 0]     pciecfg_axi_slv_32_cut_arburst;
wire    [0 : 0]     pciecfg_axi_slv_32_cut_arlock;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_arcache;
wire    [2 : 0]     pciecfg_axi_slv_32_cut_arprot;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_arregion;
wire    [3 : 0]     pciecfg_axi_slv_32_cut_arqos;
wire                pciecfg_axi_slv_32_cut_aruser;
wire                pciecfg_axi_slv_32_cut_arvalid;
wire                pciecfg_axi_slv_32_cut_arready;
wire    [10 : 0]    pciecfg_axi_slv_32_cut_rid;
wire    [31 : 0]    pciecfg_axi_slv_32_cut_rdata;
wire    [1 : 0]     pciecfg_axi_slv_32_cut_rresp;
wire                pciecfg_axi_slv_32_cut_rlast;
wire                pciecfg_axi_slv_32_cut_ruser;
wire                pciecfg_axi_slv_32_cut_rvalid;
wire                pciecfg_axi_slv_32_cut_rready;
/*********************************************************************/
// LMU RAM AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [10 : 0]    ram_axi_slv_32_awid;
wire    [63 : 0]    ram_axi_slv_32_awaddr;
wire    [7 : 0]     ram_axi_slv_32_awlen;
wire    [2 : 0]     ram_axi_slv_32_awsize;
wire    [1 : 0]     ram_axi_slv_32_awburst;
wire    [0 : 0]     ram_axi_slv_32_awlock;
wire    [3 : 0]     ram_axi_slv_32_awcache;
wire    [2 : 0]     ram_axi_slv_32_awprot;
wire    [3 : 0]     ram_axi_slv_32_awregion;
wire    [3 : 0]     ram_axi_slv_32_awqos;
wire                ram_axi_slv_32_awuser;
wire                ram_axi_slv_32_awvalid;
wire                ram_axi_slv_32_awready;
wire    [31 : 0]    ram_axi_slv_32_wdata;
wire    [3 : 0]     ram_axi_slv_32_wstrb;
wire                ram_axi_slv_32_wlast;
wire                ram_axi_slv_32_wuser;
wire                ram_axi_slv_32_wvalid;
wire                ram_axi_slv_32_wready;
wire    [10 : 0]    ram_axi_slv_32_bid;
wire    [1 : 0]     ram_axi_slv_32_bresp;
wire                ram_axi_slv_32_buser;
wire                ram_axi_slv_32_bvalid;
wire                ram_axi_slv_32_bready;
wire    [10 : 0]    ram_axi_slv_32_arid;
wire    [63 : 0]    ram_axi_slv_32_araddr;
wire    [7 : 0]     ram_axi_slv_32_arlen;
wire    [2 : 0]     ram_axi_slv_32_arsize;
wire    [1 : 0]     ram_axi_slv_32_arburst;
wire    [0 : 0]     ram_axi_slv_32_arlock;
wire    [3 : 0]     ram_axi_slv_32_arcache;
wire    [2 : 0]     ram_axi_slv_32_arprot;
wire    [3 : 0]     ram_axi_slv_32_arregion;
wire    [3 : 0]     ram_axi_slv_32_arqos;
wire                ram_axi_slv_32_aruser;
wire                ram_axi_slv_32_arvalid;
wire                ram_axi_slv_32_arready;
wire    [10 : 0]    ram_axi_slv_32_rid;
wire    [31 : 0]    ram_axi_slv_32_rdata;
wire    [31 : 0]    ram_axi_slv_32_rdata_nc;
wire    [1 : 0]     ram_axi_slv_32_rresp;
wire                ram_axi_slv_32_rlast;
wire                ram_axi_slv_32_ruser;
wire                ram_axi_slv_32_rvalid;
wire                ram_axi_slv_32_rready;
/*********************************************************************/
// LMU RAM AHB-Lite Master Interface -- 32bit
/*********************************************************************/
wire    [31 : 0]    ram_ahb_mst_32_haddr;
wire                ram_ahb_mst_32_hwrite;
wire    [2 : 0]     ram_ahb_mst_32_hsize;
wire    [2 : 0]     ram_ahb_mst_32_hburst;
wire    [3 : 0]     ram_ahb_mst_32_hprot;
wire    [1 : 0]     ram_ahb_mst_32_htrans;
wire                ram_ahb_mst_32_hmastlock;
wire    [31 : 0]    ram_ahb_mst_32_hwdata;
wire    [31 : 0]    ram_ahb_mst_32_hwdata_nc;
wire                ram_ahb_mst_32_hready;
wire    [31 : 0]    ram_ahb_mst_32_hrdata;
wire    [1 : 0]     ram_ahb_mst_32_hresp;
/*********************************************************************/
// LMU RAM MEM Interface -- 32bit
/*********************************************************************/
wire                ram_req;
wire                ram_we;
wire    [64-1:0]    ram_addr;
wire    [32/8-1:0]  ram_be;
wire    [32-1:0]    ram_wdata;
wire    [32-1:0]    ram_rdata;
/*********************************************************************/
wire    [32-1:0]     ram_addr_s;
// MAC-CFG AXI Slave Interface -- 32bit
/*********************************************************************/
wire    [10 : 0]    maccfg_axi_slv_32_awid;
wire    [63 : 0]    maccfg_axi_slv_32_awaddr;
wire    [7 : 0]     maccfg_axi_slv_32_awlen;
wire    [2 : 0]     maccfg_axi_slv_32_awsize;
wire    [1 : 0]     maccfg_axi_slv_32_awburst;
wire    [0 : 0]     maccfg_axi_slv_32_awlock;
wire    [3 : 0]     maccfg_axi_slv_32_awcache;
wire    [2 : 0]     maccfg_axi_slv_32_awprot;
wire    [3 : 0]     maccfg_axi_slv_32_awregion;
wire    [3 : 0]     maccfg_axi_slv_32_awqos;
wire                maccfg_axi_slv_32_awuser;
wire                maccfg_axi_slv_32_awvalid;
wire                maccfg_axi_slv_32_awready;
wire    [31 : 0]    maccfg_axi_slv_32_wdata;
wire    [3 : 0]     maccfg_axi_slv_32_wstrb;
wire                maccfg_axi_slv_32_wlast;
wire                maccfg_axi_slv_32_wuser;
wire                maccfg_axi_slv_32_wvalid;
wire                maccfg_axi_slv_32_wready;
wire    [10 : 0]    maccfg_axi_slv_32_bid;
wire    [1 : 0]     maccfg_axi_slv_32_bresp;
wire                maccfg_axi_slv_32_buser;
wire                maccfg_axi_slv_32_bvalid;
wire                maccfg_axi_slv_32_bready;
wire    [10 : 0]    maccfg_axi_slv_32_arid;
wire    [63 : 0]    maccfg_axi_slv_32_araddr;
wire    [7 : 0]     maccfg_axi_slv_32_arlen;
wire    [2 : 0]     maccfg_axi_slv_32_arsize;
wire    [1 : 0]     maccfg_axi_slv_32_arburst;
wire    [0 : 0]     maccfg_axi_slv_32_arlock;
wire    [3 : 0]     maccfg_axi_slv_32_arcache;
wire    [2 : 0]     maccfg_axi_slv_32_arprot;
wire    [3 : 0]     maccfg_axi_slv_32_arregion;
wire    [3 : 0]     maccfg_axi_slv_32_arqos;
wire                maccfg_axi_slv_32_aruser;
wire                maccfg_axi_slv_32_arvalid;
wire                maccfg_axi_slv_32_arready;
wire    [10 : 0]    maccfg_axi_slv_32_rid;
wire    [31 : 0]    maccfg_axi_slv_32_rdata;
wire    [1 : 0]     maccfg_axi_slv_32_rresp;
wire                maccfg_axi_slv_32_rlast;
wire                maccfg_axi_slv_32_ruser;
wire                maccfg_axi_slv_32_rvalid;
wire                maccfg_axi_slv_32_rready;
/*********************************************************************/
wire    [1:0]       riscv_irq;        // level sensitive IR lines, mip & sip (async)
wire                riscv_ipi;        // inter-processor interrupts (async)
wire                riscv_timer_irq;  // timer interrupt in (async)
wire    [29:0]      riscv_irq_sources;

reg     [10 : 0]    clint_axi_slv_64_bid;
reg     [10 : 0]    clint_axi_slv_64_rid;
reg     [10 : 0]    plic_axi_slv_64_bid;
reg     [10 : 0]    plic_axi_slv_64_rid;



// input assign
assign u_NV_nvdla_top_nvdla_intr_s = u_NV_nvdla_top_nvdla_intr_i;
assign u_ddr4_0_top_c0_ddr4_ui_clk_s = u_ddr4_0_top_c0_ddr4_ui_clk_i;
assign u_uncore_top_core_nic_rst_n_s = u_uncore_top_core_nic_rst_n_i;
assign u_uncore_top_per_clk_s = u_uncore_top_per_clk_i;
assign u_uncore_top_riscv_clk_s = u_uncore_top_riscv_clk_i;
assign u_uncore_top_riscv_core_clk_s = u_uncore_top_riscv_core_clk_i;
assign u_uncore_top_riscv_debug_clk_s = u_uncore_top_riscv_debug_clk_i;
assign u_uncore_top_riscv_debug_rst_s = u_uncore_top_riscv_debug_rst_i;
assign u_uncore_top_riscv_rst_s = u_uncore_top_riscv_rst_i;
assign u_uncore_top_riscv_rtc_toggle_s = u_uncore_top_riscv_rtc_toggle_i;
assign u_uncore_top_scu_int_s = u_uncore_top_scu_int_i;
assign u_uncore_top_sw_int0_s = u_uncore_top_sw_int0_i;
assign u_uncore_top_sw_int1_s = u_uncore_top_sw_int1_i;
assign u_uncore_top_timer0_int_ovf_s = u_uncore_top_timer0_int_ovf_i;
assign u_uncore_top_timer0_int_cmp_s = u_uncore_top_timer0_int_cmp_i;
assign u_uncore_top_timer1_int_ovf_s = u_uncore_top_timer1_int_ovf_i;
assign u_uncore_top_timer1_int_cmp_s = u_uncore_top_timer1_int_cmp_i;
assign u_uncore_top_uart_int_s = u_uncore_top_uart_int_i;
assign u_xdma_0_top_axi_aclk_s = u_xdma_0_top_axi_aclk_i;
assign u_xdma_0_top_axi_aresetn_s = u_xdma_0_top_axi_aresetn_i;


// output assign
assign riscv_debug_dmactive = 1'b0;
assign debug_systemjtag_jtag_TDO_driven = 1'b0;
assign u_SiFive_CoreIPSubsystem_debug_systemjtag_jtag_TDO_data_o = 1'b0;

assign u_xdma_0_top_s_axil_awaddr_o             = u_xdma_0_top_s_axil_awaddr_s[31:0];
assign u_xdma_0_top_s_axil_araddr_o             = u_xdma_0_top_s_axil_araddr_s[31:0];

assign u_xdma_0_top_m_axi_bid_o                 = u_xdma_0_top_m_axi_bid_s[3:0];
assign u_xdma_0_top_m_axi_rid_o                 = u_xdma_0_top_m_axi_rid_s[3:0];

assign u_ddr4_0_top_c0_ddr4_s_axi_awid_o        = {2'd0,u_ddr4_0_top_c0_ddr4_s_axi_awid_s};
assign u_ddr4_0_top_c0_ddr4_s_axi_arid_o        = {2'd0,u_ddr4_0_top_c0_ddr4_s_axi_arid_s};

assign u_NV_nvdla_top_paddr_o                   = u_NV_nvdla_top_paddr_s[31:0];

assign u_NV_nvdla_top_nvdla_core2dbb_b_bid_o    = u_NV_nvdla_top_nvdla_core2dbb_b_bid_s[3:0];
assign u_NV_nvdla_top_nvdla_core2dbb_r_rid_o    = u_NV_nvdla_top_nvdla_core2dbb_r_rid_s[3:0];
assign u_NV_nvdla_top_nvdla_core2cvsram_b_bid_o = u_NV_nvdla_top_nvdla_core2cvsram_b_bid_s[3:0];
assign u_NV_nvdla_top_nvdla_core2cvsram_r_rid_o = u_NV_nvdla_top_nvdla_core2cvsram_r_rid_s[3:0];

assign u_uncore_top_AWID_AXI_CORE_MST_o         = u_uncore_top_AWID_AXI_CORE_MST_s[10:0];//5'b0_0101;
assign u_uncore_top_AWADDR_AXI_CORE_MST_o       = u_uncore_top_AWADDR_AXI_CORE_MST_s[31:0];
assign u_uncore_top_ARID_AXI_CORE_MST_o         = u_uncore_top_ARID_AXI_CORE_MST_s[10:0];//5'b0_0101;
assign u_uncore_top_ARADDR_AXI_CORE_MST_o       = u_uncore_top_ARADDR_AXI_CORE_MST_s[31:0];


// internal assign
assign riscv_irq_sources = {9'd0,u_misc_scu_int_out_s,1'b0,1'b0,u_misc_uart_int_out_s,
                                 u_misc_sw_int1_out_s,u_misc_sw_int0_out_s,1'b0,u_misc_timer1_int_cmp_out_s,u_misc_timer1_int_ovf_out_s,
                                 u_misc_timer0_int_cmp_out_s,u_misc_timer0_int_ovf_out_s,8'd0,u_misc_mac_int_out_s,1'b0};

//assign xdma_axi_mst0_256_sync_awid = 8'b1000_0000;
//assign xdma_axi_mst0_256_sync_arid = 8'b1000_0000;
//assign xdma_axi_mst1_256_sync_awid = 8'b1000_0001;
//assign xdma_axi_mst1_256_sync_arid = 8'b1000_0001;
//assign riscv_axi_mst_256_awid      = 8'b1000_0010;
//assign riscv_axi_mst_256_arid      = 8'b1000_0010;




axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(64 ),
  .AXI_MST_PORT_DATA_WIDTH(256),
  .AXI_ID_WIDTH           (8),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_xdma_axi_mst_64_to_256
(
    .clk_i          (u_xdma_0_top_axi_aclk_i             ), //input                                       clk_i,
    .rst_ni         (u_xdma_0_top_axi_aresetn_i          ), //input                                       rst_ni,

    .slv_aw_awid    ({4'd0,u_xdma_0_top_m_axi_awid_i}    ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (u_xdma_0_top_m_axi_awaddr_i         ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (u_xdma_0_top_m_axi_awlen_i          ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (u_xdma_0_top_m_axi_awsize_i         ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (u_xdma_0_top_m_axi_awburst_i        ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (u_xdma_0_top_m_axi_awlock_i         ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (u_xdma_0_top_m_axi_awcache_i        ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (u_xdma_0_top_m_axi_awprot_i         ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(4'd0                                ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (4'd0                                ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (1'b0                                ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (u_xdma_0_top_m_axi_awvalid_i        ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (u_xdma_0_top_m_axi_awready_o        ), //output                                      slv_aw_awready,
    .slv_w_wdata    (u_xdma_0_top_m_axi_wdata_i          ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (u_xdma_0_top_m_axi_wstrb_i          ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (u_xdma_0_top_m_axi_wlast_i          ), //input                                       slv_w_wlast,
    .slv_w_wuser    (1'b0                                ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (u_xdma_0_top_m_axi_wvalid_i         ), //input                                       slv_w_wvalid,
    .slv_w_wready   (u_xdma_0_top_m_axi_wready_o         ), //output                                      slv_w_wready,
    .slv_b_bid      (u_xdma_0_top_m_axi_bid_s            ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (u_xdma_0_top_m_axi_bresp_o          ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (/*no connection*/                   ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (u_xdma_0_top_m_axi_bvalid_o         ), //output                                      slv_b_bvalid,
    .slv_b_bready   (u_xdma_0_top_m_axi_bready_i         ), //input                                       slv_b_bready,
    .slv_ar_arid    ({4'd0,u_xdma_0_top_m_axi_arid_i}    ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (u_xdma_0_top_m_axi_araddr_i         ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (u_xdma_0_top_m_axi_arlen_i          ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (u_xdma_0_top_m_axi_arsize_i         ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (u_xdma_0_top_m_axi_arburst_i        ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (u_xdma_0_top_m_axi_arlock_i         ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (u_xdma_0_top_m_axi_arcache_i        ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (u_xdma_0_top_m_axi_arprot_i         ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(4'd0                                ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (4'd0                                ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (1'b0                                ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (u_xdma_0_top_m_axi_arvalid_i        ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (u_xdma_0_top_m_axi_arready_o        ), //output                                      slv_ar_arready,
    .slv_r_rid      (u_xdma_0_top_m_axi_rid_s            ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (u_xdma_0_top_m_axi_rdata_o          ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (u_xdma_0_top_m_axi_rresp_o          ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (u_xdma_0_top_m_axi_rlast_o          ), //output                                      slv_r_rlast,
    .slv_r_ruser    (/*no connection*/                   ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (u_xdma_0_top_m_axi_rvalid_o         ), //output                                      slv_r_rvalid,
    .slv_r_rready   (u_xdma_0_top_m_axi_rready_i         ), //input                                       slv_r_rready, 

    .mst_aw_awid    (xdma_axi_mst0_256_awid              ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (xdma_axi_mst0_256_awaddr            ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (xdma_axi_mst0_256_awlen             ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (xdma_axi_mst0_256_awsize            ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (xdma_axi_mst0_256_awburst           ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (xdma_axi_mst0_256_awlock            ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (xdma_axi_mst0_256_awcache           ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (xdma_axi_mst0_256_awprot            ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(xdma_axi_mst0_256_awregion          ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (xdma_axi_mst0_256_awqos             ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (xdma_axi_mst0_256_awuser            ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (xdma_axi_mst0_256_awvalid           ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (xdma_axi_mst0_256_awready           ), //input                                       mst_aw_awready,
    .mst_w_wdata    (xdma_axi_mst0_256_wdata             ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (xdma_axi_mst0_256_wstrb             ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (xdma_axi_mst0_256_wlast             ), //output                                      mst_w_wlast,
    .mst_w_wuser    (xdma_axi_mst0_256_wuser             ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (xdma_axi_mst0_256_wvalid            ), //output                                      mst_w_wvalid,
    .mst_w_wready   (xdma_axi_mst0_256_wready            ), //input                                       mst_w_wready,
    .mst_b_bid      (xdma_axi_mst0_256_bid               ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (xdma_axi_mst0_256_bresp             ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (xdma_axi_mst0_256_buser             ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (xdma_axi_mst0_256_bvalid            ), //input                                       mst_b_bvalid,
    .mst_b_bready   (xdma_axi_mst0_256_bready            ), //output                                      mst_b_bready,
    .mst_ar_arid    (xdma_axi_mst0_256_arid              ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (xdma_axi_mst0_256_araddr            ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (xdma_axi_mst0_256_arlen             ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (xdma_axi_mst0_256_arsize            ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (xdma_axi_mst0_256_arburst           ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (xdma_axi_mst0_256_arlock            ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (xdma_axi_mst0_256_arcache           ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (xdma_axi_mst0_256_arprot            ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(xdma_axi_mst0_256_arregion          ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (xdma_axi_mst0_256_arqos             ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (xdma_axi_mst0_256_aruser            ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (xdma_axi_mst0_256_arvalid           ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (xdma_axi_mst0_256_arready           ), //input                                       mst_ar_arready,
    .mst_r_rid      (xdma_axi_mst0_256_rid               ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (xdma_axi_mst0_256_rdata             ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (xdma_axi_mst0_256_rresp             ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (xdma_axi_mst0_256_rlast             ), //input                                       mst_r_rlast,
    .mst_r_ruser    (xdma_axi_mst0_256_ruser             ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (xdma_axi_mst0_256_rvalid            ), //input                                       mst_r_rvalid,
    .mst_r_rready   (xdma_axi_mst0_256_rready            )  //output                                      mst_r_rready 
);

axi_cdc_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(256),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  ),
  .LOG_DEPTH     (2  )
) u_xdma_axi_mst0_256_cdc
(
    .src_clk_i      (u_xdma_0_top_axi_aclk_i                                     ), //input                           src_clk_i,
    .src_rst_ni     (u_xdma_0_top_axi_aresetn_i                                  ), //input                           src_rst_ni,

    .src_aw_awid    ({3'd0,xdma_axi_mst0_256_awid}                               ), //input  [AXI_ID_WIDTH-1:0]       src_aw_awid,
    .src_aw_awaddr  (xdma_axi_mst0_256_awaddr                                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_aw_awaddr,
    .src_aw_awlen   (xdma_axi_mst0_256_awlen                                     ), //input  [7:0]                    src_aw_awlen,
    .src_aw_awsize  (xdma_axi_mst0_256_awsize                                    ), //input  [2:0]                    src_aw_awsize,
    .src_aw_awburst (xdma_axi_mst0_256_awburst                                   ), //input  [1:0]                    src_aw_awburst,
    .src_aw_awlock  (xdma_axi_mst0_256_awlock                                    ), //input                           src_aw_awlock,
    .src_aw_awcache (xdma_axi_mst0_256_awcache                                   ), //input  [3:0]                    src_aw_awcache,
    .src_aw_awprot  (xdma_axi_mst0_256_awprot                                    ), //input  [2:0]                    src_aw_awprot,
    .src_aw_awregion(xdma_axi_mst0_256_awregion                                  ), //input  [3:0]                    src_aw_awregion,
    .src_aw_awqos   (xdma_axi_mst0_256_awqos                                     ), //input  [3:0]                    src_aw_awqos,
    .src_aw_awuser  (xdma_axi_mst0_256_awuser                                    ), //input  [AXI_USER_WIDTH-1:0]     src_aw_awuser,//
    .src_aw_awvalid (xdma_axi_mst0_256_awvalid                                   ), //input                           src_aw_awvalid,
    .src_aw_awready (xdma_axi_mst0_256_awready                                   ), //output                          src_aw_awready,
    .src_w_wdata    (xdma_axi_mst0_256_wdata                                     ), //input  [AXI_DATA_WIDTH-1:0]     src_w_wdata,
    .src_w_wstrb    (xdma_axi_mst0_256_wstrb                                     ), //input  [AXI_DATA_WIDTH/8-1:0]   src_w_wstrb,
    .src_w_wlast    (xdma_axi_mst0_256_wlast                                     ), //input                           src_w_wlast,
    .src_w_wuser    (xdma_axi_mst0_256_wuser                                     ), //input  [AXI_USER_WIDTH-1:0]     src_w_wuser,
    .src_w_wvalid   (xdma_axi_mst0_256_wvalid                                    ), //input                           src_w_wvalid,
    .src_w_wready   (xdma_axi_mst0_256_wready                                    ), //output                          src_w_wready,
    .src_b_bid      ({xdma_axi_mst0_256_bid_nc,xdma_axi_mst0_256_bid}            ), //output [AXI_ID_WIDTH-1:0]       src_b_bid,
    .src_b_bresp    (xdma_axi_mst0_256_bresp                                     ), //output [1:0]                    src_b_bresp,
    .src_b_buser    (xdma_axi_mst0_256_buser                                     ), //output [AXI_USER_WIDTH-1:0]     src_b_buser,
    .src_b_bvalid   (xdma_axi_mst0_256_bvalid                                    ), //output                          src_b_bvalid,
    .src_b_bready   (xdma_axi_mst0_256_bready                                    ), //input                           src_b_bready,
    .src_ar_arid    ({3'd0,xdma_axi_mst0_256_arid}                               ), //input  [AXI_ID_WIDTH-1:0]       src_ar_arid,
    .src_ar_araddr  (xdma_axi_mst0_256_araddr                                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_ar_araddr,
    .src_ar_arlen   (xdma_axi_mst0_256_arlen                                     ), //input  [7:0]                    src_ar_arlen,
    .src_ar_arsize  (xdma_axi_mst0_256_arsize                                    ), //input  [2:0]                    src_ar_arsize,
    .src_ar_arburst (xdma_axi_mst0_256_arburst                                   ), //input  [1:0]                    src_ar_arburst,
    .src_ar_arlock  (xdma_axi_mst0_256_arlock                                    ), //input                           src_ar_arlock,
    .src_ar_arcache (xdma_axi_mst0_256_arcache                                   ), //input  [3:0]                    src_ar_arcache,
    .src_ar_arprot  (xdma_axi_mst0_256_arprot                                    ), //input  [2:0]                    src_ar_arprot,
    .src_ar_arregion(xdma_axi_mst0_256_arregion                                  ), //input  [3:0]                    src_ar_arregion,
    .src_ar_arqos   (xdma_axi_mst0_256_arqos                                     ), //input  [3:0]                    src_ar_arqos,
    .src_ar_aruser  (xdma_axi_mst0_256_aruser                                    ), //input  [AXI_USER_WIDTH-1:0]     src_ar_aruser,
    .src_ar_arvalid (xdma_axi_mst0_256_arvalid                                   ), //input                           src_ar_arvalid,
    .src_ar_arready (xdma_axi_mst0_256_arready                                   ), //output                          src_ar_arready,
    .src_r_rid      ({xdma_axi_mst0_256_rid_nc,xdma_axi_mst0_256_rid}            ), //output [AXI_ID_WIDTH-1:0]       src_r_rid,
    .src_r_rdata    (xdma_axi_mst0_256_rdata                                     ), //output [AXI_DATA_WIDTH-1:0]     src_r_rdata,
    .src_r_rresp    (xdma_axi_mst0_256_rresp                                     ), //output [1:0]                    src_r_rresp,
    .src_r_rlast    (xdma_axi_mst0_256_rlast                                     ), //output                          src_r_rlast,
    .src_r_ruser    (xdma_axi_mst0_256_ruser                                     ), //output [AXI_USER_WIDTH-1:0]     src_r_ruser,
    .src_r_rvalid   (xdma_axi_mst0_256_rvalid                                    ), //output                          src_r_rvalid,
    .src_r_rready   (xdma_axi_mst0_256_rready                                    ), //input                           src_r_rready, 

    .dst_clk_i      (u_uncore_top_riscv_clk_i                                    ), //input                           dst_clk_i,
    .dst_rst_ni     (u_uncore_top_core_nic_rst_n_i                               ), //input                           dst_rst_ni,

    .dst_aw_awid    ({xdma_axi_mst0_256_sync_awid_nc,xdma_axi_mst0_256_sync_awid}), //output [AXI_ID_WIDTH-1:0]       dst_aw_awid,
    .dst_aw_awaddr  (xdma_axi_mst0_256_sync_awaddr                               ), //output [AXI_ADDR_WIDTH-1:0]     dst_aw_awaddr,
    .dst_aw_awlen   (xdma_axi_mst0_256_sync_awlen                                ), //output [7:0]                    dst_aw_awlen,
    .dst_aw_awsize  (xdma_axi_mst0_256_sync_awsize                               ), //output [2:0]                    dst_aw_awsize,
    .dst_aw_awburst (xdma_axi_mst0_256_sync_awburst                              ), //output [1:0]                    dst_aw_awburst,
    .dst_aw_awlock  (xdma_axi_mst0_256_sync_awlock                               ), //output                          dst_aw_awlock,
    .dst_aw_awcache (xdma_axi_mst0_256_sync_awcache                              ), //output [3:0]                    dst_aw_awcache,
    .dst_aw_awprot  (xdma_axi_mst0_256_sync_awprot                               ), //output [2:0]                    dst_aw_awprot,
    .dst_aw_awregion(xdma_axi_mst0_256_sync_awregion                             ), //output [3:0]                    dst_aw_awregion,
    .dst_aw_awqos   (xdma_axi_mst0_256_sync_awqos                                ), //output [3:0]                    dst_aw_awqos,
    .dst_aw_awuser  (xdma_axi_mst0_256_sync_awuser                               ), //output [AXI_USER_WIDTH-1:0]     dst_aw_awuser,//
    .dst_aw_awvalid (xdma_axi_mst0_256_sync_awvalid                              ), //output                          dst_aw_awvalid,
    .dst_aw_awready (xdma_axi_mst0_256_sync_awready                              ), //input                           dst_aw_awready,
    .dst_w_wdata    (xdma_axi_mst0_256_sync_wdata                                ), //output [AXI_DATA_WIDTH-1:0]     dst_w_wdata,
    .dst_w_wstrb    (xdma_axi_mst0_256_sync_wstrb                                ), //output [AXI_DATA_WIDTH/8-1:0]   dst_w_wstrb,
    .dst_w_wlast    (xdma_axi_mst0_256_sync_wlast                                ), //output                          dst_w_wlast,
    .dst_w_wuser    (xdma_axi_mst0_256_sync_wuser                                ), //output [AXI_USER_WIDTH-1:0]     dst_w_wuser,
    .dst_w_wvalid   (xdma_axi_mst0_256_sync_wvalid                               ), //output                          dst_w_wvalid,
    .dst_w_wready   (xdma_axi_mst0_256_sync_wready                               ), //input                           dst_w_wready,
    .dst_b_bid      ({3'd0,xdma_axi_mst0_256_sync_bid}                           ), //input  [AXI_ID_WIDTH-1:0]       dst_b_bid,
    .dst_b_bresp    (xdma_axi_mst0_256_sync_bresp                                ), //input  [1:0]                    dst_b_bresp,
    .dst_b_buser    (xdma_axi_mst0_256_sync_buser                                ), //input  [AXI_USER_WIDTH-1:0]     dst_b_buser,
    .dst_b_bvalid   (xdma_axi_mst0_256_sync_bvalid                               ), //input                           dst_b_bvalid,
    .dst_b_bready   (xdma_axi_mst0_256_sync_bready                               ), //output                          dst_b_bready,
    .dst_ar_arid    ({xdma_axi_mst0_256_sync_arid_nc,xdma_axi_mst0_256_sync_arid}), //output [AXI_ID_WIDTH-1:0]       dst_ar_arid,
    .dst_ar_araddr  (xdma_axi_mst0_256_sync_araddr                               ), //output [AXI_ADDR_WIDTH-1:0]     dst_ar_araddr,
    .dst_ar_arlen   (xdma_axi_mst0_256_sync_arlen                                ), //output [7:0]                    dst_ar_arlen,
    .dst_ar_arsize  (xdma_axi_mst0_256_sync_arsize                               ), //output [2:0]                    dst_ar_arsize,
    .dst_ar_arburst (xdma_axi_mst0_256_sync_arburst                              ), //output [1:0]                    dst_ar_arburst,
    .dst_ar_arlock  (xdma_axi_mst0_256_sync_arlock                               ), //output                          dst_ar_arlock,
    .dst_ar_arcache (xdma_axi_mst0_256_sync_arcache                              ), //output [3:0]                    dst_ar_arcache,
    .dst_ar_arprot  (xdma_axi_mst0_256_sync_arprot                               ), //output [2:0]                    dst_ar_arprot,
    .dst_ar_arregion(xdma_axi_mst0_256_sync_arregion                             ), //output [3:0]                    dst_ar_arregion,
    .dst_ar_arqos   (xdma_axi_mst0_256_sync_arqos                                ), //output [3:0]                    dst_ar_arqos,
    .dst_ar_aruser  (xdma_axi_mst0_256_sync_aruser                               ), //output [AXI_USER_WIDTH-1:0]     dst_ar_aruser,
    .dst_ar_arvalid (xdma_axi_mst0_256_sync_arvalid                              ), //output                          dst_ar_arvalid,
    .dst_ar_arready (xdma_axi_mst0_256_sync_arready                              ), //input                           dst_ar_arready,
    .dst_r_rid      ({3'd0,xdma_axi_mst0_256_sync_rid}                           ), //input  [AXI_ID_WIDTH-1:0]       dst_r_rid,
    .dst_r_rdata    (xdma_axi_mst0_256_sync_rdata                                ), //input  [AXI_DATA_WIDTH-1:0]     dst_r_rdata,
    .dst_r_rresp    (xdma_axi_mst0_256_sync_rresp                                ), //input  [1:0]                    dst_r_rresp,
    .dst_r_rlast    (xdma_axi_mst0_256_sync_rlast                                ), //input                           dst_r_rlast,
    .dst_r_ruser    (xdma_axi_mst0_256_sync_ruser                                ), //input  [AXI_USER_WIDTH-1:0]     dst_r_ruser,
    .dst_r_rvalid   (xdma_axi_mst0_256_sync_rvalid                               ), //input                           dst_r_rvalid,
    .dst_r_rready   (xdma_axi_mst0_256_sync_rready                               )  //output                          dst_r_rready 
);


axilite_to_axi_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(32 ),
  .AXI_ID_WIDTH  (8  ),
  .AXI_USER_WIDTH(1  )
) xdma_axil_to_axi_mst_32
(
    .slv_aw_awaddr  ({32'd0,u_xdma_0_top_m_axil_awaddr_i}  ), //input   [AXI_ADDR_WIDTH-1:0]    slv_aw_awaddr,
    .slv_aw_awprot  (u_xdma_0_top_m_axil_awprot_i          ), //input   [2:0]                   slv_aw_awprot,
    .slv_aw_awvalid (u_xdma_0_top_m_axil_awvalid_i         ), //input                           slv_aw_awvalid,
    .slv_aw_awready (u_xdma_0_top_m_axil_awready_o         ), //output                          slv_aw_awready,
    .slv_w_wdata    (u_xdma_0_top_m_axil_wdata_i           ), //input   [AXI_DATA_WIDTH-1:0]    slv_w_wdata,
    .slv_w_wstrb    (u_xdma_0_top_m_axil_wstrb_i           ), //input   [AXI_DATA_WIDTH/8-1:0]  slv_w_wstrb,
    .slv_w_wvalid   (u_xdma_0_top_m_axil_wvalid_i          ), //input                           slv_w_wvalid,
    .slv_w_wready   (u_xdma_0_top_m_axil_wready_o          ), //output                          slv_w_wready,
    .slv_b_bresp    (u_xdma_0_top_m_axil_bresp_o           ), //output  [1:0]                   slv_b_bresp,
    .slv_b_bvalid   (u_xdma_0_top_m_axil_bvalid_o          ), //output                          slv_b_bvalid,
    .slv_b_bready   (u_xdma_0_top_m_axil_bready_i          ), //input                           slv_b_bready,
    .slv_ar_araddr  ({32'd0,u_xdma_0_top_m_axil_araddr_i}  ), //input   [AXI_ADDR_WIDTH-1:0]    slv_ar_araddr,
    .slv_ar_arprot  (u_xdma_0_top_m_axil_arprot_i          ), //input   [2:0]                   slv_ar_arprot,
    .slv_ar_arvalid (u_xdma_0_top_m_axil_arvalid_i         ), //input                           slv_ar_arvalid,
    .slv_ar_arready (u_xdma_0_top_m_axil_arready_o         ), //output                          slv_ar_arready,
    .slv_r_rdata    (u_xdma_0_top_m_axil_rdata_o           ), //output  [AXI_DATA_WIDTH-1:0]    slv_r_rdata,
    .slv_r_rresp    (u_xdma_0_top_m_axil_rresp_o           ), //output  [1:0]                   slv_r_rresp,
    .slv_r_rvalid   (u_xdma_0_top_m_axil_rvalid_o          ), //output                          slv_r_rvalid,
    .slv_r_rready   (u_xdma_0_top_m_axil_rready_i          ), //input                           slv_r_rready, 

    .mst_aw_awid    (/*no connection*/                     ), //output  [AXI_ID_WIDTH-1:0]      mst_aw_awid,
    .mst_aw_awaddr  (xdma_axi_mst_32_awaddr                ), //output  [AXI_ADDR_WIDTH-1:0]    mst_aw_awaddr,
    .mst_aw_awlen   (xdma_axi_mst_32_awlen                 ), //output  [7:0]                   mst_aw_awlen,
    .mst_aw_awsize  (xdma_axi_mst_32_awsize                ), //output  [2:0]                   mst_aw_awsize,
    .mst_aw_awburst (xdma_axi_mst_32_awburst               ), //output  [1:0]                   mst_aw_awburst,
    .mst_aw_awlock  (xdma_axi_mst_32_awlock                ), //output                          mst_aw_awlock,
    .mst_aw_awcache (xdma_axi_mst_32_awcache               ), //output  [3:0]                   mst_aw_awcache,
    .mst_aw_awprot  (xdma_axi_mst_32_awprot                ), //output  [2:0]                   mst_aw_awprot,
    .mst_aw_awregion(xdma_axi_mst_32_awregion              ), //output  [3:0]                   mst_aw_awregion,
    .mst_aw_awqos   (xdma_axi_mst_32_awqos                 ), //output  [3:0]                   mst_aw_awqos,
    .mst_aw_awuser  (xdma_axi_mst_32_awuser                ), //output                          mst_aw_awuser,//
    .mst_aw_awvalid (xdma_axi_mst_32_awvalid               ), //output                          mst_aw_awvalid,
    .mst_aw_awready (xdma_axi_mst_32_awready               ), //input                           mst_aw_awready,
    .mst_w_wdata    (xdma_axi_mst_32_wdata                 ), //output  [AXI_DATA_WIDTH-1:0]    mst_w_wdata,
    .mst_w_wstrb    (xdma_axi_mst_32_wstrb                 ), //output  [AXI_DATA_WIDTH/8-1:0]  mst_w_wstrb,
    .mst_w_wlast    (xdma_axi_mst_32_wlast                 ), //output                          mst_w_wlast,
    .mst_w_wuser    (xdma_axi_mst_32_wuser                 ), //output                          mst_w_wuser,
    .mst_w_wvalid   (xdma_axi_mst_32_wvalid                ), //output                          mst_w_wvalid,
    .mst_w_wready   (xdma_axi_mst_32_wready                ), //input                           mst_w_wready,
    .mst_b_bid      (xdma_axi_mst_32_bid                   ), //input   [AXI_ID_WIDTH-1:0]      mst_b_bid,
    .mst_b_bresp    (xdma_axi_mst_32_bresp                 ), //input   [1:0]                   mst_b_bresp,
    .mst_b_buser    (xdma_axi_mst_32_buser                 ), //input                           mst_b_buser,
    .mst_b_bvalid   (xdma_axi_mst_32_bvalid                ), //input                           mst_b_bvalid,
    .mst_b_bready   (xdma_axi_mst_32_bready                ), //output                          mst_b_bready,
    .mst_ar_arid    (/*no connection*/                     ), //output  [AXI_ID_WIDTH-1:0]      mst_ar_arid,
    .mst_ar_araddr  (xdma_axi_mst_32_araddr                ), //output  [AXI_ADDR_WIDTH-1:0]    mst_ar_araddr,
    .mst_ar_arlen   (xdma_axi_mst_32_arlen                 ), //output  [7:0]                   mst_ar_arlen,
    .mst_ar_arsize  (xdma_axi_mst_32_arsize                ), //output  [2:0]                   mst_ar_arsize,
    .mst_ar_arburst (xdma_axi_mst_32_arburst               ), //output  [1:0]                   mst_ar_arburst,
    .mst_ar_arlock  (xdma_axi_mst_32_arlock                ), //output                          mst_ar_arlock,
    .mst_ar_arcache (xdma_axi_mst_32_arcache               ), //output  [3:0]                   mst_ar_arcache,
    .mst_ar_arprot  (xdma_axi_mst_32_arprot                ), //output  [2:0]                   mst_ar_arprot,
    .mst_ar_arregion(xdma_axi_mst_32_arregion              ), //output  [3:0]                   mst_ar_arregion,
    .mst_ar_arqos   (xdma_axi_mst_32_arqos                 ), //output  [3:0]                   mst_ar_arqos,
    .mst_ar_aruser  (xdma_axi_mst_32_aruser                ), //output                          mst_ar_aruser,
    .mst_ar_arvalid (xdma_axi_mst_32_arvalid               ), //output                          mst_ar_arvalid,
    .mst_ar_arready (xdma_axi_mst_32_arready               ), //input                           mst_ar_arready,
    .mst_r_rid      (xdma_axi_mst_32_rid                   ), //input   [AXI_ID_WIDTH-1:0]      mst_r_rid,
    .mst_r_rdata    (xdma_axi_mst_32_rdata                 ), //input   [AXI_DATA_WIDTH-1:0]    mst_r_rdata,
    .mst_r_rresp    (xdma_axi_mst_32_rresp                 ), //input   [1:0]                   mst_r_rresp,
    .mst_r_rlast    (xdma_axi_mst_32_rlast                 ), //input                           mst_r_rlast,
    .mst_r_ruser    (xdma_axi_mst_32_ruser                 ), //input                           mst_r_ruser,
    .mst_r_rvalid   (xdma_axi_mst_32_rvalid                ), //input                           mst_r_rvalid,
    .mst_r_rready   (xdma_axi_mst_32_rready                )  //output                          mst_r_rready 
);

axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(32 ),
  .AXI_MST_PORT_DATA_WIDTH(256),
  .AXI_ID_WIDTH           (8),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_xdma_axi_mst_32_to_256
(
    .clk_i          (u_xdma_0_top_axi_aclk_i    ), //input                                       clk_i,
    .rst_ni         (u_xdma_0_top_axi_aresetn_i ), //input                                       rst_ni,

    .slv_aw_awid    (8'b11110000                ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (xdma_axi_mst_32_awaddr     ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (xdma_axi_mst_32_awlen      ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (xdma_axi_mst_32_awsize     ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (xdma_axi_mst_32_awburst    ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (xdma_axi_mst_32_awlock     ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (xdma_axi_mst_32_awcache    ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (xdma_axi_mst_32_awprot     ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(xdma_axi_mst_32_awregion   ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (xdma_axi_mst_32_awqos      ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (xdma_axi_mst_32_awuser     ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (xdma_axi_mst_32_awvalid    ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (xdma_axi_mst_32_awready    ), //output                                      slv_aw_awready,
    .slv_w_wdata    (xdma_axi_mst_32_wdata      ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (xdma_axi_mst_32_wstrb      ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (xdma_axi_mst_32_wlast      ), //input                                       slv_w_wlast,
    .slv_w_wuser    (xdma_axi_mst_32_wuser      ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (xdma_axi_mst_32_wvalid     ), //input                                       slv_w_wvalid,
    .slv_w_wready   (xdma_axi_mst_32_wready     ), //output                                      slv_w_wready,
    .slv_b_bid      (xdma_axi_mst_32_bid        ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (xdma_axi_mst_32_bresp      ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (xdma_axi_mst_32_buser      ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (xdma_axi_mst_32_bvalid     ), //output                                      slv_b_bvalid,
    .slv_b_bready   (xdma_axi_mst_32_bready     ), //input                                       slv_b_bready,
    .slv_ar_arid    (8'b11110000                ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (xdma_axi_mst_32_araddr     ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (xdma_axi_mst_32_arlen      ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (xdma_axi_mst_32_arsize     ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (xdma_axi_mst_32_arburst    ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (xdma_axi_mst_32_arlock     ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (xdma_axi_mst_32_arcache    ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (xdma_axi_mst_32_arprot     ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(xdma_axi_mst_32_arregion   ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (xdma_axi_mst_32_arqos      ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (xdma_axi_mst_32_aruser     ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (xdma_axi_mst_32_arvalid    ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (xdma_axi_mst_32_arready    ), //output                                      slv_ar_arready,
    .slv_r_rid      (xdma_axi_mst_32_rid        ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (xdma_axi_mst_32_rdata      ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (xdma_axi_mst_32_rresp      ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (xdma_axi_mst_32_rlast      ), //output                                      slv_r_rlast,
    .slv_r_ruser    (xdma_axi_mst_32_ruser      ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (xdma_axi_mst_32_rvalid     ), //output                                      slv_r_rvalid,
    .slv_r_rready   (xdma_axi_mst_32_rready     ), //input                                       slv_r_rready, 

    .mst_aw_awid    (xdma_axi_mst1_256_awid     ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (xdma_axi_mst1_256_awaddr   ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (xdma_axi_mst1_256_awlen    ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (xdma_axi_mst1_256_awsize   ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (xdma_axi_mst1_256_awburst  ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (xdma_axi_mst1_256_awlock   ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (xdma_axi_mst1_256_awcache  ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (xdma_axi_mst1_256_awprot   ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(xdma_axi_mst1_256_awregion ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (xdma_axi_mst1_256_awqos    ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (xdma_axi_mst1_256_awuser   ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (xdma_axi_mst1_256_awvalid  ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (xdma_axi_mst1_256_awready  ), //input                                       mst_aw_awready,
    .mst_w_wdata    (xdma_axi_mst1_256_wdata    ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (xdma_axi_mst1_256_wstrb    ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (xdma_axi_mst1_256_wlast    ), //output                                      mst_w_wlast,
    .mst_w_wuser    (xdma_axi_mst1_256_wuser    ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (xdma_axi_mst1_256_wvalid   ), //output                                      mst_w_wvalid,
    .mst_w_wready   (xdma_axi_mst1_256_wready   ), //input                                       mst_w_wready,
    .mst_b_bid      (xdma_axi_mst1_256_bid      ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (xdma_axi_mst1_256_bresp    ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (xdma_axi_mst1_256_buser    ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (xdma_axi_mst1_256_bvalid   ), //input                                       mst_b_bvalid,
    .mst_b_bready   (xdma_axi_mst1_256_bready   ), //output                                      mst_b_bready,
    .mst_ar_arid    (xdma_axi_mst1_256_arid     ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (xdma_axi_mst1_256_araddr   ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (xdma_axi_mst1_256_arlen    ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (xdma_axi_mst1_256_arsize   ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (xdma_axi_mst1_256_arburst  ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (xdma_axi_mst1_256_arlock   ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (xdma_axi_mst1_256_arcache  ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (xdma_axi_mst1_256_arprot   ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(xdma_axi_mst1_256_arregion ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (xdma_axi_mst1_256_arqos    ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (xdma_axi_mst1_256_aruser   ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (xdma_axi_mst1_256_arvalid  ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (xdma_axi_mst1_256_arready  ), //input                                       mst_ar_arready,
    .mst_r_rid      (xdma_axi_mst1_256_rid      ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (xdma_axi_mst1_256_rdata    ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (xdma_axi_mst1_256_rresp    ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (xdma_axi_mst1_256_rlast    ), //input                                       mst_r_rlast,
    .mst_r_ruser    (xdma_axi_mst1_256_ruser    ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (xdma_axi_mst1_256_rvalid   ), //input                                       mst_r_rvalid,
    .mst_r_rready   (xdma_axi_mst1_256_rready   )  //output                                      mst_r_rready 
);

axi_cdc_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(256),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  ),
  .LOG_DEPTH     (2  )
) u_xdma_axi_mst1_256_cdc
(
    .src_clk_i      (u_xdma_0_top_axi_aclk_i                                     ), //input                           src_clk_i,
    .src_rst_ni     (u_xdma_0_top_axi_aresetn_i                                  ), //input                           src_rst_ni,

    .src_aw_awid    ({3'd0,xdma_axi_mst1_256_awid}                               ), //input  [AXI_ID_WIDTH-1:0]       src_aw_awid,
    .src_aw_awaddr  (xdma_axi_mst1_256_awaddr                                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_aw_awaddr,
    .src_aw_awlen   (xdma_axi_mst1_256_awlen                                     ), //input  [7:0]                    src_aw_awlen,
    .src_aw_awsize  (xdma_axi_mst1_256_awsize                                    ), //input  [2:0]                    src_aw_awsize,
    .src_aw_awburst (xdma_axi_mst1_256_awburst                                   ), //input  [1:0]                    src_aw_awburst,
    .src_aw_awlock  (xdma_axi_mst1_256_awlock                                    ), //input                           src_aw_awlock,
    .src_aw_awcache (xdma_axi_mst1_256_awcache                                   ), //input  [3:0]                    src_aw_awcache,
    .src_aw_awprot  (xdma_axi_mst1_256_awprot                                    ), //input  [2:0]                    src_aw_awprot,
    .src_aw_awregion(xdma_axi_mst1_256_awregion                                  ), //input  [3:0]                    src_aw_awregion,
    .src_aw_awqos   (xdma_axi_mst1_256_awqos                                     ), //input  [3:0]                    src_aw_awqos,
    .src_aw_awuser  (xdma_axi_mst1_256_awuser                                    ), //input  [AXI_USER_WIDTH-1:0]     src_aw_awuser,//
    .src_aw_awvalid (xdma_axi_mst1_256_awvalid                                   ), //input                           src_aw_awvalid,
    .src_aw_awready (xdma_axi_mst1_256_awready                                   ), //output                          src_aw_awready,
    .src_w_wdata    (xdma_axi_mst1_256_wdata                                     ), //input  [AXI_DATA_WIDTH-1:0]     src_w_wdata,
    .src_w_wstrb    (xdma_axi_mst1_256_wstrb                                     ), //input  [AXI_DATA_WIDTH/8-1:0]   src_w_wstrb,
    .src_w_wlast    (xdma_axi_mst1_256_wlast                                     ), //input                           src_w_wlast,
    .src_w_wuser    (xdma_axi_mst1_256_wuser                                     ), //input  [AXI_USER_WIDTH-1:0]     src_w_wuser,
    .src_w_wvalid   (xdma_axi_mst1_256_wvalid                                    ), //input                           src_w_wvalid,
    .src_w_wready   (xdma_axi_mst1_256_wready                                    ), //output                          src_w_wready,
    .src_b_bid      ({xdma_axi_mst1_256_bid_nc,xdma_axi_mst1_256_bid}            ), //output [AXI_ID_WIDTH-1:0]       src_b_bid,
    .src_b_bresp    (xdma_axi_mst1_256_bresp                                     ), //output [1:0]                    src_b_bresp,
    .src_b_buser    (xdma_axi_mst1_256_buser                                     ), //output [AXI_USER_WIDTH-1:0]     src_b_buser,
    .src_b_bvalid   (xdma_axi_mst1_256_bvalid                                    ), //output                          src_b_bvalid,
    .src_b_bready   (xdma_axi_mst1_256_bready                                    ), //input                           src_b_bready,
    .src_ar_arid    ({3'd0,xdma_axi_mst1_256_arid}                               ), //input  [AXI_ID_WIDTH-1:0]       src_ar_arid,
    .src_ar_araddr  (xdma_axi_mst1_256_araddr                                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_ar_araddr,
    .src_ar_arlen   (xdma_axi_mst1_256_arlen                                     ), //input  [7:0]                    src_ar_arlen,
    .src_ar_arsize  (xdma_axi_mst1_256_arsize                                    ), //input  [2:0]                    src_ar_arsize,
    .src_ar_arburst (xdma_axi_mst1_256_arburst                                   ), //input  [1:0]                    src_ar_arburst,
    .src_ar_arlock  (xdma_axi_mst1_256_arlock                                    ), //input                           src_ar_arlock,
    .src_ar_arcache (xdma_axi_mst1_256_arcache                                   ), //input  [3:0]                    src_ar_arcache,
    .src_ar_arprot  (xdma_axi_mst1_256_arprot                                    ), //input  [2:0]                    src_ar_arprot,
    .src_ar_arregion(xdma_axi_mst1_256_arregion                                  ), //input  [3:0]                    src_ar_arregion,
    .src_ar_arqos   (xdma_axi_mst1_256_arqos                                     ), //input  [3:0]                    src_ar_arqos,
    .src_ar_aruser  (xdma_axi_mst1_256_aruser                                    ), //input  [AXI_USER_WIDTH-1:0]     src_ar_aruser,
    .src_ar_arvalid (xdma_axi_mst1_256_arvalid                                   ), //input                           src_ar_arvalid,
    .src_ar_arready (xdma_axi_mst1_256_arready                                   ), //output                          src_ar_arready,
    .src_r_rid      ({xdma_axi_mst1_256_rid_nc,xdma_axi_mst1_256_rid}            ), //output [AXI_ID_WIDTH-1:0]       src_r_rid,
    .src_r_rdata    (xdma_axi_mst1_256_rdata                                     ), //output [AXI_DATA_WIDTH-1:0]     src_r_rdata,
    .src_r_rresp    (xdma_axi_mst1_256_rresp                                     ), //output [1:0]                    src_r_rresp,
    .src_r_rlast    (xdma_axi_mst1_256_rlast                                     ), //output                          src_r_rlast,
    .src_r_ruser    (xdma_axi_mst1_256_ruser                                     ), //output [AXI_USER_WIDTH-1:0]     src_r_ruser,
    .src_r_rvalid   (xdma_axi_mst1_256_rvalid                                    ), //output                          src_r_rvalid,
    .src_r_rready   (xdma_axi_mst1_256_rready                                    ), //input                           src_r_rready, 

    .dst_clk_i      (u_uncore_top_riscv_clk_i                                    ), //input                           dst_clk_i,
    .dst_rst_ni     (u_uncore_top_core_nic_rst_n_i                               ), //input                           dst_rst_ni,

    .dst_aw_awid    ({xdma_axi_mst1_256_sync_awid_nc,xdma_axi_mst1_256_sync_awid}), //output [AXI_ID_WIDTH-1:0]       dst_aw_awid,
    .dst_aw_awaddr  (xdma_axi_mst1_256_sync_awaddr                               ), //output [AXI_ADDR_WIDTH-1:0]     dst_aw_awaddr,
    .dst_aw_awlen   (xdma_axi_mst1_256_sync_awlen                                ), //output [7:0]                    dst_aw_awlen,
    .dst_aw_awsize  (xdma_axi_mst1_256_sync_awsize                               ), //output [2:0]                    dst_aw_awsize,
    .dst_aw_awburst (xdma_axi_mst1_256_sync_awburst                              ), //output [1:0]                    dst_aw_awburst,
    .dst_aw_awlock  (xdma_axi_mst1_256_sync_awlock                               ), //output                          dst_aw_awlock,
    .dst_aw_awcache (xdma_axi_mst1_256_sync_awcache                              ), //output [3:0]                    dst_aw_awcache,
    .dst_aw_awprot  (xdma_axi_mst1_256_sync_awprot                               ), //output [2:0]                    dst_aw_awprot,
    .dst_aw_awregion(xdma_axi_mst1_256_sync_awregion                             ), //output [3:0]                    dst_aw_awregion,
    .dst_aw_awqos   (xdma_axi_mst1_256_sync_awqos                                ), //output [3:0]                    dst_aw_awqos,
    .dst_aw_awuser  (xdma_axi_mst1_256_sync_awuser                               ), //output [AXI_USER_WIDTH-1:0]     dst_aw_awuser,//
    .dst_aw_awvalid (xdma_axi_mst1_256_sync_awvalid                              ), //output                          dst_aw_awvalid,
    .dst_aw_awready (xdma_axi_mst1_256_sync_awready                              ), //input                           dst_aw_awready,
    .dst_w_wdata    (xdma_axi_mst1_256_sync_wdata                                ), //output [AXI_DATA_WIDTH-1:0]     dst_w_wdata,
    .dst_w_wstrb    (xdma_axi_mst1_256_sync_wstrb                                ), //output [AXI_DATA_WIDTH/8-1:0]   dst_w_wstrb,
    .dst_w_wlast    (xdma_axi_mst1_256_sync_wlast                                ), //output                          dst_w_wlast,
    .dst_w_wuser    (xdma_axi_mst1_256_sync_wuser                                ), //output [AXI_USER_WIDTH-1:0]     dst_w_wuser,
    .dst_w_wvalid   (xdma_axi_mst1_256_sync_wvalid                               ), //output                          dst_w_wvalid,
    .dst_w_wready   (xdma_axi_mst1_256_sync_wready                               ), //input                           dst_w_wready,
    .dst_b_bid      ({3'd0,xdma_axi_mst1_256_sync_bid}                           ), //input  [AXI_ID_WIDTH-1:0]       dst_b_bid,
    .dst_b_bresp    (xdma_axi_mst1_256_sync_bresp                                ), //input  [1:0]                    dst_b_bresp,
    .dst_b_buser    (xdma_axi_mst1_256_sync_buser                                ), //input  [AXI_USER_WIDTH-1:0]     dst_b_buser,
    .dst_b_bvalid   (xdma_axi_mst1_256_sync_bvalid                               ), //input                           dst_b_bvalid,
    .dst_b_bready   (xdma_axi_mst1_256_sync_bready                               ), //output                          dst_b_bready,
    .dst_ar_arid    ({xdma_axi_mst1_256_sync_arid_nc,xdma_axi_mst1_256_sync_arid}), //output [AXI_ID_WIDTH-1:0]       dst_ar_arid,
    .dst_ar_araddr  (xdma_axi_mst1_256_sync_araddr                               ), //output [AXI_ADDR_WIDTH-1:0]     dst_ar_araddr,
    .dst_ar_arlen   (xdma_axi_mst1_256_sync_arlen                                ), //output [7:0]                    dst_ar_arlen,
    .dst_ar_arsize  (xdma_axi_mst1_256_sync_arsize                               ), //output [2:0]                    dst_ar_arsize,
    .dst_ar_arburst (xdma_axi_mst1_256_sync_arburst                              ), //output [1:0]                    dst_ar_arburst,
    .dst_ar_arlock  (xdma_axi_mst1_256_sync_arlock                               ), //output                          dst_ar_arlock,
    .dst_ar_arcache (xdma_axi_mst1_256_sync_arcache                              ), //output [3:0]                    dst_ar_arcache,
    .dst_ar_arprot  (xdma_axi_mst1_256_sync_arprot                               ), //output [2:0]                    dst_ar_arprot,
    .dst_ar_arregion(xdma_axi_mst1_256_sync_arregion                             ), //output [3:0]                    dst_ar_arregion,
    .dst_ar_arqos   (xdma_axi_mst1_256_sync_arqos                                ), //output [3:0]                    dst_ar_arqos,
    .dst_ar_aruser  (xdma_axi_mst1_256_sync_aruser                               ), //output [AXI_USER_WIDTH-1:0]     dst_ar_aruser,
    .dst_ar_arvalid (xdma_axi_mst1_256_sync_arvalid                              ), //output                          dst_ar_arvalid,
    .dst_ar_arready (xdma_axi_mst1_256_sync_arready                              ), //input                           dst_ar_arready,
    .dst_r_rid      ({3'd0,xdma_axi_mst1_256_sync_rid}                           ), //input  [AXI_ID_WIDTH-1:0]       dst_r_rid,
    .dst_r_rdata    (xdma_axi_mst1_256_sync_rdata                                ), //input  [AXI_DATA_WIDTH-1:0]     dst_r_rdata,
    .dst_r_rresp    (xdma_axi_mst1_256_sync_rresp                                ), //input  [1:0]                    dst_r_rresp,
    .dst_r_rlast    (xdma_axi_mst1_256_sync_rlast                                ), //input                           dst_r_rlast,
    .dst_r_ruser    (xdma_axi_mst1_256_sync_ruser                                ), //input  [AXI_USER_WIDTH-1:0]     dst_r_ruser,
    .dst_r_rvalid   (xdma_axi_mst1_256_sync_rvalid                               ), //input                           dst_r_rvalid,
    .dst_r_rready   (xdma_axi_mst1_256_sync_rready                               )  //output                          dst_r_rready 
);


ariane_ara_wrapper 
#(
  .NrLanes     (RISCV_NRLANES),
  .AxiAddrWidth(64           ),
  .AxiUserWidth(1            ),
  .AxiIdWidth  (5            )
) u_riscv_core
(
    .clk_i                     (u_uncore_top_riscv_clk_i  ),//input              clk_i,
    .rst_ni                    (~u_uncore_top_riscv_rst_i ),//input              rst_ni,
    .boot_addr_i               (64'h40000000              ),//input  [63:0]      boot_addr_i,  // reset boot address                         
    .irq_i                     (riscv_irq                 ),//input  [1:0]       irq_i,        // level sensitive IR lines, mip & sip (async)
    .ipi_i                     (riscv_ipi                 ),//input              ipi_i,        // inter-processor interrupts (async)         
    .time_irq_i                (riscv_timer_irq           ),//input              time_irq_i,   // timer interrupt in (async)                 
    .debug_req_i               (1'b0                      ),//input              debug_req_i,  // debug request (async)                     
    //AXI4-AW channel                                      
    .ariane_ara_sys_aw_awid    (riscv_axi_mst_awid        ),//output [4:0]       ariane_ara_sys_aw_awid,
    .ariane_ara_sys_aw_awaddr  (riscv_axi_mst_awaddr      ),//output [64-1:0]    ariane_ara_sys_aw_awaddr,
    .ariane_ara_sys_aw_awlen   (riscv_axi_mst_awlen       ),//output [7:0]       ariane_ara_sys_aw_awlen,
    .ariane_ara_sys_aw_awsize  (riscv_axi_mst_awsize      ),//output [2:0]       ariane_ara_sys_aw_awsize,
    .ariane_ara_sys_aw_awburst (riscv_axi_mst_awburst     ),//output [1:0]       ariane_ara_sys_aw_awburst,
    .ariane_ara_sys_aw_awlock  (riscv_axi_mst_awlock      ),//output             ariane_ara_sys_aw_awlock,
    .ariane_ara_sys_aw_awcache (riscv_axi_mst_awcache     ),//output [3:0]       ariane_ara_sys_aw_awcache,
    .ariane_ara_sys_aw_awprot  (riscv_axi_mst_awprot      ),//output [2:0]       ariane_ara_sys_aw_awprot,
    .ariane_ara_sys_aw_awqos   (riscv_axi_mst_awqos       ),//output [3:0]       ariane_ara_sys_aw_awqos,
    .ariane_ara_sys_aw_awregion(riscv_axi_mst_awregion    ),//output [3:0]       ariane_ara_sys_aw_awregion,
    .ariane_ara_sys_aw_awuser  (riscv_axi_mst_awuser      ),//output             ariane_ara_sys_aw_awuser,
    .ariane_ara_sys_aw_awvalid (riscv_axi_mst_awvalid     ),//output             ariane_ara_sys_aw_awvalid,
    .ariane_ara_sys_aw_awready (riscv_axi_mst_awready     ),//input              ariane_ara_sys_aw_awready,
    //AXI4-W channel                                            
    .ariane_ara_sys_w_wdata    (riscv_axi_mst_wdata       ),//output [128-1:0]   ariane_ara_sys_w_wdata,
    .ariane_ara_sys_w_wstrb    (riscv_axi_mst_wstrb       ),//output [128/8-1:0] ariane_ara_sys_w_wstrb,
    .ariane_ara_sys_w_wlast    (riscv_axi_mst_wlast       ),//output             ariane_ara_sys_w_wlast,
    .ariane_ara_sys_w_wuser    (riscv_axi_mst_wuser       ),//output             ariane_ara_sys_w_wuser,
    .ariane_ara_sys_w_wvalid   (riscv_axi_mst_wvalid      ),//output             ariane_ara_sys_w_wvalid,
    .ariane_ara_sys_w_wready   (riscv_axi_mst_wready      ),//input              ariane_ara_sys_w_wready,
    //AXI4-B channel                                                 
    .ariane_ara_sys_b_bid      (riscv_axi_mst_bid         ),//input  [4:0]       ariane_ara_sys_b_bid,
    .ariane_ara_sys_b_bresp    (riscv_axi_mst_bresp       ),//input  [1:0]       ariane_ara_sys_b_bresp,
    .ariane_ara_sys_b_buser    (riscv_axi_mst_buser       ),//input              ariane_ara_sys_b_buser,
    .ariane_ara_sys_b_bvalid   (riscv_axi_mst_bvalid      ),//input              ariane_ara_sys_b_bvalid,
    .ariane_ara_sys_b_bready   (riscv_axi_mst_bready      ),//output             ariane_ara_sys_b_bready,
    //AXI4-AR channel                                           
    .ariane_ara_sys_ar_arid    (riscv_axi_mst_arid        ),//output [4:0]       ariane_ara_sys_ar_arid,
    .ariane_ara_sys_ar_araddr  (riscv_axi_mst_araddr      ),//output [64-1:0]    ariane_ara_sys_ar_araddr,
    .ariane_ara_sys_ar_arlen   (riscv_axi_mst_arlen       ),//output [7:0]       ariane_ara_sys_ar_arlen,
    .ariane_ara_sys_ar_arsize  (riscv_axi_mst_arsize      ),//output [2:0]       ariane_ara_sys_ar_arsize,
    .ariane_ara_sys_ar_arburst (riscv_axi_mst_arburst     ),//output [1:0]       ariane_ara_sys_ar_arburst,
    .ariane_ara_sys_ar_arlock  (riscv_axi_mst_arlock      ),//output             ariane_ara_sys_ar_arlock,
    .ariane_ara_sys_ar_arcache (riscv_axi_mst_arcache     ),//output [3:0]       ariane_ara_sys_ar_arcache,
    .ariane_ara_sys_ar_arprot  (riscv_axi_mst_arprot      ),//output [2:0]       ariane_ara_sys_ar_arprot,
    .ariane_ara_sys_ar_arqos   (riscv_axi_mst_arqos       ),//output [3:0]       ariane_ara_sys_ar_arqos,
    .ariane_ara_sys_ar_arregion(riscv_axi_mst_arregion    ),//output [3:0]       ariane_ara_sys_ar_arregion,
    .ariane_ara_sys_ar_aruser  (riscv_axi_mst_aruser      ),//output             ariane_ara_sys_ar_aruser,
    .ariane_ara_sys_ar_arvalid (riscv_axi_mst_arvalid     ),//output             ariane_ara_sys_ar_arvalid,
    .ariane_ara_sys_ar_arready (riscv_axi_mst_arready     ),//input              ariane_ara_sys_ar_arready,
    //AXI4-R channel                                                 
    .ariane_ara_sys_r_rid      (riscv_axi_mst_rid         ),//input  [4:0]       ariane_ara_sys_r_rid,
    .ariane_ara_sys_r_rdata    (riscv_axi_mst_rdata       ),//input  [128-1:0]   ariane_ara_sys_r_rdata,
    .ariane_ara_sys_r_rresp    (riscv_axi_mst_rresp       ),//input  [1:0]       ariane_ara_sys_r_rresp,
    .ariane_ara_sys_r_rlast    (riscv_axi_mst_rlast       ),//input              ariane_ara_sys_r_rlast,
    .ariane_ara_sys_r_ruser    (riscv_axi_mst_ruser       ),//input              ariane_ara_sys_r_ruser,
    .ariane_ara_sys_r_rvalid   (riscv_axi_mst_rvalid      ),//input              ariane_ara_sys_r_rvalid,
    .ariane_ara_sys_r_rready   (riscv_axi_mst_rready      ) //output             ariane_ara_sys_r_rready 
);

axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64              ),
  .AXI_SLV_PORT_DATA_WIDTH(32*RISCV_NRLANES),
  .AXI_MST_PORT_DATA_WIDTH(256             ),
  .AXI_ID_WIDTH           (8               ),
  .AXI_USER_WIDTH         (1               ),
  .AXI_MAX_READS          (8               )
) u_riscv_axi_mst_to_256 
(
    .clk_i          (u_uncore_top_riscv_clk_i                ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i           ), //input                                       rst_ni,

    .slv_aw_awid    ({3'd0,riscv_axi_mst_awid}               ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (riscv_axi_mst_awaddr                    ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (riscv_axi_mst_awlen                     ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (riscv_axi_mst_awsize                    ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (riscv_axi_mst_awburst                   ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (riscv_axi_mst_awlock                    ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (riscv_axi_mst_awcache                   ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (riscv_axi_mst_awprot                    ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(riscv_axi_mst_awregion                  ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (riscv_axi_mst_awqos                     ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (riscv_axi_mst_awuser                    ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (riscv_axi_mst_awvalid                   ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (riscv_axi_mst_awready                   ), //output                                      slv_aw_awready,
    .slv_w_wdata    (riscv_axi_mst_wdata                     ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (riscv_axi_mst_wstrb                     ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (riscv_axi_mst_wlast                     ), //input                                       slv_w_wlast,
    .slv_w_wuser    (riscv_axi_mst_wuser                     ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (riscv_axi_mst_wvalid                    ), //input                                       slv_w_wvalid,
    .slv_w_wready   (riscv_axi_mst_wready                    ), //output                                      slv_w_wready,
    .slv_b_bid      ({riscv_axi_mst_bid_nc,riscv_axi_mst_bid}), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (riscv_axi_mst_bresp                     ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (riscv_axi_mst_buser                     ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (riscv_axi_mst_bvalid                    ), //output                                      slv_b_bvalid,
    .slv_b_bready   (riscv_axi_mst_bready                    ), //input                                       slv_b_bready,
    .slv_ar_arid    ({3'd0,riscv_axi_mst_arid}               ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (riscv_axi_mst_araddr                    ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (riscv_axi_mst_arlen                     ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (riscv_axi_mst_arsize                    ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (riscv_axi_mst_arburst                   ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (riscv_axi_mst_arlock                    ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (riscv_axi_mst_arcache                   ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (riscv_axi_mst_arprot                    ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(riscv_axi_mst_arregion                  ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (riscv_axi_mst_arqos                     ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (riscv_axi_mst_aruser                    ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (riscv_axi_mst_arvalid                   ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (riscv_axi_mst_arready                   ), //output                                      slv_ar_arready,
    .slv_r_rid      ({riscv_axi_mst_rid_nc,riscv_axi_mst_rid}), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (riscv_axi_mst_rdata                     ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (riscv_axi_mst_rresp                     ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (riscv_axi_mst_rlast                     ), //output                                      slv_r_rlast,
    .slv_r_ruser    (riscv_axi_mst_ruser                     ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (riscv_axi_mst_rvalid                    ), //output                                      slv_r_rvalid,
    .slv_r_rready   (riscv_axi_mst_rready                    ), //input                                       slv_r_rready, 

    .mst_aw_awid    (riscv_axi_mst_256_awid                  ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (riscv_axi_mst_256_awaddr                ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (riscv_axi_mst_256_awlen                 ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (riscv_axi_mst_256_awsize                ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (riscv_axi_mst_256_awburst               ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (riscv_axi_mst_256_awlock                ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (riscv_axi_mst_256_awcache               ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (riscv_axi_mst_256_awprot                ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(riscv_axi_mst_256_awregion              ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (riscv_axi_mst_256_awqos                 ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (riscv_axi_mst_256_awuser                ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (riscv_axi_mst_256_awvalid               ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (riscv_axi_mst_256_awready               ), //input                                       mst_aw_awready,
    .mst_w_wdata    (riscv_axi_mst_256_wdata                 ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (riscv_axi_mst_256_wstrb                 ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (riscv_axi_mst_256_wlast                 ), //output                                      mst_w_wlast,
    .mst_w_wuser    (riscv_axi_mst_256_wuser                 ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (riscv_axi_mst_256_wvalid                ), //output                                      mst_w_wvalid,
    .mst_w_wready   (riscv_axi_mst_256_wready                ), //input                                       mst_w_wready,
    .mst_b_bid      (riscv_axi_mst_256_bid                   ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (riscv_axi_mst_256_bresp                 ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (riscv_axi_mst_256_buser                 ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (riscv_axi_mst_256_bvalid                ), //input                                       mst_b_bvalid,
    .mst_b_bready   (riscv_axi_mst_256_bready                ), //output                                      mst_b_bready,
    .mst_ar_arid    (riscv_axi_mst_256_arid                  ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (riscv_axi_mst_256_araddr                ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (riscv_axi_mst_256_arlen                 ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (riscv_axi_mst_256_arsize                ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (riscv_axi_mst_256_arburst               ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (riscv_axi_mst_256_arlock                ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (riscv_axi_mst_256_arcache               ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (riscv_axi_mst_256_arprot                ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(riscv_axi_mst_256_arregion              ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (riscv_axi_mst_256_arqos                 ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (riscv_axi_mst_256_aruser                ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (riscv_axi_mst_256_arvalid               ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (riscv_axi_mst_256_arready               ), //input                                       mst_ar_arready,
    .mst_r_rid      (riscv_axi_mst_256_rid                   ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (riscv_axi_mst_256_rdata                 ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (riscv_axi_mst_256_rresp                 ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (riscv_axi_mst_256_rlast                 ), //input                                       mst_r_rlast,
    .mst_r_ruser    (riscv_axi_mst_256_ruser                 ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (riscv_axi_mst_256_rvalid                ), //input                                       mst_r_rvalid,
    .mst_r_rready   (riscv_axi_mst_256_rready                )  //output                                      mst_r_rready 
);


core_axi_xbar 
#(
  .AXI_ADDR_WIDTH(64),
  .AXI_DATA_WIDTH(256),
  .AXI_ID_WIDTH(8),
  .AXI_USER_WIDTH(1)
) u_core_axi_xbar 
(
    .clk_i           (u_uncore_top_riscv_clk_i                          ), //input  clk_i,
    .rst_ni          (u_uncore_top_core_nic_rst_n_i                     ), //input  rst_ni,

    .slv0_aw_awid    (xdma_axi_mst0_256_sync_awid                       ), //input  [AXI_ID_WIDTH-1:0]       slv0_aw_awid,
    .slv0_aw_awaddr  (xdma_axi_mst0_256_sync_awaddr                     ), //input  [AXI_ADDR_WIDTH-1:0]     slv0_aw_awaddr,
    .slv0_aw_awlen   (xdma_axi_mst0_256_sync_awlen                      ), //input  [7:0]                    slv0_aw_awlen,
    .slv0_aw_awsize  (xdma_axi_mst0_256_sync_awsize                     ), //input  [2:0]                    slv0_aw_awsize,
    .slv0_aw_awburst (xdma_axi_mst0_256_sync_awburst                    ), //input  [1:0]                    slv0_aw_awburst,
    .slv0_aw_awlock  (xdma_axi_mst0_256_sync_awlock                     ), //input                           slv0_aw_awlock,
    .slv0_aw_awcache (xdma_axi_mst0_256_sync_awcache                    ), //input  [3:0]                    slv0_aw_awcache,
    .slv0_aw_awprot  (xdma_axi_mst0_256_sync_awprot                     ), //input  [2:0]                    slv0_aw_awprot,
    .slv0_aw_awregion(xdma_axi_mst0_256_sync_awregion                   ), //input  [3:0]                    slv0_aw_awregion,
    .slv0_aw_awqos   (xdma_axi_mst0_256_sync_awqos                      ), //input  [3:0]                    slv0_aw_awqos,
    .slv0_aw_awuser  (xdma_axi_mst0_256_sync_awuser                     ), //input                           slv0_aw_awuser,//
    .slv0_aw_awvalid (xdma_axi_mst0_256_sync_awvalid                    ), //input                           slv0_aw_awvalid,
    .slv0_aw_awready (xdma_axi_mst0_256_sync_awready                    ), //output                          slv0_aw_awready,
    .slv0_w_wdata    (xdma_axi_mst0_256_sync_wdata                      ), //input  [AXI_DATA_WIDTH-1:0]     slv0_w_wdata,
    .slv0_w_wstrb    (xdma_axi_mst0_256_sync_wstrb                      ), //input  [AXI_DATA_WIDTH/8-1:0]   slv0_w_wstrb,
    .slv0_w_wlast    (xdma_axi_mst0_256_sync_wlast                      ), //input                           slv0_w_wlast,
    .slv0_w_wuser    (xdma_axi_mst0_256_sync_wuser                      ), //input                           slv0_w_wuser,
    .slv0_w_wvalid   (xdma_axi_mst0_256_sync_wvalid                     ), //input                           slv0_w_wvalid,
    .slv0_w_wready   (xdma_axi_mst0_256_sync_wready                     ), //output                          slv0_w_wready,
    .slv0_b_bid      (xdma_axi_mst0_256_sync_bid                        ), //output [AXI_ID_WIDTH-1:0]       slv0_b_bid,
    .slv0_b_bresp    (xdma_axi_mst0_256_sync_bresp                      ), //output [1:0]                    slv0_b_bresp,
    .slv0_b_buser    (xdma_axi_mst0_256_sync_buser                      ), //output                          slv0_b_buser,
    .slv0_b_bvalid   (xdma_axi_mst0_256_sync_bvalid                     ), //output                          slv0_b_bvalid,
    .slv0_b_bready   (xdma_axi_mst0_256_sync_bready                     ), //input                           slv0_b_bready,
    .slv0_ar_arid    (xdma_axi_mst0_256_sync_arid                       ), //input  [AXI_ID_WIDTH-1:0]       slv0_ar_arid,
    .slv0_ar_araddr  (xdma_axi_mst0_256_sync_araddr                     ), //input  [AXI_ADDR_WIDTH-1:0]     slv0_ar_araddr,
    .slv0_ar_arlen   (xdma_axi_mst0_256_sync_arlen                      ), //input  [7:0]                    slv0_ar_arlen,
    .slv0_ar_arsize  (xdma_axi_mst0_256_sync_arsize                     ), //input  [2:0]                    slv0_ar_arsize,
    .slv0_ar_arburst (xdma_axi_mst0_256_sync_arburst                    ), //input  [1:0]                    slv0_ar_arburst,
    .slv0_ar_arlock  (xdma_axi_mst0_256_sync_arlock                     ), //input                           slv0_ar_arlock,
    .slv0_ar_arcache (xdma_axi_mst0_256_sync_arcache                    ), //input  [3:0]                    slv0_ar_arcache,
    .slv0_ar_arprot  (xdma_axi_mst0_256_sync_arprot                     ), //input  [2:0]                    slv0_ar_arprot,
    .slv0_ar_arregion(xdma_axi_mst0_256_sync_arregion                   ), //input  [3:0]                    slv0_ar_arregion,
    .slv0_ar_arqos   (xdma_axi_mst0_256_sync_arqos                      ), //input  [3:0]                    slv0_ar_arqos,
    .slv0_ar_aruser  (xdma_axi_mst0_256_sync_aruser                     ), //input                           slv0_ar_aruser,
    .slv0_ar_arvalid (xdma_axi_mst0_256_sync_arvalid                    ), //input                           slv0_ar_arvalid,
    .slv0_ar_arready (xdma_axi_mst0_256_sync_arready                    ), //output                          slv0_ar_arready,
    .slv0_r_rid      (xdma_axi_mst0_256_sync_rid                        ), //output [AXI_ID_WIDTH-1:0]       slv0_r_rid,
    .slv0_r_rdata    (xdma_axi_mst0_256_sync_rdata                      ), //output [AXI_DATA_WIDTH-1:0]     slv0_r_rdata,
    .slv0_r_rresp    (xdma_axi_mst0_256_sync_rresp                      ), //output [1:0]                    slv0_r_rresp,
    .slv0_r_rlast    (xdma_axi_mst0_256_sync_rlast                      ), //output                          slv0_r_rlast,
    .slv0_r_ruser    (xdma_axi_mst0_256_sync_ruser                      ), //output                          slv0_r_ruser,
    .slv0_r_rvalid   (xdma_axi_mst0_256_sync_rvalid                     ), //output                          slv0_r_rvalid,
    .slv0_r_rready   (xdma_axi_mst0_256_sync_rready                     ), //input                           slv0_r_rready, 
  
    .slv1_aw_awid    (xdma_axi_mst1_256_sync_awid                       ), //input  [AXI_ID_WIDTH-1:0]       slv1_aw_awid,
    .slv1_aw_awaddr  (xdma_axi_mst1_256_sync_awaddr                     ), //input  [AXI_ADDR_WIDTH-1:0]     slv1_aw_awaddr,
    .slv1_aw_awlen   (xdma_axi_mst1_256_sync_awlen                      ), //input  [7:0]                    slv1_aw_awlen,
    .slv1_aw_awsize  (xdma_axi_mst1_256_sync_awsize                     ), //input  [2:0]                    slv1_aw_awsize,
    .slv1_aw_awburst (xdma_axi_mst1_256_sync_awburst                    ), //input  [1:0]                    slv1_aw_awburst,
    .slv1_aw_awlock  (xdma_axi_mst1_256_sync_awlock                     ), //input                           slv1_aw_awlock,
    .slv1_aw_awcache (xdma_axi_mst1_256_sync_awcache                    ), //input  [3:0]                    slv1_aw_awcache,
    .slv1_aw_awprot  (xdma_axi_mst1_256_sync_awprot                     ), //input  [2:0]                    slv1_aw_awprot,
    .slv1_aw_awregion(xdma_axi_mst1_256_sync_awregion                   ), //input  [3:0]                    slv1_aw_awregion,
    .slv1_aw_awqos   (xdma_axi_mst1_256_sync_awqos                      ), //input  [3:0]                    slv1_aw_awqos,
    .slv1_aw_awuser  (xdma_axi_mst1_256_sync_awuser                     ), //input                           slv1_aw_awuser,//
    .slv1_aw_awvalid (xdma_axi_mst1_256_sync_awvalid                    ), //input                           slv1_aw_awvalid,
    .slv1_aw_awready (xdma_axi_mst1_256_sync_awready                    ), //output                          slv1_aw_awready,
    .slv1_w_wdata    (xdma_axi_mst1_256_sync_wdata                      ), //input  [AXI_DATA_WIDTH-1:0]     slv1_w_wdata,
    .slv1_w_wstrb    (xdma_axi_mst1_256_sync_wstrb                      ), //input  [AXI_DATA_WIDTH/8-1:0]   slv1_w_wstrb,
    .slv1_w_wlast    (xdma_axi_mst1_256_sync_wlast                      ), //input                           slv1_w_wlast,
    .slv1_w_wuser    (xdma_axi_mst1_256_sync_wuser                      ), //input                           slv1_w_wuser,
    .slv1_w_wvalid   (xdma_axi_mst1_256_sync_wvalid                     ), //input                           slv1_w_wvalid,
    .slv1_w_wready   (xdma_axi_mst1_256_sync_wready                     ), //output                          slv1_w_wready,
    .slv1_b_bid      (xdma_axi_mst1_256_sync_bid                        ), //output [AXI_ID_WIDTH-1:0]       slv1_b_bid,
    .slv1_b_bresp    (xdma_axi_mst1_256_sync_bresp                      ), //output [1:0]                    slv1_b_bresp,
    .slv1_b_buser    (xdma_axi_mst1_256_sync_buser                      ), //output                          slv1_b_buser,
    .slv1_b_bvalid   (xdma_axi_mst1_256_sync_bvalid                     ), //output                          slv1_b_bvalid,
    .slv1_b_bready   (xdma_axi_mst1_256_sync_bready                     ), //input                           slv1_b_bready,
    .slv1_ar_arid    (xdma_axi_mst1_256_sync_arid                       ), //input  [AXI_ID_WIDTH-1:0]       slv1_ar_arid,
    .slv1_ar_araddr  (xdma_axi_mst1_256_sync_araddr                     ), //input  [AXI_ADDR_WIDTH-1:0]     slv1_ar_araddr,
    .slv1_ar_arlen   (xdma_axi_mst1_256_sync_arlen                      ), //input  [7:0]                    slv1_ar_arlen,
    .slv1_ar_arsize  (xdma_axi_mst1_256_sync_arsize                     ), //input  [2:0]                    slv1_ar_arsize,
    .slv1_ar_arburst (xdma_axi_mst1_256_sync_arburst                    ), //input  [1:0]                    slv1_ar_arburst,
    .slv1_ar_arlock  (xdma_axi_mst1_256_sync_arlock                     ), //input                           slv1_ar_arlock,
    .slv1_ar_arcache (xdma_axi_mst1_256_sync_arcache                    ), //input  [3:0]                    slv1_ar_arcache,
    .slv1_ar_arprot  (xdma_axi_mst1_256_sync_arprot                     ), //input  [2:0]                    slv1_ar_arprot,
    .slv1_ar_arregion(xdma_axi_mst1_256_sync_arregion                   ), //input  [3:0]                    slv1_ar_arregion,
    .slv1_ar_arqos   (xdma_axi_mst1_256_sync_arqos                      ), //input  [3:0]                    slv1_ar_arqos,
    .slv1_ar_aruser  (xdma_axi_mst1_256_sync_aruser                     ), //input                           slv1_ar_aruser,
    .slv1_ar_arvalid (xdma_axi_mst1_256_sync_arvalid                    ), //input                           slv1_ar_arvalid,
    .slv1_ar_arready (xdma_axi_mst1_256_sync_arready                    ), //output                          slv1_ar_arready,
    .slv1_r_rid      (xdma_axi_mst1_256_sync_rid                        ), //output [AXI_ID_WIDTH-1:0]       slv1_r_rid,
    .slv1_r_rdata    (xdma_axi_mst1_256_sync_rdata                      ), //output [AXI_DATA_WIDTH-1:0]     slv1_r_rdata,
    .slv1_r_rresp    (xdma_axi_mst1_256_sync_rresp                      ), //output [1:0]                    slv1_r_rresp,
    .slv1_r_rlast    (xdma_axi_mst1_256_sync_rlast                      ), //output                          slv1_r_rlast,
    .slv1_r_ruser    (xdma_axi_mst1_256_sync_ruser                      ), //output                          slv1_r_ruser,
    .slv1_r_rvalid   (xdma_axi_mst1_256_sync_rvalid                     ), //output                          slv1_r_rvalid,
    .slv1_r_rready   (xdma_axi_mst1_256_sync_rready                     ), //input                           slv1_r_rready, 
  
    .slv2_aw_awid    (riscv_axi_mst_256_awid                            ), //input  [AXI_ID_WIDTH-1:0]       slv2_aw_awid,
    .slv2_aw_awaddr  (riscv_axi_mst_256_awaddr                          ), //input  [AXI_ADDR_WIDTH-1:0]     slv2_aw_awaddr,
    .slv2_aw_awlen   (riscv_axi_mst_256_awlen                           ), //input  [7:0]                    slv2_aw_awlen,
    .slv2_aw_awsize  (riscv_axi_mst_256_awsize                          ), //input  [2:0]                    slv2_aw_awsize,
    .slv2_aw_awburst (riscv_axi_mst_256_awburst                         ), //input  [1:0]                    slv2_aw_awburst,
    .slv2_aw_awlock  (riscv_axi_mst_256_awlock                          ), //input                           slv2_aw_awlock,
    .slv2_aw_awcache (riscv_axi_mst_256_awcache                         ), //input  [3:0]                    slv2_aw_awcache,
    .slv2_aw_awprot  (riscv_axi_mst_256_awprot                          ), //input  [2:0]                    slv2_aw_awprot,
    .slv2_aw_awregion(riscv_axi_mst_256_awregion                        ), //input  [3:0]                    slv2_aw_awregion,
    .slv2_aw_awqos   (riscv_axi_mst_256_awqos                           ), //input  [3:0]                    slv2_aw_awqos,
    .slv2_aw_awuser  (riscv_axi_mst_256_awuser                          ), //input                           slv2_aw_awuser,//
    .slv2_aw_awvalid (riscv_axi_mst_256_awvalid                         ), //input                           slv2_aw_awvalid,
    .slv2_aw_awready (riscv_axi_mst_256_awready                         ), //output                          slv2_aw_awready,
    .slv2_w_wdata    (riscv_axi_mst_256_wdata                           ), //input  [AXI_DATA_WIDTH-1:0]     slv2_w_wdata,
    .slv2_w_wstrb    (riscv_axi_mst_256_wstrb                           ), //input  [AXI_DATA_WIDTH/8-1:0]   slv2_w_wstrb,
    .slv2_w_wlast    (riscv_axi_mst_256_wlast                           ), //input                           slv2_w_wlast,
    .slv2_w_wuser    (riscv_axi_mst_256_wuser                           ), //input                           slv2_w_wuser,
    .slv2_w_wvalid   (riscv_axi_mst_256_wvalid                          ), //input                           slv2_w_wvalid,
    .slv2_w_wready   (riscv_axi_mst_256_wready                          ), //output                          slv2_w_wready,
    .slv2_b_bid      (riscv_axi_mst_256_bid                             ), //output [AXI_ID_WIDTH-1:0]       slv2_b_bid,
    .slv2_b_bresp    (riscv_axi_mst_256_bresp                           ), //output [1:0]                    slv2_b_bresp,
    .slv2_b_buser    (riscv_axi_mst_256_buser                           ), //output                          slv2_b_buser,
    .slv2_b_bvalid   (riscv_axi_mst_256_bvalid                          ), //output                          slv2_b_bvalid,
    .slv2_b_bready   (riscv_axi_mst_256_bready                          ), //input                           slv2_b_bready,
    .slv2_ar_arid    (riscv_axi_mst_256_arid                            ), //input  [AXI_ID_WIDTH-1:0]       slv2_ar_arid,
    .slv2_ar_araddr  (riscv_axi_mst_256_araddr                          ), //input  [AXI_ADDR_WIDTH-1:0]     slv2_ar_araddr,
    .slv2_ar_arlen   (riscv_axi_mst_256_arlen                           ), //input  [7:0]                    slv2_ar_arlen,
    .slv2_ar_arsize  (riscv_axi_mst_256_arsize                          ), //input  [2:0]                    slv2_ar_arsize,
    .slv2_ar_arburst (riscv_axi_mst_256_arburst                         ), //input  [1:0]                    slv2_ar_arburst,
    .slv2_ar_arlock  (riscv_axi_mst_256_arlock                          ), //input                           slv2_ar_arlock,
    .slv2_ar_arcache (riscv_axi_mst_256_arcache                         ), //input  [3:0]                    slv2_ar_arcache,
    .slv2_ar_arprot  (riscv_axi_mst_256_arprot                          ), //input  [2:0]                    slv2_ar_arprot,
    .slv2_ar_arregion(riscv_axi_mst_256_arregion                        ), //input  [3:0]                    slv2_ar_arregion,
    .slv2_ar_arqos   (riscv_axi_mst_256_arqos                           ), //input  [3:0]                    slv2_ar_arqos,
    .slv2_ar_aruser  (riscv_axi_mst_256_aruser                          ), //input                           slv2_ar_aruser,
    .slv2_ar_arvalid (riscv_axi_mst_256_arvalid                         ), //input                           slv2_ar_arvalid,
    .slv2_ar_arready (riscv_axi_mst_256_arready                         ), //output                          slv2_ar_arready,
    .slv2_r_rid      (riscv_axi_mst_256_rid                             ), //output [AXI_ID_WIDTH-1:0]       slv2_r_rid,
    .slv2_r_rdata    (riscv_axi_mst_256_rdata                           ), //output [AXI_DATA_WIDTH-1:0]     slv2_r_rdata,
    .slv2_r_rresp    (riscv_axi_mst_256_rresp                           ), //output [1:0]                    slv2_r_rresp,
    .slv2_r_rlast    (riscv_axi_mst_256_rlast                           ), //output                          slv2_r_rlast,
    .slv2_r_ruser    (riscv_axi_mst_256_ruser                           ), //output                          slv2_r_ruser,
    .slv2_r_rvalid   (riscv_axi_mst_256_rvalid                          ), //output                          slv2_r_rvalid,
    .slv2_r_rready   (riscv_axi_mst_256_rready                          ), //input                           slv2_r_rready, 
  
    .slv3_aw_awid    ({4'd0,u_NV_nvdla_top_nvdla_core2dbb_aw_awid_i}    ), //input  [AXI_ID_WIDTH-1:0]       slv3_aw_awid,
    .slv3_aw_awaddr  (u_NV_nvdla_top_nvdla_core2dbb_aw_awaddr_i         ), //input  [AXI_ADDR_WIDTH-1:0]     slv3_aw_awaddr,
    .slv3_aw_awlen   (u_NV_nvdla_top_nvdla_core2dbb_aw_awlen_i          ), //input  [7:0]                    slv3_aw_awlen,
    .slv3_aw_awsize  (u_NV_nvdla_top_nvdla_core2dbb_aw_awsize_i         ), //input  [2:0]                    slv3_aw_awsize,
    .slv3_aw_awburst (u_NV_nvdla_top_nvdla_core2dbb_aw_awburst_i        ), //input  [1:0]                    slv3_aw_awburst,
    .slv3_aw_awlock  (u_NV_nvdla_top_nvdla_core2dbb_aw_awlock_i         ), //input                           slv3_aw_awlock,
    .slv3_aw_awcache (u_NV_nvdla_top_nvdla_core2dbb_aw_awcache_i        ), //input  [3:0]                    slv3_aw_awcache,
    .slv3_aw_awprot  (u_NV_nvdla_top_nvdla_core2dbb_aw_awprot_i         ), //input  [2:0]                    slv3_aw_awprot,
    .slv3_aw_awregion(4'd0                                              ), //input  [3:0]                    slv3_aw_awregion,
    .slv3_aw_awqos   (4'd0                                              ), //input  [3:0]                    slv3_aw_awqos,
    .slv3_aw_awuser  (1'b0                                              ), //input                           slv3_aw_awuser,//
    .slv3_aw_awvalid (u_NV_nvdla_top_nvdla_core2dbb_aw_awvalid_i        ), //input                           slv3_aw_awvalid,
    .slv3_aw_awready (u_NV_nvdla_top_nvdla_core2dbb_aw_awready_o        ), //output                          slv3_aw_awready,
    .slv3_w_wdata    (u_NV_nvdla_top_nvdla_core2dbb_w_wdata_i           ), //input  [AXI_DATA_WIDTH-1:0]     slv3_w_wdata,
    .slv3_w_wstrb    (u_NV_nvdla_top_nvdla_core2dbb_w_wstrb_i           ), //input  [AXI_DATA_WIDTH/8-1:0]   slv3_w_wstrb,
    .slv3_w_wlast    (u_NV_nvdla_top_nvdla_core2dbb_w_wlast_i           ), //input                           slv3_w_wlast,
    .slv3_w_wuser    (1'b0                                              ), //input                           slv3_w_wuser,
    .slv3_w_wvalid   (u_NV_nvdla_top_nvdla_core2dbb_w_wvalid_i          ), //input                           slv3_w_wvalid,
    .slv3_w_wready   (u_NV_nvdla_top_nvdla_core2dbb_w_wready_o          ), //output                          slv3_w_wready,
    .slv3_b_bid      (u_NV_nvdla_top_nvdla_core2dbb_b_bid_s             ), //output [AXI_ID_WIDTH-1:0]       slv3_b_bid,
    .slv3_b_bresp    (u_NV_nvdla_top_nvdla_core2dbb_b_bresp_o           ), //output [1:0]                    slv3_b_bresp,
    .slv3_b_buser    (/*no connection*/                                 ), //output                          slv3_b_buser,
    .slv3_b_bvalid   (u_NV_nvdla_top_nvdla_core2dbb_b_bvalid_o          ), //output                          slv3_b_bvalid,
    .slv3_b_bready   (u_NV_nvdla_top_nvdla_core2dbb_b_bready_i          ), //input                           slv3_b_bready,
    .slv3_ar_arid    ({4'd0,u_NV_nvdla_top_nvdla_core2dbb_ar_arid_i}    ), //input  [AXI_ID_WIDTH-1:0]       slv3_ar_arid,
    .slv3_ar_araddr  (u_NV_nvdla_top_nvdla_core2dbb_ar_araddr_i         ), //input  [AXI_ADDR_WIDTH-1:0]     slv3_ar_araddr,
    .slv3_ar_arlen   (u_NV_nvdla_top_nvdla_core2dbb_ar_arlen_i          ), //input  [7:0]                    slv3_ar_arlen,
    .slv3_ar_arsize  (u_NV_nvdla_top_nvdla_core2dbb_ar_arsize_i         ), //input  [2:0]                    slv3_ar_arsize,
    .slv3_ar_arburst (u_NV_nvdla_top_nvdla_core2dbb_ar_arburst_i        ), //input  [1:0]                    slv3_ar_arburst,
    .slv3_ar_arlock  (u_NV_nvdla_top_nvdla_core2dbb_ar_arlock_i         ), //input                           slv3_ar_arlock,
    .slv3_ar_arcache (u_NV_nvdla_top_nvdla_core2dbb_ar_arcache_i        ), //input  [3:0]                    slv3_ar_arcache,
    .slv3_ar_arprot  (u_NV_nvdla_top_nvdla_core2dbb_ar_arprot_i         ), //input  [2:0]                    slv3_ar_arprot,
    .slv3_ar_arregion(4'd0                                              ), //input  [3:0]                    slv3_ar_arregion,
    .slv3_ar_arqos   (4'd0                                              ), //input  [3:0]                    slv3_ar_arqos,
    .slv3_ar_aruser  (1'b0                                              ), //input                           slv3_ar_aruser,
    .slv3_ar_arvalid (u_NV_nvdla_top_nvdla_core2dbb_ar_arvalid_i        ), //input                           slv3_ar_arvalid,
    .slv3_ar_arready (u_NV_nvdla_top_nvdla_core2dbb_ar_arready_o        ), //output                          slv3_ar_arready,
    .slv3_r_rid      (u_NV_nvdla_top_nvdla_core2dbb_r_rid_s             ), //output [AXI_ID_WIDTH-1:0]       slv3_r_rid,
    .slv3_r_rdata    (u_NV_nvdla_top_nvdla_core2dbb_r_rdata_o           ), //output [AXI_DATA_WIDTH-1:0]     slv3_r_rdata,
    .slv3_r_rresp    (u_NV_nvdla_top_nvdla_core2dbb_r_rresp_o           ), //output [1:0]                    slv3_r_rresp,
    .slv3_r_rlast    (u_NV_nvdla_top_nvdla_core2dbb_r_rlast_o           ), //output                          slv3_r_rlast,
    .slv3_r_ruser    (/*no connection*/                                 ), //output                          slv3_r_ruser,
    .slv3_r_rvalid   (u_NV_nvdla_top_nvdla_core2dbb_r_rvalid_o          ), //output                          slv3_r_rvalid,
    .slv3_r_rready   (u_NV_nvdla_top_nvdla_core2dbb_r_rready_i          ), //input                           slv3_r_rready, 
  
    .slv4_aw_awid    ({4'd0,u_NV_nvdla_top_nvdla_core2cvsram_aw_awid_i} ), //input  [AXI_ID_WIDTH-1:0]       slv4_aw_awid,
    .slv4_aw_awaddr  (u_NV_nvdla_top_nvdla_core2cvsram_aw_awaddr_i      ), //input  [AXI_ADDR_WIDTH-1:0]     slv4_aw_awaddr,
    .slv4_aw_awlen   (u_NV_nvdla_top_nvdla_core2cvsram_aw_awlen_i       ), //input  [7:0]                    slv4_aw_awlen,
    .slv4_aw_awsize  (u_NV_nvdla_top_nvdla_core2cvsram_aw_awsize_i      ), //input  [2:0]                    slv4_aw_awsize,
    .slv4_aw_awburst (u_NV_nvdla_top_nvdla_core2cvsram_aw_awburst_i     ), //input  [1:0]                    slv4_aw_awburst,
    .slv4_aw_awlock  (u_NV_nvdla_top_nvdla_core2cvsram_aw_awlock_i      ), //input                           slv4_aw_awlock,
    .slv4_aw_awcache (u_NV_nvdla_top_nvdla_core2cvsram_aw_awcache_i     ), //input  [3:0]                    slv4_aw_awcache,
    .slv4_aw_awprot  (u_NV_nvdla_top_nvdla_core2cvsram_aw_awprot_i      ), //input  [2:0]                    slv4_aw_awprot,
    .slv4_aw_awregion(4'd0                                              ), //input  [3:0]                    slv4_aw_awregion,
    .slv4_aw_awqos   (4'd0                                              ), //input  [3:0]                    slv4_aw_awqos,
    .slv4_aw_awuser  (1'b0                                              ), //input                           slv4_aw_awuser,//
    .slv4_aw_awvalid (u_NV_nvdla_top_nvdla_core2cvsram_aw_awvalid_i     ), //input                           slv4_aw_awvalid,
    .slv4_aw_awready (u_NV_nvdla_top_nvdla_core2cvsram_aw_awready_o     ), //output                          slv4_aw_awready,
    .slv4_w_wdata    (u_NV_nvdla_top_nvdla_core2cvsram_w_wdata_i        ), //input  [AXI_DATA_WIDTH-1:0]     slv4_w_wdata,
    .slv4_w_wstrb    (u_NV_nvdla_top_nvdla_core2cvsram_w_wstrb_i        ), //input  [AXI_DATA_WIDTH/8-1:0]   slv4_w_wstrb,
    .slv4_w_wlast    (u_NV_nvdla_top_nvdla_core2cvsram_w_wlast_i        ), //input                           slv4_w_wlast,
    .slv4_w_wuser    (1'b0                                              ), //input                           slv4_w_wuser,
    .slv4_w_wvalid   (u_NV_nvdla_top_nvdla_core2cvsram_w_wvalid_i       ), //input                           slv4_w_wvalid,
    .slv4_w_wready   (u_NV_nvdla_top_nvdla_core2cvsram_w_wready_o       ), //output                          slv4_w_wready,
    .slv4_b_bid      (u_NV_nvdla_top_nvdla_core2cvsram_b_bid_s          ), //output [AXI_ID_WIDTH-1:0]       slv4_b_bid,
    .slv4_b_bresp    (u_NV_nvdla_top_nvdla_core2cvsram_b_bresp_o        ), //output [1:0]                    slv4_b_bresp,
    .slv4_b_buser    (/*no connection*/                                 ), //output                          slv4_b_buser,
    .slv4_b_bvalid   (u_NV_nvdla_top_nvdla_core2cvsram_b_bvalid_o       ), //output                          slv4_b_bvalid,
    .slv4_b_bready   (u_NV_nvdla_top_nvdla_core2cvsram_b_bready_i       ), //input                           slv4_b_bready,
    .slv4_ar_arid    ({4'd0,u_NV_nvdla_top_nvdla_core2cvsram_ar_arid_i} ), //input  [AXI_ID_WIDTH-1:0]       slv4_ar_arid,
    .slv4_ar_araddr  (u_NV_nvdla_top_nvdla_core2cvsram_ar_araddr_i      ), //input  [AXI_ADDR_WIDTH-1:0]     slv4_ar_araddr,
    .slv4_ar_arlen   (u_NV_nvdla_top_nvdla_core2cvsram_ar_arlen_i       ), //input  [7:0]                    slv4_ar_arlen,
    .slv4_ar_arsize  (u_NV_nvdla_top_nvdla_core2cvsram_ar_arsize_i      ), //input  [2:0]                    slv4_ar_arsize,
    .slv4_ar_arburst (u_NV_nvdla_top_nvdla_core2cvsram_ar_arburst_i     ), //input  [1:0]                    slv4_ar_arburst,
    .slv4_ar_arlock  (u_NV_nvdla_top_nvdla_core2cvsram_ar_arlock_i      ), //input                           slv4_ar_arlock,
    .slv4_ar_arcache (u_NV_nvdla_top_nvdla_core2cvsram_ar_arcache_i     ), //input  [3:0]                    slv4_ar_arcache,
    .slv4_ar_arprot  (u_NV_nvdla_top_nvdla_core2cvsram_ar_arprot_i      ), //input  [2:0]                    slv4_ar_arprot,
    .slv4_ar_arregion(4'd0                                              ), //input  [3:0]                    slv4_ar_arregion,
    .slv4_ar_arqos   (4'd0                                              ), //input  [3:0]                    slv4_ar_arqos,
    .slv4_ar_aruser  (1'b0                                              ), //input                           slv4_ar_aruser,
    .slv4_ar_arvalid (u_NV_nvdla_top_nvdla_core2cvsram_ar_arvalid_i     ), //input                           slv4_ar_arvalid,
    .slv4_ar_arready (u_NV_nvdla_top_nvdla_core2cvsram_ar_arready_o     ), //output                          slv4_ar_arready,
    .slv4_r_rid      (u_NV_nvdla_top_nvdla_core2cvsram_r_rid_s          ), //output [AXI_ID_WIDTH-1:0]       slv4_r_rid,
    .slv4_r_rdata    (u_NV_nvdla_top_nvdla_core2cvsram_r_rdata_o        ), //output [AXI_DATA_WIDTH-1:0]     slv4_r_rdata,
    .slv4_r_rresp    (u_NV_nvdla_top_nvdla_core2cvsram_r_rresp_o        ), //output [1:0]                    slv4_r_rresp,
    .slv4_r_rlast    (u_NV_nvdla_top_nvdla_core2cvsram_r_rlast_o        ), //output                          slv4_r_rlast,
    .slv4_r_ruser    (/*no connection*/                                 ), //output                          slv4_r_ruser,
    .slv4_r_rvalid   (u_NV_nvdla_top_nvdla_core2cvsram_r_rvalid_o       ), //output                          slv4_r_rvalid,
    .slv4_r_rready   (u_NV_nvdla_top_nvdla_core2cvsram_r_rready_i       ), //input                           slv4_r_rready, 
  
    .mst0_aw_awid    (pciecfg_axi_slv_256_awid                          ), //output [AXI_ID_WIDTH+3-1:0]     mst0_aw_awid,
    .mst0_aw_awaddr  (pciecfg_axi_slv_256_awaddr                        ), //output [AXI_ADDR_WIDTH-1:0]     mst0_aw_awaddr,
    .mst0_aw_awlen   (pciecfg_axi_slv_256_awlen                         ), //output [7:0]                    mst0_aw_awlen,
    .mst0_aw_awsize  (pciecfg_axi_slv_256_awsize                        ), //output [2:0]                    mst0_aw_awsize,
    .mst0_aw_awburst (pciecfg_axi_slv_256_awburst                       ), //output [1:0]                    mst0_aw_awburst,
    .mst0_aw_awlock  (pciecfg_axi_slv_256_awlock                        ), //output                          mst0_aw_awlock,
    .mst0_aw_awcache (pciecfg_axi_slv_256_awcache                       ), //output [3:0]                    mst0_aw_awcache,
    .mst0_aw_awprot  (pciecfg_axi_slv_256_awprot                        ), //output [2:0]                    mst0_aw_awprot,
    .mst0_aw_awregion(pciecfg_axi_slv_256_awregion                      ), //output [3:0]                    mst0_aw_awregion,
    .mst0_aw_awqos   (pciecfg_axi_slv_256_awqos                         ), //output [3:0]                    mst0_aw_awqos,
    .mst0_aw_awuser  (pciecfg_axi_slv_256_awuser                        ), //output                          mst0_aw_awuser,//
    .mst0_aw_awvalid (pciecfg_axi_slv_256_awvalid                       ), //output                          mst0_aw_awvalid,
    .mst0_aw_awready (pciecfg_axi_slv_256_awready                       ), //input                           mst0_aw_awready,
    .mst0_w_wdata    (pciecfg_axi_slv_256_wdata                         ), //output [AXI_DATA_WIDTH-1:0]     mst0_w_wdata,
    .mst0_w_wstrb    (pciecfg_axi_slv_256_wstrb                         ), //output [AXI_DATA_WIDTH/8-1:0]   mst0_w_wstrb,
    .mst0_w_wlast    (pciecfg_axi_slv_256_wlast                         ), //output                          mst0_w_wlast,
    .mst0_w_wuser    (pciecfg_axi_slv_256_wuser                         ), //output                          mst0_w_wuser,
    .mst0_w_wvalid   (pciecfg_axi_slv_256_wvalid                        ), //output                          mst0_w_wvalid,
    .mst0_w_wready   (pciecfg_axi_slv_256_wready                        ), //input                           mst0_w_wready,
    .mst0_b_bid      (pciecfg_axi_slv_256_bid                           ), //input  [AXI_ID_WIDTH+3-1:0]     mst0_b_bid,
    .mst0_b_bresp    (pciecfg_axi_slv_256_bresp                         ), //input  [1:0]                    mst0_b_bresp,
    .mst0_b_buser    (pciecfg_axi_slv_256_buser                         ), //input                           mst0_b_buser,
    .mst0_b_bvalid   (pciecfg_axi_slv_256_bvalid                        ), //input                           mst0_b_bvalid,
    .mst0_b_bready   (pciecfg_axi_slv_256_bready                        ), //output                          mst0_b_bready,
    .mst0_ar_arid    (pciecfg_axi_slv_256_arid                          ), //output [AXI_ID_WIDTH+3-1:0]     mst0_ar_arid,
    .mst0_ar_araddr  (pciecfg_axi_slv_256_araddr                        ), //output [AXI_ADDR_WIDTH-1:0]     mst0_ar_araddr,
    .mst0_ar_arlen   (pciecfg_axi_slv_256_arlen                         ), //output [7:0]                    mst0_ar_arlen,
    .mst0_ar_arsize  (pciecfg_axi_slv_256_arsize                        ), //output [2:0]                    mst0_ar_arsize,
    .mst0_ar_arburst (pciecfg_axi_slv_256_arburst                       ), //output [1:0]                    mst0_ar_arburst,
    .mst0_ar_arlock  (pciecfg_axi_slv_256_arlock                        ), //output                          mst0_ar_arlock,
    .mst0_ar_arcache (pciecfg_axi_slv_256_arcache                       ), //output [3:0]                    mst0_ar_arcache,
    .mst0_ar_arprot  (pciecfg_axi_slv_256_arprot                        ), //output [2:0]                    mst0_ar_arprot,
    .mst0_ar_arregion(pciecfg_axi_slv_256_arregion                      ), //output [3:0]                    mst0_ar_arregion,
    .mst0_ar_arqos   (pciecfg_axi_slv_256_arqos                         ), //output [3:0]                    mst0_ar_arqos,
    .mst0_ar_aruser  (pciecfg_axi_slv_256_aruser                        ), //output                          mst0_ar_aruser,
    .mst0_ar_arvalid (pciecfg_axi_slv_256_arvalid                       ), //output                          mst0_ar_arvalid,
    .mst0_ar_arready (pciecfg_axi_slv_256_arready                       ), //input                           mst0_ar_arready,
    .mst0_r_rid      (pciecfg_axi_slv_256_rid                           ), //input  [AXI_ID_WIDTH+3-1:0]     mst0_r_rid,
    .mst0_r_rdata    (pciecfg_axi_slv_256_rdata                         ), //input  [AXI_DATA_WIDTH-1:0]     mst0_r_rdata,
    .mst0_r_rresp    (pciecfg_axi_slv_256_rresp                         ), //input  [1:0]                    mst0_r_rresp,
    .mst0_r_rlast    (pciecfg_axi_slv_256_rlast                         ), //input                           mst0_r_rlast,
    .mst0_r_ruser    (pciecfg_axi_slv_256_ruser                         ), //input                           mst0_r_ruser,
    .mst0_r_rvalid   (pciecfg_axi_slv_256_rvalid                        ), //input                           mst0_r_rvalid,
    .mst0_r_rready   (pciecfg_axi_slv_256_rready                        ), //output                          mst0_r_rready, 

    .mst1_aw_awid    (ddr_axi_slv_256_awid                              ), //output [AXI_ID_WIDTH+3-1:0]     mst1_aw_awid,
    .mst1_aw_awaddr  (ddr_axi_slv_256_awaddr                            ), //output [AXI_ADDR_WIDTH-1:0]     mst1_aw_awaddr,
    .mst1_aw_awlen   (ddr_axi_slv_256_awlen                             ), //output [7:0]                    mst1_aw_awlen,
    .mst1_aw_awsize  (ddr_axi_slv_256_awsize                            ), //output [2:0]                    mst1_aw_awsize,
    .mst1_aw_awburst (ddr_axi_slv_256_awburst                           ), //output [1:0]                    mst1_aw_awburst,
    .mst1_aw_awlock  (ddr_axi_slv_256_awlock                            ), //output                          mst1_aw_awlock,
    .mst1_aw_awcache (ddr_axi_slv_256_awcache                           ), //output [3:0]                    mst1_aw_awcache,
    .mst1_aw_awprot  (ddr_axi_slv_256_awprot                            ), //output [2:0]                    mst1_aw_awprot,
    .mst1_aw_awregion(ddr_axi_slv_256_awregion                          ), //output [3:0]                    mst1_aw_awregion,
    .mst1_aw_awqos   (ddr_axi_slv_256_awqos                             ), //output [3:0]                    mst1_aw_awqos,
    .mst1_aw_awuser  (ddr_axi_slv_256_awuser                            ), //output                          mst1_aw_awuser,//
    .mst1_aw_awvalid (ddr_axi_slv_256_awvalid                           ), //output                          mst1_aw_awvalid,
    .mst1_aw_awready (ddr_axi_slv_256_awready                           ), //input                           mst1_aw_awready,
    .mst1_w_wdata    (ddr_axi_slv_256_wdata                             ), //output [AXI_DATA_WIDTH-1:0]     mst1_w_wdata,
    .mst1_w_wstrb    (ddr_axi_slv_256_wstrb                             ), //output [AXI_DATA_WIDTH/8-1:0]   mst1_w_wstrb,
    .mst1_w_wlast    (ddr_axi_slv_256_wlast                             ), //output                          mst1_w_wlast,
    .mst1_w_wuser    (ddr_axi_slv_256_wuser                             ), //output                          mst1_w_wuser,
    .mst1_w_wvalid   (ddr_axi_slv_256_wvalid                            ), //output                          mst1_w_wvalid,
    .mst1_w_wready   (ddr_axi_slv_256_wready                            ), //input                           mst1_w_wready,
    .mst1_b_bid      (ddr_axi_slv_256_bid                               ), //input  [AXI_ID_WIDTH+3-1:0]     mst1_b_bid,
    .mst1_b_bresp    (ddr_axi_slv_256_bresp                             ), //input  [1:0]                    mst1_b_bresp,
    .mst1_b_buser    (ddr_axi_slv_256_buser                             ), //input                           mst1_b_buser,
    .mst1_b_bvalid   (ddr_axi_slv_256_bvalid                            ), //input                           mst1_b_bvalid,
    .mst1_b_bready   (ddr_axi_slv_256_bready                            ), //output                          mst1_b_bready,
    .mst1_ar_arid    (ddr_axi_slv_256_arid                              ), //output [AXI_ID_WIDTH+3-1:0]     mst1_ar_arid,
    .mst1_ar_araddr  (ddr_axi_slv_256_araddr                            ), //output [AXI_ADDR_WIDTH-1:0]     mst1_ar_araddr,
    .mst1_ar_arlen   (ddr_axi_slv_256_arlen                             ), //output [7:0]                    mst1_ar_arlen,
    .mst1_ar_arsize  (ddr_axi_slv_256_arsize                            ), //output [2:0]                    mst1_ar_arsize,
    .mst1_ar_arburst (ddr_axi_slv_256_arburst                           ), //output [1:0]                    mst1_ar_arburst,
    .mst1_ar_arlock  (ddr_axi_slv_256_arlock                            ), //output                          mst1_ar_arlock,
    .mst1_ar_arcache (ddr_axi_slv_256_arcache                           ), //output [3:0]                    mst1_ar_arcache,
    .mst1_ar_arprot  (ddr_axi_slv_256_arprot                            ), //output [2:0]                    mst1_ar_arprot,
    .mst1_ar_arregion(ddr_axi_slv_256_arregion                          ), //output [3:0]                    mst1_ar_arregion,
    .mst1_ar_arqos   (ddr_axi_slv_256_arqos                             ), //output [3:0]                    mst1_ar_arqos,
    .mst1_ar_aruser  (ddr_axi_slv_256_aruser                            ), //output                          mst1_ar_aruser,
    .mst1_ar_arvalid (ddr_axi_slv_256_arvalid                           ), //output                          mst1_ar_arvalid,
    .mst1_ar_arready (ddr_axi_slv_256_arready                           ), //input                           mst1_ar_arready,
    .mst1_r_rid      (ddr_axi_slv_256_rid                               ), //input  [AXI_ID_WIDTH+3-1:0]     mst1_r_rid,
    .mst1_r_rdata    (ddr_axi_slv_256_rdata                             ), //input  [AXI_DATA_WIDTH-1:0]     mst1_r_rdata,
    .mst1_r_rresp    (ddr_axi_slv_256_rresp                             ), //input  [1:0]                    mst1_r_rresp,
    .mst1_r_rlast    (ddr_axi_slv_256_rlast                             ), //input                           mst1_r_rlast,
    .mst1_r_ruser    (ddr_axi_slv_256_ruser                             ), //input                           mst1_r_ruser,
    .mst1_r_rvalid   (ddr_axi_slv_256_rvalid                            ), //input                           mst1_r_rvalid,
    .mst1_r_rready   (ddr_axi_slv_256_rready                            ), //output                          mst1_r_rready, 
  
    .mst2_aw_awid    (ram_axi_slv_256_awid                              ), //output [AXI_ID_WIDTH+3-1:0]     mst2_aw_awid,
    .mst2_aw_awaddr  (ram_axi_slv_256_awaddr                            ), //output [AXI_ADDR_WIDTH-1:0]     mst2_aw_awaddr,
    .mst2_aw_awlen   (ram_axi_slv_256_awlen                             ), //output [7:0]                    mst2_aw_awlen,
    .mst2_aw_awsize  (ram_axi_slv_256_awsize                            ), //output [2:0]                    mst2_aw_awsize,
    .mst2_aw_awburst (ram_axi_slv_256_awburst                           ), //output [1:0]                    mst2_aw_awburst,
    .mst2_aw_awlock  (ram_axi_slv_256_awlock                            ), //output                          mst2_aw_awlock,
    .mst2_aw_awcache (ram_axi_slv_256_awcache                           ), //output [3:0]                    mst2_aw_awcache,
    .mst2_aw_awprot  (ram_axi_slv_256_awprot                            ), //output [2:0]                    mst2_aw_awprot,
    .mst2_aw_awregion(ram_axi_slv_256_awregion                          ), //output [3:0]                    mst2_aw_awregion,
    .mst2_aw_awqos   (ram_axi_slv_256_awqos                             ), //output [3:0]                    mst2_aw_awqos,
    .mst2_aw_awuser  (ram_axi_slv_256_awuser                            ), //output                          mst2_aw_awuser,//
    .mst2_aw_awvalid (ram_axi_slv_256_awvalid                           ), //output                          mst2_aw_awvalid,
    .mst2_aw_awready (ram_axi_slv_256_awready                           ), //input                           mst2_aw_awready,
    .mst2_w_wdata    (ram_axi_slv_256_wdata                             ), //output [AXI_DATA_WIDTH-1:0]     mst2_w_wdata,
    .mst2_w_wstrb    (ram_axi_slv_256_wstrb                             ), //output [AXI_DATA_WIDTH/8-1:0]   mst2_w_wstrb,
    .mst2_w_wlast    (ram_axi_slv_256_wlast                             ), //output                          mst2_w_wlast,
    .mst2_w_wuser    (ram_axi_slv_256_wuser                             ), //output                          mst2_w_wuser,
    .mst2_w_wvalid   (ram_axi_slv_256_wvalid                            ), //output                          mst2_w_wvalid,
    .mst2_w_wready   (ram_axi_slv_256_wready                            ), //input                           mst2_w_wready,
    .mst2_b_bid      (ram_axi_slv_256_bid                               ), //input  [AXI_ID_WIDTH+3-1:0]     mst2_b_bid,
    .mst2_b_bresp    (ram_axi_slv_256_bresp                             ), //input  [1:0]                    mst2_b_bresp,
    .mst2_b_buser    (ram_axi_slv_256_buser                             ), //input                           mst2_b_buser,
    .mst2_b_bvalid   (ram_axi_slv_256_bvalid                            ), //input                           mst2_b_bvalid,
    .mst2_b_bready   (ram_axi_slv_256_bready                            ), //output                          mst2_b_bready,
    .mst2_ar_arid    (ram_axi_slv_256_arid                              ), //output [AXI_ID_WIDTH+3-1:0]     mst2_ar_arid,
    .mst2_ar_araddr  (ram_axi_slv_256_araddr                            ), //output [AXI_ADDR_WIDTH-1:0]     mst2_ar_araddr,
    .mst2_ar_arlen   (ram_axi_slv_256_arlen                             ), //output [7:0]                    mst2_ar_arlen,
    .mst2_ar_arsize  (ram_axi_slv_256_arsize                            ), //output [2:0]                    mst2_ar_arsize,
    .mst2_ar_arburst (ram_axi_slv_256_arburst                           ), //output [1:0]                    mst2_ar_arburst,
    .mst2_ar_arlock  (ram_axi_slv_256_arlock                            ), //output                          mst2_ar_arlock,
    .mst2_ar_arcache (ram_axi_slv_256_arcache                           ), //output [3:0]                    mst2_ar_arcache,
    .mst2_ar_arprot  (ram_axi_slv_256_arprot                            ), //output [2:0]                    mst2_ar_arprot,
    .mst2_ar_arregion(ram_axi_slv_256_arregion                          ), //output [3:0]                    mst2_ar_arregion,
    .mst2_ar_arqos   (ram_axi_slv_256_arqos                             ), //output [3:0]                    mst2_ar_arqos,
    .mst2_ar_aruser  (ram_axi_slv_256_aruser                            ), //output                          mst2_ar_aruser,
    .mst2_ar_arvalid (ram_axi_slv_256_arvalid                           ), //output                          mst2_ar_arvalid,
    .mst2_ar_arready (ram_axi_slv_256_arready                           ), //input                           mst2_ar_arready,
    .mst2_r_rid      (ram_axi_slv_256_rid                               ), //input  [AXI_ID_WIDTH+3-1:0]     mst2_r_rid,
    .mst2_r_rdata    (ram_axi_slv_256_rdata                             ), //input  [AXI_DATA_WIDTH-1:0]     mst2_r_rdata,
    .mst2_r_rresp    (ram_axi_slv_256_rresp                             ), //input  [1:0]                    mst2_r_rresp,
    .mst2_r_rlast    (ram_axi_slv_256_rlast                             ), //input                           mst2_r_rlast,
    .mst2_r_ruser    (ram_axi_slv_256_ruser                             ), //input                           mst2_r_ruser,
    .mst2_r_rvalid   (ram_axi_slv_256_rvalid                            ), //input                           mst2_r_rvalid,
    .mst2_r_rready   (ram_axi_slv_256_rready                            ), //output                          mst2_r_rready, 
  
    .mst3_aw_awid    (maccfg_axi_slv_256_awid                           ), //output [AXI_ID_WIDTH+3-1:0]     mst3_aw_awid,
    .mst3_aw_awaddr  (maccfg_axi_slv_256_awaddr                         ), //output [AXI_ADDR_WIDTH-1:0]     mst3_aw_awaddr,
    .mst3_aw_awlen   (maccfg_axi_slv_256_awlen                          ), //output [7:0]                    mst3_aw_awlen,
    .mst3_aw_awsize  (maccfg_axi_slv_256_awsize                         ), //output [2:0]                    mst3_aw_awsize,
    .mst3_aw_awburst (maccfg_axi_slv_256_awburst                        ), //output [1:0]                    mst3_aw_awburst,
    .mst3_aw_awlock  (maccfg_axi_slv_256_awlock                         ), //output                          mst3_aw_awlock,
    .mst3_aw_awcache (maccfg_axi_slv_256_awcache                        ), //output [3:0]                    mst3_aw_awcache,
    .mst3_aw_awprot  (maccfg_axi_slv_256_awprot                         ), //output [2:0]                    mst3_aw_awprot,
    .mst3_aw_awregion(maccfg_axi_slv_256_awregion                       ), //output [3:0]                    mst3_aw_awregion,
    .mst3_aw_awqos   (maccfg_axi_slv_256_awqos                          ), //output [3:0]                    mst3_aw_awqos,
    .mst3_aw_awuser  (maccfg_axi_slv_256_awuser                         ), //output                          mst3_aw_awuser,//
    .mst3_aw_awvalid (maccfg_axi_slv_256_awvalid                        ), //output                          mst3_aw_awvalid,
    .mst3_aw_awready (maccfg_axi_slv_256_awready                        ), //input                           mst3_aw_awready,
    .mst3_w_wdata    (maccfg_axi_slv_256_wdata                          ), //output [AXI_DATA_WIDTH-1:0]     mst3_w_wdata,
    .mst3_w_wstrb    (maccfg_axi_slv_256_wstrb                          ), //output [AXI_DATA_WIDTH/8-1:0]   mst3_w_wstrb,
    .mst3_w_wlast    (maccfg_axi_slv_256_wlast                          ), //output                          mst3_w_wlast,
    .mst3_w_wuser    (maccfg_axi_slv_256_wuser                          ), //output                          mst3_w_wuser,
    .mst3_w_wvalid   (maccfg_axi_slv_256_wvalid                         ), //output                          mst3_w_wvalid,
    .mst3_w_wready   (maccfg_axi_slv_256_wready                         ), //input                           mst3_w_wready,
    .mst3_b_bid      (maccfg_axi_slv_256_bid                            ), //input  [AXI_ID_WIDTH+3-1:0]     mst3_b_bid,
    .mst3_b_bresp    (maccfg_axi_slv_256_bresp                          ), //input  [1:0]                    mst3_b_bresp,
    .mst3_b_buser    (maccfg_axi_slv_256_buser                          ), //input                           mst3_b_buser,
    .mst3_b_bvalid   (maccfg_axi_slv_256_bvalid                         ), //input                           mst3_b_bvalid,
    .mst3_b_bready   (maccfg_axi_slv_256_bready                         ), //output                          mst3_b_bready,
    .mst3_ar_arid    (maccfg_axi_slv_256_arid                           ), //output [AXI_ID_WIDTH+3-1:0]     mst3_ar_arid,
    .mst3_ar_araddr  (maccfg_axi_slv_256_araddr                         ), //output [AXI_ADDR_WIDTH-1:0]     mst3_ar_araddr,
    .mst3_ar_arlen   (maccfg_axi_slv_256_arlen                          ), //output [7:0]                    mst3_ar_arlen,
    .mst3_ar_arsize  (maccfg_axi_slv_256_arsize                         ), //output [2:0]                    mst3_ar_arsize,
    .mst3_ar_arburst (maccfg_axi_slv_256_arburst                        ), //output [1:0]                    mst3_ar_arburst,
    .mst3_ar_arlock  (maccfg_axi_slv_256_arlock                         ), //output                          mst3_ar_arlock,
    .mst3_ar_arcache (maccfg_axi_slv_256_arcache                        ), //output [3:0]                    mst3_ar_arcache,
    .mst3_ar_arprot  (maccfg_axi_slv_256_arprot                         ), //output [2:0]                    mst3_ar_arprot,
    .mst3_ar_arregion(maccfg_axi_slv_256_arregion                       ), //output [3:0]                    mst3_ar_arregion,
    .mst3_ar_arqos   (maccfg_axi_slv_256_arqos                          ), //output [3:0]                    mst3_ar_arqos,
    .mst3_ar_aruser  (maccfg_axi_slv_256_aruser                         ), //output                          mst3_ar_aruser,
    .mst3_ar_arvalid (maccfg_axi_slv_256_arvalid                        ), //output                          mst3_ar_arvalid,
    .mst3_ar_arready (maccfg_axi_slv_256_arready                        ), //input                           mst3_ar_arready,
    .mst3_r_rid      (maccfg_axi_slv_256_rid                            ), //input  [AXI_ID_WIDTH+3-1:0]     mst3_r_rid,
    .mst3_r_rdata    (maccfg_axi_slv_256_rdata                          ), //input  [AXI_DATA_WIDTH-1:0]     mst3_r_rdata,
    .mst3_r_rresp    (maccfg_axi_slv_256_rresp                          ), //input  [1:0]                    mst3_r_rresp,
    .mst3_r_rlast    (maccfg_axi_slv_256_rlast                          ), //input                           mst3_r_rlast,
    .mst3_r_ruser    (maccfg_axi_slv_256_ruser                          ), //input                           mst3_r_ruser,
    .mst3_r_rvalid   (maccfg_axi_slv_256_rvalid                         ), //input                           mst3_r_rvalid,
    .mst3_r_rready   (maccfg_axi_slv_256_rready                         ), //output                          mst3_r_rready, 
  
    .mst4_aw_awid    (clint_axi_slv_256_awid                            ), //output [AXI_ID_WIDTH+3-1:0]     mst4_aw_awid,
    .mst4_aw_awaddr  (clint_axi_slv_256_awaddr                          ), //output [AXI_ADDR_WIDTH-1:0]     mst4_aw_awaddr,
    .mst4_aw_awlen   (clint_axi_slv_256_awlen                           ), //output [7:0]                    mst4_aw_awlen,
    .mst4_aw_awsize  (clint_axi_slv_256_awsize                          ), //output [2:0]                    mst4_aw_awsize,
    .mst4_aw_awburst (clint_axi_slv_256_awburst                         ), //output [1:0]                    mst4_aw_awburst,
    .mst4_aw_awlock  (clint_axi_slv_256_awlock                          ), //output                          mst4_aw_awlock,
    .mst4_aw_awcache (clint_axi_slv_256_awcache                         ), //output [3:0]                    mst4_aw_awcache,
    .mst4_aw_awprot  (clint_axi_slv_256_awprot                          ), //output [2:0]                    mst4_aw_awprot,
    .mst4_aw_awregion(clint_axi_slv_256_awregion                        ), //output [3:0]                    mst4_aw_awregion,
    .mst4_aw_awqos   (clint_axi_slv_256_awqos                           ), //output [3:0]                    mst4_aw_awqos,
    .mst4_aw_awuser  (clint_axi_slv_256_awuser                          ), //output                          mst4_aw_awuser,//
    .mst4_aw_awvalid (clint_axi_slv_256_awvalid                         ), //output                          mst4_aw_awvalid,
    .mst4_aw_awready (clint_axi_slv_256_awready                         ), //input                           mst4_aw_awready,
    .mst4_w_wdata    (clint_axi_slv_256_wdata                           ), //output [AXI_DATA_WIDTH-1:0]     mst4_w_wdata,
    .mst4_w_wstrb    (clint_axi_slv_256_wstrb                           ), //output [AXI_DATA_WIDTH/8-1:0]   mst4_w_wstrb,
    .mst4_w_wlast    (clint_axi_slv_256_wlast                           ), //output                          mst4_w_wlast,
    .mst4_w_wuser    (clint_axi_slv_256_wuser                           ), //output                          mst4_w_wuser,
    .mst4_w_wvalid   (clint_axi_slv_256_wvalid                          ), //output                          mst4_w_wvalid,
    .mst4_w_wready   (clint_axi_slv_256_wready                          ), //input                           mst4_w_wready,
    .mst4_b_bid      (clint_axi_slv_256_bid                             ), //input  [AXI_ID_WIDTH+3-1:0]     mst4_b_bid,
    .mst4_b_bresp    (clint_axi_slv_256_bresp                           ), //input  [1:0]                    mst4_b_bresp,
    .mst4_b_buser    (clint_axi_slv_256_buser                           ), //input                           mst4_b_buser,
    .mst4_b_bvalid   (clint_axi_slv_256_bvalid                          ), //input                           mst4_b_bvalid,
    .mst4_b_bready   (clint_axi_slv_256_bready                          ), //output                          mst4_b_bready,
    .mst4_ar_arid    (clint_axi_slv_256_arid                            ), //output [AXI_ID_WIDTH+3-1:0]     mst4_ar_arid,
    .mst4_ar_araddr  (clint_axi_slv_256_araddr                          ), //output [AXI_ADDR_WIDTH-1:0]     mst4_ar_araddr,
    .mst4_ar_arlen   (clint_axi_slv_256_arlen                           ), //output [7:0]                    mst4_ar_arlen,
    .mst4_ar_arsize  (clint_axi_slv_256_arsize                          ), //output [2:0]                    mst4_ar_arsize,
    .mst4_ar_arburst (clint_axi_slv_256_arburst                         ), //output [1:0]                    mst4_ar_arburst,
    .mst4_ar_arlock  (clint_axi_slv_256_arlock                          ), //output                          mst4_ar_arlock,
    .mst4_ar_arcache (clint_axi_slv_256_arcache                         ), //output [3:0]                    mst4_ar_arcache,
    .mst4_ar_arprot  (clint_axi_slv_256_arprot                          ), //output [2:0]                    mst4_ar_arprot,
    .mst4_ar_arregion(clint_axi_slv_256_arregion                        ), //output [3:0]                    mst4_ar_arregion,
    .mst4_ar_arqos   (clint_axi_slv_256_arqos                           ), //output [3:0]                    mst4_ar_arqos,
    .mst4_ar_aruser  (clint_axi_slv_256_aruser                          ), //output                          mst4_ar_aruser,
    .mst4_ar_arvalid (clint_axi_slv_256_arvalid                         ), //output                          mst4_ar_arvalid,
    .mst4_ar_arready (clint_axi_slv_256_arready                         ), //input                           mst4_ar_arready,
    .mst4_r_rid      (clint_axi_slv_256_rid                             ), //input  [AXI_ID_WIDTH+3-1:0]     mst4_r_rid,
    .mst4_r_rdata    (clint_axi_slv_256_rdata                           ), //input  [AXI_DATA_WIDTH-1:0]     mst4_r_rdata,
    .mst4_r_rresp    (clint_axi_slv_256_rresp                           ), //input  [1:0]                    mst4_r_rresp,
    .mst4_r_rlast    (clint_axi_slv_256_rlast                           ), //input                           mst4_r_rlast,
    .mst4_r_ruser    (clint_axi_slv_256_ruser                           ), //input                           mst4_r_ruser,
    .mst4_r_rvalid   (clint_axi_slv_256_rvalid                          ), //input                           mst4_r_rvalid,
    .mst4_r_rready   (clint_axi_slv_256_rready                          ), //output                          mst4_r_rready  

    .mst5_aw_awid    (plic_axi_slv_256_awid                             ), //output [AXI_ID_WIDTH+3-1:0]     mst5_aw_awid,
    .mst5_aw_awaddr  (plic_axi_slv_256_awaddr                           ), //output [AXI_ADDR_WIDTH-1:0]     mst5_aw_awaddr,
    .mst5_aw_awlen   (plic_axi_slv_256_awlen                            ), //output [7:0]                    mst5_aw_awlen,
    .mst5_aw_awsize  (plic_axi_slv_256_awsize                           ), //output [2:0]                    mst5_aw_awsize,
    .mst5_aw_awburst (plic_axi_slv_256_awburst                          ), //output [1:0]                    mst5_aw_awburst,
    .mst5_aw_awlock  (plic_axi_slv_256_awlock                           ), //output                          mst5_aw_awlock,
    .mst5_aw_awcache (plic_axi_slv_256_awcache                          ), //output [3:0]                    mst5_aw_awcache,
    .mst5_aw_awprot  (plic_axi_slv_256_awprot                           ), //output [2:0]                    mst5_aw_awprot,
    .mst5_aw_awregion(plic_axi_slv_256_awregion                         ), //output [3:0]                    mst5_aw_awregion,
    .mst5_aw_awqos   (plic_axi_slv_256_awqos                            ), //output [3:0]                    mst5_aw_awqos,
    .mst5_aw_awuser  (plic_axi_slv_256_awuser                           ), //output                          mst5_aw_awuser,//
    .mst5_aw_awvalid (plic_axi_slv_256_awvalid                          ), //output                          mst5_aw_awvalid,
    .mst5_aw_awready (plic_axi_slv_256_awready                          ), //input                           mst5_aw_awready,
    .mst5_w_wdata    (plic_axi_slv_256_wdata                            ), //output [AXI_DATA_WIDTH-1:0]     mst5_w_wdata,
    .mst5_w_wstrb    (plic_axi_slv_256_wstrb                            ), //output [AXI_DATA_WIDTH/8-1:0]   mst5_w_wstrb,
    .mst5_w_wlast    (plic_axi_slv_256_wlast                            ), //output                          mst5_w_wlast,
    .mst5_w_wuser    (plic_axi_slv_256_wuser                            ), //output                          mst5_w_wuser,
    .mst5_w_wvalid   (plic_axi_slv_256_wvalid                           ), //output                          mst5_w_wvalid,
    .mst5_w_wready   (plic_axi_slv_256_wready                           ), //input                           mst5_w_wready,
    .mst5_b_bid      (plic_axi_slv_256_bid                              ), //input  [AXI_ID_WIDTH+3-1:0]     mst5_b_bid,
    .mst5_b_bresp    (plic_axi_slv_256_bresp                            ), //input  [1:0]                    mst5_b_bresp,
    .mst5_b_buser    (plic_axi_slv_256_buser                            ), //input                           mst5_b_buser,
    .mst5_b_bvalid   (plic_axi_slv_256_bvalid                           ), //input                           mst5_b_bvalid,
    .mst5_b_bready   (plic_axi_slv_256_bready                           ), //output                          mst5_b_bready,
    .mst5_ar_arid    (plic_axi_slv_256_arid                             ), //output [AXI_ID_WIDTH+3-1:0]     mst5_ar_arid,
    .mst5_ar_araddr  (plic_axi_slv_256_araddr                           ), //output [AXI_ADDR_WIDTH-1:0]     mst5_ar_araddr,
    .mst5_ar_arlen   (plic_axi_slv_256_arlen                            ), //output [7:0]                    mst5_ar_arlen,
    .mst5_ar_arsize  (plic_axi_slv_256_arsize                           ), //output [2:0]                    mst5_ar_arsize,
    .mst5_ar_arburst (plic_axi_slv_256_arburst                          ), //output [1:0]                    mst5_ar_arburst,
    .mst5_ar_arlock  (plic_axi_slv_256_arlock                           ), //output                          mst5_ar_arlock,
    .mst5_ar_arcache (plic_axi_slv_256_arcache                          ), //output [3:0]                    mst5_ar_arcache,
    .mst5_ar_arprot  (plic_axi_slv_256_arprot                           ), //output [2:0]                    mst5_ar_arprot,
    .mst5_ar_arregion(plic_axi_slv_256_arregion                         ), //output [3:0]                    mst5_ar_arregion,
    .mst5_ar_arqos   (plic_axi_slv_256_arqos                            ), //output [3:0]                    mst5_ar_arqos,
    .mst5_ar_aruser  (plic_axi_slv_256_aruser                           ), //output                          mst5_ar_aruser,
    .mst5_ar_arvalid (plic_axi_slv_256_arvalid                          ), //output                          mst5_ar_arvalid,
    .mst5_ar_arready (plic_axi_slv_256_arready                          ), //input                           mst5_ar_arready,
    .mst5_r_rid      (plic_axi_slv_256_rid                              ), //input  [AXI_ID_WIDTH+3-1:0]     mst5_r_rid,
    .mst5_r_rdata    (plic_axi_slv_256_rdata                            ), //input  [AXI_DATA_WIDTH-1:0]     mst5_r_rdata,
    .mst5_r_rresp    (plic_axi_slv_256_rresp                            ), //input  [1:0]                    mst5_r_rresp,
    .mst5_r_rlast    (plic_axi_slv_256_rlast                            ), //input                           mst5_r_rlast,
    .mst5_r_ruser    (plic_axi_slv_256_ruser                            ), //input                           mst5_r_ruser,
    .mst5_r_rvalid   (plic_axi_slv_256_rvalid                           ), //input                           mst5_r_rvalid,
    .mst5_r_rready   (plic_axi_slv_256_rready                           ), //output                          mst5_r_rready  

    .mst6_aw_awid    (uncore_axi_slv_256_awid                           ), //output [AXI_ID_WIDTH+3-1:0]     mst6_aw_awid,
    .mst6_aw_awaddr  (uncore_axi_slv_256_awaddr                         ), //output [AXI_ADDR_WIDTH-1:0]     mst6_aw_awaddr,
    .mst6_aw_awlen   (uncore_axi_slv_256_awlen                          ), //output [7:0]                    mst6_aw_awlen,
    .mst6_aw_awsize  (uncore_axi_slv_256_awsize                         ), //output [2:0]                    mst6_aw_awsize,
    .mst6_aw_awburst (uncore_axi_slv_256_awburst                        ), //output [1:0]                    mst6_aw_awburst,
    .mst6_aw_awlock  (uncore_axi_slv_256_awlock                         ), //output                          mst6_aw_awlock,
    .mst6_aw_awcache (uncore_axi_slv_256_awcache                        ), //output [3:0]                    mst6_aw_awcache,
    .mst6_aw_awprot  (uncore_axi_slv_256_awprot                         ), //output [2:0]                    mst6_aw_awprot,
    .mst6_aw_awregion(uncore_axi_slv_256_awregion                       ), //output [3:0]                    mst6_aw_awregion,
    .mst6_aw_awqos   (uncore_axi_slv_256_awqos                          ), //output [3:0]                    mst6_aw_awqos,
    .mst6_aw_awuser  (uncore_axi_slv_256_awuser                         ), //output                          mst6_aw_awuser,//
    .mst6_aw_awvalid (uncore_axi_slv_256_awvalid                        ), //output                          mst6_aw_awvalid,
    .mst6_aw_awready (uncore_axi_slv_256_awready                        ), //input                           mst6_aw_awready,
    .mst6_w_wdata    (uncore_axi_slv_256_wdata                          ), //output [AXI_DATA_WIDTH-1:0]     mst6_w_wdata,
    .mst6_w_wstrb    (uncore_axi_slv_256_wstrb                          ), //output [AXI_DATA_WIDTH/8-1:0]   mst6_w_wstrb,
    .mst6_w_wlast    (uncore_axi_slv_256_wlast                          ), //output                          mst6_w_wlast,
    .mst6_w_wuser    (uncore_axi_slv_256_wuser                          ), //output                          mst6_w_wuser,
    .mst6_w_wvalid   (uncore_axi_slv_256_wvalid                         ), //output                          mst6_w_wvalid,
    .mst6_w_wready   (uncore_axi_slv_256_wready                         ), //input                           mst6_w_wready,
    .mst6_b_bid      (uncore_axi_slv_256_bid                            ), //input  [AXI_ID_WIDTH+3-1:0]     mst6_b_bid,
    .mst6_b_bresp    (uncore_axi_slv_256_bresp                          ), //input  [1:0]                    mst6_b_bresp,
    .mst6_b_buser    (uncore_axi_slv_256_buser                          ), //input                           mst6_b_buser,
    .mst6_b_bvalid   (uncore_axi_slv_256_bvalid                         ), //input                           mst6_b_bvalid,
    .mst6_b_bready   (uncore_axi_slv_256_bready                         ), //output                          mst6_b_bready,
    .mst6_ar_arid    (uncore_axi_slv_256_arid                           ), //output [AXI_ID_WIDTH+3-1:0]     mst6_ar_arid,
    .mst6_ar_araddr  (uncore_axi_slv_256_araddr                         ), //output [AXI_ADDR_WIDTH-1:0]     mst6_ar_araddr,
    .mst6_ar_arlen   (uncore_axi_slv_256_arlen                          ), //output [7:0]                    mst6_ar_arlen,
    .mst6_ar_arsize  (uncore_axi_slv_256_arsize                         ), //output [2:0]                    mst6_ar_arsize,
    .mst6_ar_arburst (uncore_axi_slv_256_arburst                        ), //output [1:0]                    mst6_ar_arburst,
    .mst6_ar_arlock  (uncore_axi_slv_256_arlock                         ), //output                          mst6_ar_arlock,
    .mst6_ar_arcache (uncore_axi_slv_256_arcache                        ), //output [3:0]                    mst6_ar_arcache,
    .mst6_ar_arprot  (uncore_axi_slv_256_arprot                         ), //output [2:0]                    mst6_ar_arprot,
    .mst6_ar_arregion(uncore_axi_slv_256_arregion                       ), //output [3:0]                    mst6_ar_arregion,
    .mst6_ar_arqos   (uncore_axi_slv_256_arqos                          ), //output [3:0]                    mst6_ar_arqos,
    .mst6_ar_aruser  (uncore_axi_slv_256_aruser                         ), //output                          mst6_ar_aruser,
    .mst6_ar_arvalid (uncore_axi_slv_256_arvalid                        ), //output                          mst6_ar_arvalid,
    .mst6_ar_arready (uncore_axi_slv_256_arready                        ), //input                           mst6_ar_arready,
    .mst6_r_rid      (uncore_axi_slv_256_rid                            ), //input  [AXI_ID_WIDTH+3-1:0]     mst6_r_rid,
    .mst6_r_rdata    (uncore_axi_slv_256_rdata                          ), //input  [AXI_DATA_WIDTH-1:0]     mst6_r_rdata,
    .mst6_r_rresp    (uncore_axi_slv_256_rresp                          ), //input  [1:0]                    mst6_r_rresp,
    .mst6_r_rlast    (uncore_axi_slv_256_rlast                          ), //input                           mst6_r_rlast,
    .mst6_r_ruser    (uncore_axi_slv_256_ruser                          ), //input                           mst6_r_ruser,
    .mst6_r_rvalid   (uncore_axi_slv_256_rvalid                         ), //input                           mst6_r_rvalid,
    .mst6_r_rready   (uncore_axi_slv_256_rready                         )  //output                          mst6_r_rready  
);


axi_cdc_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(256),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  ),
  .LOG_DEPTH     (2  )
) u_pciecfg_axi_slv_256_cdc 
(
    .src_clk_i      (u_uncore_top_riscv_clk_i          ), //input                           src_clk_i,
    .src_rst_ni     (u_uncore_top_core_nic_rst_n_i     ), //input                           src_rst_ni,

    .src_aw_awid    (pciecfg_axi_slv_256_awid          ), //input  [AXI_ID_WIDTH-1:0]       src_aw_awid,
    .src_aw_awaddr  (pciecfg_axi_slv_256_awaddr        ), //input  [AXI_ADDR_WIDTH-1:0]     src_aw_awaddr,
    .src_aw_awlen   (pciecfg_axi_slv_256_awlen         ), //input  [7:0]                    src_aw_awlen,
    .src_aw_awsize  (pciecfg_axi_slv_256_awsize        ), //input  [2:0]                    src_aw_awsize,
    .src_aw_awburst (pciecfg_axi_slv_256_awburst       ), //input  [1:0]                    src_aw_awburst,
    .src_aw_awlock  (pciecfg_axi_slv_256_awlock        ), //input                           src_aw_awlock,
    .src_aw_awcache (pciecfg_axi_slv_256_awcache       ), //input  [3:0]                    src_aw_awcache,
    .src_aw_awprot  (pciecfg_axi_slv_256_awprot        ), //input  [2:0]                    src_aw_awprot,
    .src_aw_awregion(pciecfg_axi_slv_256_awregion      ), //input  [3:0]                    src_aw_awregion,
    .src_aw_awqos   (pciecfg_axi_slv_256_awqos         ), //input  [3:0]                    src_aw_awqos,
    .src_aw_awuser  (pciecfg_axi_slv_256_awuser        ), //input  [AXI_USER_WIDTH-1:0]     src_aw_awuser,//
    .src_aw_awvalid (pciecfg_axi_slv_256_awvalid       ), //input                           src_aw_awvalid,
    .src_aw_awready (pciecfg_axi_slv_256_awready       ), //output                          src_aw_awready,
    .src_w_wdata    (pciecfg_axi_slv_256_wdata         ), //input  [AXI_DATA_WIDTH-1:0]     src_w_wdata,
    .src_w_wstrb    (pciecfg_axi_slv_256_wstrb         ), //input  [AXI_DATA_WIDTH/8-1:0]   src_w_wstrb,
    .src_w_wlast    (pciecfg_axi_slv_256_wlast         ), //input                           src_w_wlast,
    .src_w_wuser    (pciecfg_axi_slv_256_wuser         ), //input  [AXI_USER_WIDTH-1:0]     src_w_wuser,
    .src_w_wvalid   (pciecfg_axi_slv_256_wvalid        ), //input                           src_w_wvalid,
    .src_w_wready   (pciecfg_axi_slv_256_wready        ), //output                          src_w_wready,
    .src_b_bid      (pciecfg_axi_slv_256_bid           ), //output [AXI_ID_WIDTH-1:0]       src_b_bid,
    .src_b_bresp    (pciecfg_axi_slv_256_bresp         ), //output [1:0]                    src_b_bresp,
    .src_b_buser    (pciecfg_axi_slv_256_buser         ), //output [AXI_USER_WIDTH-1:0]     src_b_buser,
    .src_b_bvalid   (pciecfg_axi_slv_256_bvalid        ), //output                          src_b_bvalid,
    .src_b_bready   (pciecfg_axi_slv_256_bready        ), //input                           src_b_bready,
    .src_ar_arid    (pciecfg_axi_slv_256_arid          ), //input  [AXI_ID_WIDTH-1:0]       src_ar_arid,
    .src_ar_araddr  (pciecfg_axi_slv_256_araddr        ), //input  [AXI_ADDR_WIDTH-1:0]     src_ar_araddr,
    .src_ar_arlen   (pciecfg_axi_slv_256_arlen         ), //input  [7:0]                    src_ar_arlen,
    .src_ar_arsize  (pciecfg_axi_slv_256_arsize        ), //input  [2:0]                    src_ar_arsize,
    .src_ar_arburst (pciecfg_axi_slv_256_arburst       ), //input  [1:0]                    src_ar_arburst,
    .src_ar_arlock  (pciecfg_axi_slv_256_arlock        ), //input                           src_ar_arlock,
    .src_ar_arcache (pciecfg_axi_slv_256_arcache       ), //input  [3:0]                    src_ar_arcache,
    .src_ar_arprot  (pciecfg_axi_slv_256_arprot        ), //input  [2:0]                    src_ar_arprot,
    .src_ar_arregion(pciecfg_axi_slv_256_arregion      ), //input  [3:0]                    src_ar_arregion,
    .src_ar_arqos   (pciecfg_axi_slv_256_arqos         ), //input  [3:0]                    src_ar_arqos,
    .src_ar_aruser  (pciecfg_axi_slv_256_aruser        ), //input  [AXI_USER_WIDTH-1:0]     src_ar_aruser,
    .src_ar_arvalid (pciecfg_axi_slv_256_arvalid       ), //input                           src_ar_arvalid,
    .src_ar_arready (pciecfg_axi_slv_256_arready       ), //output                          src_ar_arready,
    .src_r_rid      (pciecfg_axi_slv_256_rid           ), //output [AXI_ID_WIDTH-1:0]       src_r_rid,
    .src_r_rdata    (pciecfg_axi_slv_256_rdata         ), //output [AXI_DATA_WIDTH-1:0]     src_r_rdata,
    .src_r_rresp    (pciecfg_axi_slv_256_rresp         ), //output [1:0]                    src_r_rresp,
    .src_r_rlast    (pciecfg_axi_slv_256_rlast         ), //output                          src_r_rlast,
    .src_r_ruser    (pciecfg_axi_slv_256_ruser         ), //output [AXI_USER_WIDTH-1:0]     src_r_ruser,
    .src_r_rvalid   (pciecfg_axi_slv_256_rvalid        ), //output                          src_r_rvalid,
    .src_r_rready   (pciecfg_axi_slv_256_rready        ), //input                           src_r_rready, 

    .dst_clk_i      (u_xdma_0_top_axi_aclk_i           ), //input                           dst_clk_i,
    .dst_rst_ni     (u_xdma_0_top_axi_aresetn_i        ), //input                           dst_rst_ni,

    .dst_aw_awid    (pciecfg_axi_slv_256_sync_awid     ), //output [AXI_ID_WIDTH-1:0]       dst_aw_awid,
    .dst_aw_awaddr  (pciecfg_axi_slv_256_sync_awaddr   ), //output [AXI_ADDR_WIDTH-1:0]     dst_aw_awaddr,
    .dst_aw_awlen   (pciecfg_axi_slv_256_sync_awlen    ), //output [7:0]                    dst_aw_awlen,
    .dst_aw_awsize  (pciecfg_axi_slv_256_sync_awsize   ), //output [2:0]                    dst_aw_awsize,
    .dst_aw_awburst (pciecfg_axi_slv_256_sync_awburst  ), //output [1:0]                    dst_aw_awburst,
    .dst_aw_awlock  (pciecfg_axi_slv_256_sync_awlock   ), //output                          dst_aw_awlock,
    .dst_aw_awcache (pciecfg_axi_slv_256_sync_awcache  ), //output [3:0]                    dst_aw_awcache,
    .dst_aw_awprot  (pciecfg_axi_slv_256_sync_awprot   ), //output [2:0]                    dst_aw_awprot,
    .dst_aw_awregion(pciecfg_axi_slv_256_sync_awregion ), //output [3:0]                    dst_aw_awregion,
    .dst_aw_awqos   (pciecfg_axi_slv_256_sync_awqos    ), //output [3:0]                    dst_aw_awqos,
    .dst_aw_awuser  (pciecfg_axi_slv_256_sync_awuser   ), //output [AXI_USER_WIDTH-1:0]     dst_aw_awuser,//
    .dst_aw_awvalid (pciecfg_axi_slv_256_sync_awvalid  ), //output                          dst_aw_awvalid,
    .dst_aw_awready (pciecfg_axi_slv_256_sync_awready  ), //input                           dst_aw_awready,
    .dst_w_wdata    (pciecfg_axi_slv_256_sync_wdata    ), //output [AXI_DATA_WIDTH-1:0]     dst_w_wdata,
    .dst_w_wstrb    (pciecfg_axi_slv_256_sync_wstrb    ), //output [AXI_DATA_WIDTH/8-1:0]   dst_w_wstrb,
    .dst_w_wlast    (pciecfg_axi_slv_256_sync_wlast    ), //output                          dst_w_wlast,
    .dst_w_wuser    (pciecfg_axi_slv_256_sync_wuser    ), //output [AXI_USER_WIDTH-1:0]     dst_w_wuser,
    .dst_w_wvalid   (pciecfg_axi_slv_256_sync_wvalid   ), //output                          dst_w_wvalid,
    .dst_w_wready   (pciecfg_axi_slv_256_sync_wready   ), //input                           dst_w_wready,
    .dst_b_bid      (pciecfg_axi_slv_256_sync_bid      ), //input  [AXI_ID_WIDTH-1:0]       dst_b_bid,
    .dst_b_bresp    (pciecfg_axi_slv_256_sync_bresp    ), //input  [1:0]                    dst_b_bresp,
    .dst_b_buser    (pciecfg_axi_slv_256_sync_buser    ), //input  [AXI_USER_WIDTH-1:0]     dst_b_buser,
    .dst_b_bvalid   (pciecfg_axi_slv_256_sync_bvalid   ), //input                           dst_b_bvalid,
    .dst_b_bready   (pciecfg_axi_slv_256_sync_bready   ), //output                          dst_b_bready,
    .dst_ar_arid    (pciecfg_axi_slv_256_sync_arid     ), //output [AXI_ID_WIDTH-1:0]       dst_ar_arid,
    .dst_ar_araddr  (pciecfg_axi_slv_256_sync_araddr   ), //output [AXI_ADDR_WIDTH-1:0]     dst_ar_araddr,
    .dst_ar_arlen   (pciecfg_axi_slv_256_sync_arlen    ), //output [7:0]                    dst_ar_arlen,
    .dst_ar_arsize  (pciecfg_axi_slv_256_sync_arsize   ), //output [2:0]                    dst_ar_arsize,
    .dst_ar_arburst (pciecfg_axi_slv_256_sync_arburst  ), //output [1:0]                    dst_ar_arburst,
    .dst_ar_arlock  (pciecfg_axi_slv_256_sync_arlock   ), //output                          dst_ar_arlock,
    .dst_ar_arcache (pciecfg_axi_slv_256_sync_arcache  ), //output [3:0]                    dst_ar_arcache,
    .dst_ar_arprot  (pciecfg_axi_slv_256_sync_arprot   ), //output [2:0]                    dst_ar_arprot,
    .dst_ar_arregion(pciecfg_axi_slv_256_sync_arregion ), //output [3:0]                    dst_ar_arregion,
    .dst_ar_arqos   (pciecfg_axi_slv_256_sync_arqos    ), //output [3:0]                    dst_ar_arqos,
    .dst_ar_aruser  (pciecfg_axi_slv_256_sync_aruser   ), //output [AXI_USER_WIDTH-1:0]     dst_ar_aruser,
    .dst_ar_arvalid (pciecfg_axi_slv_256_sync_arvalid  ), //output                          dst_ar_arvalid,
    .dst_ar_arready (pciecfg_axi_slv_256_sync_arready  ), //input                           dst_ar_arready,
    .dst_r_rid      (pciecfg_axi_slv_256_sync_rid      ), //input  [AXI_ID_WIDTH-1:0]       dst_r_rid,
    .dst_r_rdata    (pciecfg_axi_slv_256_sync_rdata    ), //input  [AXI_DATA_WIDTH-1:0]     dst_r_rdata,
    .dst_r_rresp    (pciecfg_axi_slv_256_sync_rresp    ), //input  [1:0]                    dst_r_rresp,
    .dst_r_rlast    (pciecfg_axi_slv_256_sync_rlast    ), //input                           dst_r_rlast,
    .dst_r_ruser    (pciecfg_axi_slv_256_sync_ruser    ), //input  [AXI_USER_WIDTH-1:0]     dst_r_ruser,
    .dst_r_rvalid   (pciecfg_axi_slv_256_sync_rvalid   ), //input                           dst_r_rvalid,
    .dst_r_rready   (pciecfg_axi_slv_256_sync_rready   )  //output                          dst_r_rready 
);

axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(32),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_pciecfg_axi_slv_256_to_32 
(
    .clk_i          (u_xdma_0_top_axi_aclk_i           ), //input                                       clk_i,
    .rst_ni         (u_xdma_0_top_axi_aresetn_i        ), //input                                       rst_ni,

    .slv_aw_awid    (pciecfg_axi_slv_256_sync_awid     ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (pciecfg_axi_slv_256_sync_awaddr   ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (pciecfg_axi_slv_256_sync_awlen    ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (pciecfg_axi_slv_256_sync_awsize   ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (pciecfg_axi_slv_256_sync_awburst  ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (pciecfg_axi_slv_256_sync_awlock   ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (pciecfg_axi_slv_256_sync_awcache  ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (pciecfg_axi_slv_256_sync_awprot   ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(pciecfg_axi_slv_256_sync_awregion ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (pciecfg_axi_slv_256_sync_awqos    ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (pciecfg_axi_slv_256_sync_awuser   ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (pciecfg_axi_slv_256_sync_awvalid  ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (pciecfg_axi_slv_256_sync_awready  ), //output                                      slv_aw_awready,
    .slv_w_wdata    (pciecfg_axi_slv_256_sync_wdata    ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (pciecfg_axi_slv_256_sync_wstrb    ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (pciecfg_axi_slv_256_sync_wlast    ), //input                                       slv_w_wlast,
    .slv_w_wuser    (pciecfg_axi_slv_256_sync_wuser    ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (pciecfg_axi_slv_256_sync_wvalid   ), //input                                       slv_w_wvalid,
    .slv_w_wready   (pciecfg_axi_slv_256_sync_wready   ), //output                                      slv_w_wready,
    .slv_b_bid      (pciecfg_axi_slv_256_sync_bid      ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (pciecfg_axi_slv_256_sync_bresp    ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (pciecfg_axi_slv_256_sync_buser    ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (pciecfg_axi_slv_256_sync_bvalid   ), //output                                      slv_b_bvalid,
    .slv_b_bready   (pciecfg_axi_slv_256_sync_bready   ), //input                                       slv_b_bready,
    .slv_ar_arid    (pciecfg_axi_slv_256_sync_arid     ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (pciecfg_axi_slv_256_sync_araddr   ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (pciecfg_axi_slv_256_sync_arlen    ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (pciecfg_axi_slv_256_sync_arsize   ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (pciecfg_axi_slv_256_sync_arburst  ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (pciecfg_axi_slv_256_sync_arlock   ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (pciecfg_axi_slv_256_sync_arcache  ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (pciecfg_axi_slv_256_sync_arprot   ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(pciecfg_axi_slv_256_sync_arregion ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (pciecfg_axi_slv_256_sync_arqos    ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (pciecfg_axi_slv_256_sync_aruser   ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (pciecfg_axi_slv_256_sync_arvalid  ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (pciecfg_axi_slv_256_sync_arready  ), //output                                      slv_ar_arready,
    .slv_r_rid      (pciecfg_axi_slv_256_sync_rid      ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (pciecfg_axi_slv_256_sync_rdata    ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (pciecfg_axi_slv_256_sync_rresp    ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (pciecfg_axi_slv_256_sync_rlast    ), //output                                      slv_r_rlast,
    .slv_r_ruser    (pciecfg_axi_slv_256_sync_ruser    ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (pciecfg_axi_slv_256_sync_rvalid   ), //output                                      slv_r_rvalid,
    .slv_r_rready   (pciecfg_axi_slv_256_sync_rready   ), //input                                       slv_r_rready, 

    .mst_aw_awid    (pciecfg_axi_slv_32_awid           ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (pciecfg_axi_slv_32_awaddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (pciecfg_axi_slv_32_awlen          ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (pciecfg_axi_slv_32_awsize         ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (pciecfg_axi_slv_32_awburst        ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (pciecfg_axi_slv_32_awlock         ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (pciecfg_axi_slv_32_awcache        ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (pciecfg_axi_slv_32_awprot         ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(pciecfg_axi_slv_32_awregion       ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (pciecfg_axi_slv_32_awqos          ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (pciecfg_axi_slv_32_awuser         ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (pciecfg_axi_slv_32_awvalid        ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (pciecfg_axi_slv_32_awready        ), //input                                       mst_aw_awready,
    .mst_w_wdata    (pciecfg_axi_slv_32_wdata          ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (pciecfg_axi_slv_32_wstrb          ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (pciecfg_axi_slv_32_wlast          ), //output                                      mst_w_wlast,
    .mst_w_wuser    (pciecfg_axi_slv_32_wuser          ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (pciecfg_axi_slv_32_wvalid         ), //output                                      mst_w_wvalid,
    .mst_w_wready   (pciecfg_axi_slv_32_wready         ), //input                                       mst_w_wready,
    .mst_b_bid      (pciecfg_axi_slv_32_bid            ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (pciecfg_axi_slv_32_bresp          ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (pciecfg_axi_slv_32_buser          ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (pciecfg_axi_slv_32_bvalid         ), //input                                       mst_b_bvalid,
    .mst_b_bready   (pciecfg_axi_slv_32_bready         ), //output                                      mst_b_bready,
    .mst_ar_arid    (pciecfg_axi_slv_32_arid           ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (pciecfg_axi_slv_32_araddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (pciecfg_axi_slv_32_arlen          ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (pciecfg_axi_slv_32_arsize         ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (pciecfg_axi_slv_32_arburst        ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (pciecfg_axi_slv_32_arlock         ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (pciecfg_axi_slv_32_arcache        ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (pciecfg_axi_slv_32_arprot         ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(pciecfg_axi_slv_32_arregion       ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (pciecfg_axi_slv_32_arqos          ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (pciecfg_axi_slv_32_aruser         ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (pciecfg_axi_slv_32_arvalid        ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (pciecfg_axi_slv_32_arready        ), //input                                       mst_ar_arready,
    .mst_r_rid      (pciecfg_axi_slv_32_rid            ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (pciecfg_axi_slv_32_rdata          ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (pciecfg_axi_slv_32_rresp          ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (pciecfg_axi_slv_32_rlast          ), //input                                       mst_r_rlast,
    .mst_r_ruser    (pciecfg_axi_slv_32_ruser          ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (pciecfg_axi_slv_32_rvalid         ), //input                                       mst_r_rvalid,
    .mst_r_rready   (pciecfg_axi_slv_32_rready         )  //output                                      mst_r_rready 
);

axi_cut_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(32 ),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  )
) u_pciecfg_axi_slv_32_cut 
(
    .clk_i          (u_xdma_0_top_axi_aclk_i           ), //input                           dst_clk_i,
    .rst_ni         (u_xdma_0_top_axi_aresetn_i        ), //input                           dst_rst_ni,

    .src_aw_awid    (pciecfg_axi_slv_32_awid          ), //input  [AXI_ID_WIDTH-1:0]       src_aw_awid,
    .src_aw_awaddr  (pciecfg_axi_slv_32_awaddr        ), //input  [AXI_ADDR_WIDTH-1:0]     src_aw_awaddr,
    .src_aw_awlen   (pciecfg_axi_slv_32_awlen         ), //input  [7:0]                    src_aw_awlen,
    .src_aw_awsize  (pciecfg_axi_slv_32_awsize        ), //input  [2:0]                    src_aw_awsize,
    .src_aw_awburst (pciecfg_axi_slv_32_awburst       ), //input  [1:0]                    src_aw_awburst,
    .src_aw_awlock  (pciecfg_axi_slv_32_awlock        ), //input                           src_aw_awlock,
    .src_aw_awcache (pciecfg_axi_slv_32_awcache       ), //input  [3:0]                    src_aw_awcache,
    .src_aw_awprot  (pciecfg_axi_slv_32_awprot        ), //input  [2:0]                    src_aw_awprot,
    .src_aw_awregion(pciecfg_axi_slv_32_awregion      ), //input  [3:0]                    src_aw_awregion,
    .src_aw_awqos   (pciecfg_axi_slv_32_awqos         ), //input  [3:0]                    src_aw_awqos,
    .src_aw_awuser  (pciecfg_axi_slv_32_awuser        ), //input  [AXI_USER_WIDTH-1:0]     src_aw_awuser,//
    .src_aw_awvalid (pciecfg_axi_slv_32_awvalid       ), //input                           src_aw_awvalid,
    .src_aw_awready (pciecfg_axi_slv_32_awready       ), //output                          src_aw_awready,
    .src_w_wdata    (pciecfg_axi_slv_32_wdata         ), //input  [AXI_DATA_WIDTH-1:0]     src_w_wdata,
    .src_w_wstrb    (pciecfg_axi_slv_32_wstrb         ), //input  [AXI_DATA_WIDTH/8-1:0]   src_w_wstrb,
    .src_w_wlast    (pciecfg_axi_slv_32_wlast         ), //input                           src_w_wlast,
    .src_w_wuser    (pciecfg_axi_slv_32_wuser         ), //input  [AXI_USER_WIDTH-1:0]     src_w_wuser,
    .src_w_wvalid   (pciecfg_axi_slv_32_wvalid        ), //input                           src_w_wvalid,
    .src_w_wready   (pciecfg_axi_slv_32_wready        ), //output                          src_w_wready,
    .src_b_bid      (pciecfg_axi_slv_32_bid           ), //output [AXI_ID_WIDTH-1:0]       src_b_bid,
    .src_b_bresp    (pciecfg_axi_slv_32_bresp         ), //output [1:0]                    src_b_bresp,
    .src_b_buser    (pciecfg_axi_slv_32_buser         ), //output [AXI_USER_WIDTH-1:0]     src_b_buser,
    .src_b_bvalid   (pciecfg_axi_slv_32_bvalid        ), //output                          src_b_bvalid,
    .src_b_bready   (pciecfg_axi_slv_32_bready        ), //input                           src_b_bready,
    .src_ar_arid    (pciecfg_axi_slv_32_arid          ), //input  [AXI_ID_WIDTH-1:0]       src_ar_arid,
    .src_ar_araddr  (pciecfg_axi_slv_32_araddr        ), //input  [AXI_ADDR_WIDTH-1:0]     src_ar_araddr,
    .src_ar_arlen   (pciecfg_axi_slv_32_arlen         ), //input  [7:0]                    src_ar_arlen,
    .src_ar_arsize  (pciecfg_axi_slv_32_arsize        ), //input  [2:0]                    src_ar_arsize,
    .src_ar_arburst (pciecfg_axi_slv_32_arburst       ), //input  [1:0]                    src_ar_arburst,
    .src_ar_arlock  (pciecfg_axi_slv_32_arlock        ), //input                           src_ar_arlock,
    .src_ar_arcache (pciecfg_axi_slv_32_arcache       ), //input  [3:0]                    src_ar_arcache,
    .src_ar_arprot  (pciecfg_axi_slv_32_arprot        ), //input  [2:0]                    src_ar_arprot,
    .src_ar_arregion(pciecfg_axi_slv_32_arregion      ), //input  [3:0]                    src_ar_arregion,
    .src_ar_arqos   (pciecfg_axi_slv_32_arqos         ), //input  [3:0]                    src_ar_arqos,
    .src_ar_aruser  (pciecfg_axi_slv_32_aruser        ), //input  [AXI_USER_WIDTH-1:0]     src_ar_aruser,
    .src_ar_arvalid (pciecfg_axi_slv_32_arvalid       ), //input                           src_ar_arvalid,
    .src_ar_arready (pciecfg_axi_slv_32_arready       ), //output                          src_ar_arready,
    .src_r_rid      (pciecfg_axi_slv_32_rid           ), //output [AXI_ID_WIDTH-1:0]       src_r_rid,
    .src_r_rdata    (pciecfg_axi_slv_32_rdata         ), //output [AXI_DATA_WIDTH-1:0]     src_r_rdata,
    .src_r_rresp    (pciecfg_axi_slv_32_rresp         ), //output [1:0]                    src_r_rresp,
    .src_r_rlast    (pciecfg_axi_slv_32_rlast         ), //output                          src_r_rlast,
    .src_r_ruser    (pciecfg_axi_slv_32_ruser         ), //output [AXI_USER_WIDTH-1:0]     src_r_ruser,
    .src_r_rvalid   (pciecfg_axi_slv_32_rvalid        ), //output                          src_r_rvalid,
    .src_r_rready   (pciecfg_axi_slv_32_rready        ), //input                           src_r_rready, 

    .dst_aw_awid    (pciecfg_axi_slv_32_cut_awid      ), //output [AXI_ID_WIDTH-1:0]       dst_aw_awid,
    .dst_aw_awaddr  (pciecfg_axi_slv_32_cut_awaddr    ), //output [AXI_ADDR_WIDTH-1:0]     dst_aw_awaddr,
    .dst_aw_awlen   (pciecfg_axi_slv_32_cut_awlen     ), //output [7:0]                    dst_aw_awlen,
    .dst_aw_awsize  (pciecfg_axi_slv_32_cut_awsize    ), //output [2:0]                    dst_aw_awsize,
    .dst_aw_awburst (pciecfg_axi_slv_32_cut_awburst   ), //output [1:0]                    dst_aw_awburst,
    .dst_aw_awlock  (pciecfg_axi_slv_32_cut_awlock    ), //output                          dst_aw_awlock,
    .dst_aw_awcache (pciecfg_axi_slv_32_cut_awcache   ), //output [3:0]                    dst_aw_awcache,
    .dst_aw_awprot  (pciecfg_axi_slv_32_cut_awprot    ), //output [2:0]                    dst_aw_awprot,
    .dst_aw_awregion(pciecfg_axi_slv_32_cut_awregion  ), //output [3:0]                    dst_aw_awregion,
    .dst_aw_awqos   (pciecfg_axi_slv_32_cut_awqos     ), //output [3:0]                    dst_aw_awqos,
    .dst_aw_awuser  (pciecfg_axi_slv_32_cut_awuser    ), //output [AXI_USER_WIDTH-1:0]     dst_aw_awuser,//
    .dst_aw_awvalid (pciecfg_axi_slv_32_cut_awvalid   ), //output                          dst_aw_awvalid,
    .dst_aw_awready (pciecfg_axi_slv_32_cut_awready   ), //input                           dst_aw_awready,
    .dst_w_wdata    (pciecfg_axi_slv_32_cut_wdata     ), //output [AXI_DATA_WIDTH-1:0]     dst_w_wdata,
    .dst_w_wstrb    (pciecfg_axi_slv_32_cut_wstrb     ), //output [AXI_DATA_WIDTH/8-1:0]   dst_w_wstrb,
    .dst_w_wlast    (pciecfg_axi_slv_32_cut_wlast     ), //output                          dst_w_wlast,
    .dst_w_wuser    (pciecfg_axi_slv_32_cut_wuser     ), //output [AXI_USER_WIDTH-1:0]     dst_w_wuser,
    .dst_w_wvalid   (pciecfg_axi_slv_32_cut_wvalid    ), //output                          dst_w_wvalid,
    .dst_w_wready   (pciecfg_axi_slv_32_cut_wready    ), //input                           dst_w_wready,
    .dst_b_bid      (pciecfg_axi_slv_32_cut_bid       ), //input  [AXI_ID_WIDTH-1:0]       dst_b_bid,
    .dst_b_bresp    (pciecfg_axi_slv_32_cut_bresp     ), //input  [1:0]                    dst_b_bresp,
    .dst_b_buser    (pciecfg_axi_slv_32_cut_buser     ), //input  [AXI_USER_WIDTH-1:0]     dst_b_buser,
    .dst_b_bvalid   (pciecfg_axi_slv_32_cut_bvalid    ), //input                           dst_b_bvalid,
    .dst_b_bready   (pciecfg_axi_slv_32_cut_bready    ), //output                          dst_b_bready,
    .dst_ar_arid    (pciecfg_axi_slv_32_cut_arid      ), //output [AXI_ID_WIDTH-1:0]       dst_ar_arid,
    .dst_ar_araddr  (pciecfg_axi_slv_32_cut_araddr    ), //output [AXI_ADDR_WIDTH-1:0]     dst_ar_araddr,
    .dst_ar_arlen   (pciecfg_axi_slv_32_cut_arlen     ), //output [7:0]                    dst_ar_arlen,
    .dst_ar_arsize  (pciecfg_axi_slv_32_cut_arsize    ), //output [2:0]                    dst_ar_arsize,
    .dst_ar_arburst (pciecfg_axi_slv_32_cut_arburst   ), //output [1:0]                    dst_ar_arburst,
    .dst_ar_arlock  (pciecfg_axi_slv_32_cut_arlock    ), //output                          dst_ar_arlock,
    .dst_ar_arcache (pciecfg_axi_slv_32_cut_arcache   ), //output [3:0]                    dst_ar_arcache,
    .dst_ar_arprot  (pciecfg_axi_slv_32_cut_arprot    ), //output [2:0]                    dst_ar_arprot,
    .dst_ar_arregion(pciecfg_axi_slv_32_cut_arregion  ), //output [3:0]                    dst_ar_arregion,
    .dst_ar_arqos   (pciecfg_axi_slv_32_cut_arqos     ), //output [3:0]                    dst_ar_arqos,
    .dst_ar_aruser  (pciecfg_axi_slv_32_cut_aruser    ), //output [AXI_USER_WIDTH-1:0]     dst_ar_aruser,
    .dst_ar_arvalid (pciecfg_axi_slv_32_cut_arvalid   ), //output                          dst_ar_arvalid,
    .dst_ar_arready (pciecfg_axi_slv_32_cut_arready   ), //input                           dst_ar_arready,
    .dst_r_rid      (pciecfg_axi_slv_32_cut_rid       ), //input  [AXI_ID_WIDTH-1:0]       dst_r_rid,
    .dst_r_rdata    (pciecfg_axi_slv_32_cut_rdata     ), //input  [AXI_DATA_WIDTH-1:0]     dst_r_rdata,
    .dst_r_rresp    (pciecfg_axi_slv_32_cut_rresp     ), //input  [1:0]                    dst_r_rresp,
    .dst_r_rlast    (pciecfg_axi_slv_32_cut_rlast     ), //input                           dst_r_rlast,
    .dst_r_ruser    (pciecfg_axi_slv_32_cut_ruser     ), //input  [AXI_USER_WIDTH-1:0]     dst_r_ruser,
    .dst_r_rvalid   (pciecfg_axi_slv_32_cut_rvalid    ), //input                           dst_r_rvalid,
    .dst_r_rready   (pciecfg_axi_slv_32_cut_rready    )  //output                          dst_r_rready 
);

axi_to_axilite_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(32 ),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  )
) u_pciecfg_axi_to_axil_slv
(
    .clk_i          (u_xdma_0_top_axi_aclk_i                ), //input                           clk_i,
    .rst_ni         (u_xdma_0_top_axi_aresetn_i             ), //input                           rst_ni,

    .slv_aw_awid    (pciecfg_axi_slv_32_cut_awid            ), //input  [AXI_ID_WIDTH-1:0]       slv_aw_awid,
    .slv_aw_awaddr  (pciecfg_axi_slv_32_cut_awaddr          ), //input  [AXI_ADDR_WIDTH-1:0]     slv_aw_awaddr,
    .slv_aw_awlen   (pciecfg_axi_slv_32_cut_awlen           ), //input  [7:0]                    slv_aw_awlen,
    .slv_aw_awsize  (pciecfg_axi_slv_32_cut_awsize          ), //input  [2:0]                    slv_aw_awsize,
    .slv_aw_awburst (pciecfg_axi_slv_32_cut_awburst         ), //input  [1:0]                    slv_aw_awburst,
    .slv_aw_awlock  (pciecfg_axi_slv_32_cut_awlock          ), //input                           slv_aw_awlock,
    .slv_aw_awcache (pciecfg_axi_slv_32_cut_awcache         ), //input  [3:0]                    slv_aw_awcache,
    .slv_aw_awprot  (pciecfg_axi_slv_32_cut_awprot          ), //input  [2:0]                    slv_aw_awprot,
    .slv_aw_awregion(pciecfg_axi_slv_32_cut_awregion        ), //input  [3:0]                    slv_aw_awregion,
    .slv_aw_awqos   (pciecfg_axi_slv_32_cut_awqos           ), //input  [3:0]                    slv_aw_awqos,
    .slv_aw_awuser  (pciecfg_axi_slv_32_cut_awuser          ), //input                           slv_aw_awuser,//
    .slv_aw_awvalid (pciecfg_axi_slv_32_cut_awvalid         ), //input                           slv_aw_awvalid,
    .slv_aw_awready (pciecfg_axi_slv_32_cut_awready         ), //output                          slv_aw_awready,
    .slv_w_wdata    (pciecfg_axi_slv_32_cut_wdata           ), //input  [AXI_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (pciecfg_axi_slv_32_cut_wstrb           ), //input  [AXI_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (pciecfg_axi_slv_32_cut_wlast           ), //input                           slv_w_wlast,
    .slv_w_wuser    (pciecfg_axi_slv_32_cut_wuser           ), //input                           slv_w_wuser,
    .slv_w_wvalid   (pciecfg_axi_slv_32_cut_wvalid          ), //input                           slv_w_wvalid,
    .slv_w_wready   (pciecfg_axi_slv_32_cut_wready          ), //output                          slv_w_wready,
    .slv_b_bid      (pciecfg_axi_slv_32_cut_bid             ), //output [AXI_ID_WIDTH-1:0]       slv_b_bid,
    .slv_b_bresp    (pciecfg_axi_slv_32_cut_bresp           ), //output [1:0]                    slv_b_bresp,
    .slv_b_buser    (pciecfg_axi_slv_32_cut_buser           ), //output                          slv_b_buser,
    .slv_b_bvalid   (pciecfg_axi_slv_32_cut_bvalid          ), //output                          slv_b_bvalid,
    .slv_b_bready   (pciecfg_axi_slv_32_cut_bready          ), //input                           slv_b_bready,
    .slv_ar_arid    (pciecfg_axi_slv_32_cut_arid            ), //input  [AXI_ID_WIDTH-1:0]       slv_ar_arid,
    .slv_ar_araddr  (pciecfg_axi_slv_32_cut_araddr          ), //input  [AXI_ADDR_WIDTH-1:0]     slv_ar_araddr,
    .slv_ar_arlen   (pciecfg_axi_slv_32_cut_arlen           ), //input  [7:0]                    slv_ar_arlen,
    .slv_ar_arsize  (pciecfg_axi_slv_32_cut_arsize          ), //input  [2:0]                    slv_ar_arsize,
    .slv_ar_arburst (pciecfg_axi_slv_32_cut_arburst         ), //input  [1:0]                    slv_ar_arburst,
    .slv_ar_arlock  (pciecfg_axi_slv_32_cut_arlock          ), //input                           slv_ar_arlock,
    .slv_ar_arcache (pciecfg_axi_slv_32_cut_arcache         ), //input  [3:0]                    slv_ar_arcache,
    .slv_ar_arprot  (pciecfg_axi_slv_32_cut_arprot          ), //input  [2:0]                    slv_ar_arprot,
    .slv_ar_arregion(pciecfg_axi_slv_32_cut_arregion        ), //input  [3:0]                    slv_ar_arregion,
    .slv_ar_arqos   (pciecfg_axi_slv_32_cut_arqos           ), //input  [3:0]                    slv_ar_arqos,
    .slv_ar_aruser  (pciecfg_axi_slv_32_cut_aruser          ), //input                           slv_ar_aruser,
    .slv_ar_arvalid (pciecfg_axi_slv_32_cut_arvalid         ), //input                           slv_ar_arvalid,
    .slv_ar_arready (pciecfg_axi_slv_32_cut_arready         ), //output                          slv_ar_arready,
    .slv_r_rid      (pciecfg_axi_slv_32_cut_rid             ), //output [AXI_ID_WIDTH-1:0]       slv_r_rid,
    .slv_r_rdata    (pciecfg_axi_slv_32_cut_rdata           ), //output [AXI_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (pciecfg_axi_slv_32_cut_rresp           ), //output [1:0]                    slv_r_rresp,
    .slv_r_rlast    (pciecfg_axi_slv_32_cut_rlast           ), //output                          slv_r_rlast,
    .slv_r_ruser    (pciecfg_axi_slv_32_cut_ruser           ), //output                          slv_r_ruser,
    .slv_r_rvalid   (pciecfg_axi_slv_32_cut_rvalid          ), //output                          slv_r_rvalid,
    .slv_r_rready   (pciecfg_axi_slv_32_cut_rready          ), //input                           slv_r_rready, 

    .mst_aw_awaddr  (u_xdma_0_top_s_axil_awaddr_s           ), //output [AXI_ADDR_WIDTH-1:0]     mst_aw_awaddr,
    .mst_aw_awprot  (u_xdma_0_top_s_axil_awprot_o           ), //output [2:0]                    mst_aw_awprot,
    .mst_aw_awvalid (u_xdma_0_top_s_axil_awvalid_o          ), //output                          mst_aw_awvalid,
    .mst_aw_awready (u_xdma_0_top_s_axil_awready_i          ), //input                           mst_aw_awready,
    .mst_w_wdata    (u_xdma_0_top_s_axil_wdata_o            ), //output [AXI_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (u_xdma_0_top_s_axil_wstrb_o            ), //output [AXI_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wvalid   (u_xdma_0_top_s_axil_wvalid_o           ), //output                          mst_w_wvalid,
    .mst_w_wready   (u_xdma_0_top_s_axil_wready_i           ), //input                           mst_w_wready,
    .mst_b_bresp    (u_xdma_0_top_s_axil_bresp_i            ), //input  [1:0]                    mst_b_bresp,
    .mst_b_bvalid   (u_xdma_0_top_s_axil_bvalid_i           ), //input                           mst_b_bvalid,
    .mst_b_bready   (u_xdma_0_top_s_axil_bready_o           ), //output                          mst_b_bready,
    .mst_ar_araddr  (u_xdma_0_top_s_axil_araddr_s           ), //output [AXI_ADDR_WIDTH-1:0]     mst_ar_araddr,
    .mst_ar_arprot  (u_xdma_0_top_s_axil_arprot_o           ), //output [2:0]                    mst_ar_arprot,
    .mst_ar_arvalid (u_xdma_0_top_s_axil_arvalid_o          ), //output                          mst_ar_arvalid,
    .mst_ar_arready (u_xdma_0_top_s_axil_arready_i          ), //input                           mst_ar_arready,
    .mst_r_rdata    (u_xdma_0_top_s_axil_rdata_i            ), //input  [AXI_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (u_xdma_0_top_s_axil_rresp_i            ), //input  [1:0]                    mst_r_rresp,
    .mst_r_rvalid   (u_xdma_0_top_s_axil_rvalid_i           ), //input                           mst_r_rvalid,
    .mst_r_rready   (u_xdma_0_top_s_axil_rready_o           )  //output                          mst_r_rready 
);


axi_cdc_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(256),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  ),
  .LOG_DEPTH     (2  )
) u_ddr_axi_slv_256_cdc 
(
    .src_clk_i      (u_uncore_top_riscv_clk_i                  ), //input                           src_clk_i,
    .src_rst_ni     (u_uncore_top_core_nic_rst_n_i             ), //input                           src_rst_ni,

    .src_aw_awid    (ddr_axi_slv_256_awid                      ), //input  [AXI_ID_WIDTH-1:0]       src_aw_awid,
    .src_aw_awaddr  (ddr_axi_slv_256_awaddr                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_aw_awaddr,
    .src_aw_awlen   (ddr_axi_slv_256_awlen                     ), //input  [7:0]                    src_aw_awlen,
    .src_aw_awsize  (ddr_axi_slv_256_awsize                    ), //input  [2:0]                    src_aw_awsize,
    .src_aw_awburst (ddr_axi_slv_256_awburst                   ), //input  [1:0]                    src_aw_awburst,
    .src_aw_awlock  (ddr_axi_slv_256_awlock                    ), //input                           src_aw_awlock,
    .src_aw_awcache (ddr_axi_slv_256_awcache                   ), //input  [3:0]                    src_aw_awcache,
    .src_aw_awprot  (ddr_axi_slv_256_awprot                    ), //input  [2:0]                    src_aw_awprot,
    .src_aw_awregion(ddr_axi_slv_256_awregion                  ), //input  [3:0]                    src_aw_awregion,
    .src_aw_awqos   (ddr_axi_slv_256_awqos                     ), //input  [3:0]                    src_aw_awqos,
    .src_aw_awuser  (ddr_axi_slv_256_awuser                    ), //input  [AXI_USER_WIDTH-1:0]     src_aw_awuser,//
    .src_aw_awvalid (ddr_axi_slv_256_awvalid                   ), //input                           src_aw_awvalid,
    .src_aw_awready (ddr_axi_slv_256_awready                   ), //output                          src_aw_awready,
    .src_w_wdata    (ddr_axi_slv_256_wdata                     ), //input  [AXI_DATA_WIDTH-1:0]     src_w_wdata,
    .src_w_wstrb    (ddr_axi_slv_256_wstrb                     ), //input  [AXI_DATA_WIDTH/8-1:0]   src_w_wstrb,
    .src_w_wlast    (ddr_axi_slv_256_wlast                     ), //input                           src_w_wlast,
    .src_w_wuser    (ddr_axi_slv_256_wuser                     ), //input  [AXI_USER_WIDTH-1:0]     src_w_wuser,
    .src_w_wvalid   (ddr_axi_slv_256_wvalid                    ), //input                           src_w_wvalid,
    .src_w_wready   (ddr_axi_slv_256_wready                    ), //output                          src_w_wready,
    .src_b_bid      (ddr_axi_slv_256_bid                       ), //output [AXI_ID_WIDTH-1:0]       src_b_bid,
    .src_b_bresp    (ddr_axi_slv_256_bresp                     ), //output [1:0]                    src_b_bresp,
    .src_b_buser    (ddr_axi_slv_256_buser                     ), //output [AXI_USER_WIDTH-1:0]     src_b_buser,
    .src_b_bvalid   (ddr_axi_slv_256_bvalid                    ), //output                          src_b_bvalid,
    .src_b_bready   (ddr_axi_slv_256_bready                    ), //input                           src_b_bready,
    .src_ar_arid    (ddr_axi_slv_256_arid                      ), //input  [AXI_ID_WIDTH-1:0]       src_ar_arid,
    .src_ar_araddr  (ddr_axi_slv_256_araddr                    ), //input  [AXI_ADDR_WIDTH-1:0]     src_ar_araddr,
    .src_ar_arlen   (ddr_axi_slv_256_arlen                     ), //input  [7:0]                    src_ar_arlen,
    .src_ar_arsize  (ddr_axi_slv_256_arsize                    ), //input  [2:0]                    src_ar_arsize,
    .src_ar_arburst (ddr_axi_slv_256_arburst                   ), //input  [1:0]                    src_ar_arburst,
    .src_ar_arlock  (ddr_axi_slv_256_arlock                    ), //input                           src_ar_arlock,
    .src_ar_arcache (ddr_axi_slv_256_arcache                   ), //input  [3:0]                    src_ar_arcache,
    .src_ar_arprot  (ddr_axi_slv_256_arprot                    ), //input  [2:0]                    src_ar_arprot,
    .src_ar_arregion(ddr_axi_slv_256_arregion                  ), //input  [3:0]                    src_ar_arregion,
    .src_ar_arqos   (ddr_axi_slv_256_arqos                     ), //input  [3:0]                    src_ar_arqos,
    .src_ar_aruser  (ddr_axi_slv_256_aruser                    ), //input  [AXI_USER_WIDTH-1:0]     src_ar_aruser,
    .src_ar_arvalid (ddr_axi_slv_256_arvalid                   ), //input                           src_ar_arvalid,
    .src_ar_arready (ddr_axi_slv_256_arready                   ), //output                          src_ar_arready,
    .src_r_rid      (ddr_axi_slv_256_rid                       ), //output [AXI_ID_WIDTH-1:0]       src_r_rid,
    .src_r_rdata    (ddr_axi_slv_256_rdata                     ), //output [AXI_DATA_WIDTH-1:0]     src_r_rdata,
    .src_r_rresp    (ddr_axi_slv_256_rresp                     ), //output [1:0]                    src_r_rresp,
    .src_r_rlast    (ddr_axi_slv_256_rlast                     ), //output                          src_r_rlast,
    .src_r_ruser    (ddr_axi_slv_256_ruser                     ), //output [AXI_USER_WIDTH-1:0]     src_r_ruser,
    .src_r_rvalid   (ddr_axi_slv_256_rvalid                    ), //output                          src_r_rvalid,
    .src_r_rready   (ddr_axi_slv_256_rready                    ), //input                           src_r_rready, 

    .dst_clk_i      (u_ddr4_0_top_c0_ddr4_ui_clk_i             ), //input                           dst_clk_i,
    .dst_rst_ni     (u_uncore_top_c0_nic_ddr4_ui_clk_sync_rst_s), //input                           dst_rst_ni,

    .dst_aw_awid    (u_ddr4_0_top_c0_ddr4_s_axi_awid_s         ), //output [AXI_ID_WIDTH-1:0]       dst_aw_awid,
    .dst_aw_awaddr  (u_ddr4_0_top_c0_ddr4_s_axi_awaddr_o       ), //output [AXI_ADDR_WIDTH-1:0]     dst_aw_awaddr,
    .dst_aw_awlen   (u_ddr4_0_top_c0_ddr4_s_axi_awlen_o        ), //output [7:0]                    dst_aw_awlen,
    .dst_aw_awsize  (u_ddr4_0_top_c0_ddr4_s_axi_awsize_o       ), //output [2:0]                    dst_aw_awsize,
    .dst_aw_awburst (u_ddr4_0_top_c0_ddr4_s_axi_awburst_o      ), //output [1:0]                    dst_aw_awburst,
    .dst_aw_awlock  (u_ddr4_0_top_c0_ddr4_s_axi_awlock_o       ), //output                          dst_aw_awlock,
    .dst_aw_awcache (u_ddr4_0_top_c0_ddr4_s_axi_awcache_o      ), //output [3:0]                    dst_aw_awcache,
    .dst_aw_awprot  (u_ddr4_0_top_c0_ddr4_s_axi_awprot_o       ), //output [2:0]                    dst_aw_awprot,
    .dst_aw_awregion(/*no connection*/                         ), //output [3:0]                    dst_aw_awregion,
    .dst_aw_awqos   (/*no connection*/                         ), //output [3:0]                    dst_aw_awqos,
    .dst_aw_awuser  (/*no connection*/                         ), //output [AXI_USER_WIDTH-1:0]     dst_aw_awuser,//
    .dst_aw_awvalid (u_ddr4_0_top_c0_ddr4_s_axi_awvalid_o      ), //output                          dst_aw_awvalid,
    .dst_aw_awready (u_ddr4_0_top_c0_ddr4_s_axi_awready_i      ), //input                           dst_aw_awready,
    .dst_w_wdata    (u_ddr4_0_top_c0_ddr4_s_axi_wdata_o        ), //output [AXI_DATA_WIDTH-1:0]     dst_w_wdata,
    .dst_w_wstrb    (u_ddr4_0_top_c0_ddr4_s_axi_wstrb_o        ), //output [AXI_DATA_WIDTH/8-1:0]   dst_w_wstrb,
    .dst_w_wlast    (u_ddr4_0_top_c0_ddr4_s_axi_wlast_o        ), //output                          dst_w_wlast,
    .dst_w_wuser    (/*no connection*/                         ), //output [AXI_USER_WIDTH-1:0]     dst_w_wuser,
    .dst_w_wvalid   (u_ddr4_0_top_c0_ddr4_s_axi_wvalid_o       ), //output                          dst_w_wvalid,
    .dst_w_wready   (u_ddr4_0_top_c0_ddr4_s_axi_wready_i       ), //input                           dst_w_wready,
    .dst_b_bid      (u_ddr4_0_top_c0_ddr4_s_axi_bid_i[10:0]    ), //input  [AXI_ID_WIDTH-1:0]       dst_b_bid,
    .dst_b_bresp    (u_ddr4_0_top_c0_ddr4_s_axi_bresp_i        ), //input  [1:0]                    dst_b_bresp,
    .dst_b_buser    (1'b0                                      ), //input  [AXI_USER_WIDTH-1:0]     dst_b_buser,
    .dst_b_bvalid   (u_ddr4_0_top_c0_ddr4_s_axi_bvalid_i       ), //input                           dst_b_bvalid,
    .dst_b_bready   (u_ddr4_0_top_c0_ddr4_s_axi_bready_o       ), //output                          dst_b_bready,
    .dst_ar_arid    (u_ddr4_0_top_c0_ddr4_s_axi_arid_s         ), //output [AXI_ID_WIDTH-1:0]       dst_ar_arid,
    .dst_ar_araddr  (u_ddr4_0_top_c0_ddr4_s_axi_araddr_o       ), //output [AXI_ADDR_WIDTH-1:0]     dst_ar_araddr,
    .dst_ar_arlen   (u_ddr4_0_top_c0_ddr4_s_axi_arlen_o        ), //output [7:0]                    dst_ar_arlen,
    .dst_ar_arsize  (u_ddr4_0_top_c0_ddr4_s_axi_arsize_o       ), //output [2:0]                    dst_ar_arsize,
    .dst_ar_arburst (u_ddr4_0_top_c0_ddr4_s_axi_arburst_o      ), //output [1:0]                    dst_ar_arburst,
    .dst_ar_arlock  (u_ddr4_0_top_c0_ddr4_s_axi_arlock_o       ), //output                          dst_ar_arlock,
    .dst_ar_arcache (u_ddr4_0_top_c0_ddr4_s_axi_arcache_o      ), //output [3:0]                    dst_ar_arcache,
    .dst_ar_arprot  (u_ddr4_0_top_c0_ddr4_s_axi_arprot_o       ), //output [2:0]                    dst_ar_arprot,
    .dst_ar_arregion(/*no connection*/                         ), //output [3:0]                    dst_ar_arregion,
    .dst_ar_arqos   (/*no connection*/                         ), //output [3:0]                    dst_ar_arqos,
    .dst_ar_aruser  (/*no connection*/                         ), //output [AXI_USER_WIDTH-1:0]     dst_ar_aruser,
    .dst_ar_arvalid (u_ddr4_0_top_c0_ddr4_s_axi_arvalid_o      ), //output                          dst_ar_arvalid,
    .dst_ar_arready (u_ddr4_0_top_c0_ddr4_s_axi_arready_i      ), //input                           dst_ar_arready,
    .dst_r_rid      (u_ddr4_0_top_c0_ddr4_s_axi_rid_i[10:0]    ), //input  [AXI_ID_WIDTH-1:0]       dst_r_rid,
    .dst_r_rdata    (u_ddr4_0_top_c0_ddr4_s_axi_rdata_i        ), //input  [AXI_DATA_WIDTH-1:0]     dst_r_rdata,
    .dst_r_rresp    (u_ddr4_0_top_c0_ddr4_s_axi_rresp_i        ), //input  [1:0]                    dst_r_rresp,
    .dst_r_rlast    (u_ddr4_0_top_c0_ddr4_s_axi_rlast_i        ), //input                           dst_r_rlast,
    .dst_r_ruser    (1'b0                                      ), //input  [AXI_USER_WIDTH-1:0]     dst_r_ruser,
    .dst_r_rvalid   (u_ddr4_0_top_c0_ddr4_s_axi_rvalid_i       ), //input                           dst_r_rvalid,
    .dst_r_rready   (u_ddr4_0_top_c0_ddr4_s_axi_rready_o       )  //output                          dst_r_rready 
);


axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(32),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_ram_axi_slv_256_to_32  
(
    .clk_i          (u_uncore_top_per_clk_i        ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i ), //input                                       rst_ni,

    .slv_aw_awid    (ram_axi_slv_256_awid          ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (ram_axi_slv_256_awaddr        ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (ram_axi_slv_256_awlen         ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (ram_axi_slv_256_awsize        ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (ram_axi_slv_256_awburst       ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (ram_axi_slv_256_awlock        ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (ram_axi_slv_256_awcache       ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (ram_axi_slv_256_awprot        ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(ram_axi_slv_256_awregion      ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (ram_axi_slv_256_awqos         ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (ram_axi_slv_256_awuser        ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (ram_axi_slv_256_awvalid       ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (ram_axi_slv_256_awready       ), //output                                      slv_aw_awready,
    .slv_w_wdata    (ram_axi_slv_256_wdata         ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (ram_axi_slv_256_wstrb         ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (ram_axi_slv_256_wlast         ), //input                                       slv_w_wlast,
    .slv_w_wuser    (ram_axi_slv_256_wuser         ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (ram_axi_slv_256_wvalid        ), //input                                       slv_w_wvalid,
    .slv_w_wready   (ram_axi_slv_256_wready        ), //output                                      slv_w_wready,
    .slv_b_bid      (ram_axi_slv_256_bid           ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (ram_axi_slv_256_bresp         ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (ram_axi_slv_256_buser         ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (ram_axi_slv_256_bvalid        ), //output                                      slv_b_bvalid,
    .slv_b_bready   (ram_axi_slv_256_bready        ), //input                                       slv_b_bready,
    .slv_ar_arid    (ram_axi_slv_256_arid          ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (ram_axi_slv_256_araddr        ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (ram_axi_slv_256_arlen         ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (ram_axi_slv_256_arsize        ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (ram_axi_slv_256_arburst       ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (ram_axi_slv_256_arlock        ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (ram_axi_slv_256_arcache       ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (ram_axi_slv_256_arprot        ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(ram_axi_slv_256_arregion      ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (ram_axi_slv_256_arqos         ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (ram_axi_slv_256_aruser        ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (ram_axi_slv_256_arvalid       ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (ram_axi_slv_256_arready       ), //output                                      slv_ar_arready,
    .slv_r_rid      (ram_axi_slv_256_rid           ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (ram_axi_slv_256_rdata         ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (ram_axi_slv_256_rresp         ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (ram_axi_slv_256_rlast         ), //output                                      slv_r_rlast,
    .slv_r_ruser    (ram_axi_slv_256_ruser         ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (ram_axi_slv_256_rvalid        ), //output                                      slv_r_rvalid,
    .slv_r_rready   (ram_axi_slv_256_rready        ), //input                                       slv_r_rready, 

    .mst_aw_awid    (ram_axi_slv_32_awid           ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (ram_axi_slv_32_awaddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (ram_axi_slv_32_awlen          ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (ram_axi_slv_32_awsize         ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (ram_axi_slv_32_awburst        ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (ram_axi_slv_32_awlock         ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (ram_axi_slv_32_awcache        ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (ram_axi_slv_32_awprot         ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(ram_axi_slv_32_awregion       ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (ram_axi_slv_32_awqos          ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (ram_axi_slv_32_awuser         ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (ram_axi_slv_32_awvalid        ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (ram_axi_slv_32_awready        ), //input                                       mst_aw_awready,
    .mst_w_wdata    (ram_axi_slv_32_wdata          ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (ram_axi_slv_32_wstrb          ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (ram_axi_slv_32_wlast          ), //output                                      mst_w_wlast,
    .mst_w_wuser    (ram_axi_slv_32_wuser          ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (ram_axi_slv_32_wvalid         ), //output                                      mst_w_wvalid,
    .mst_w_wready   (ram_axi_slv_32_wready         ), //input                                       mst_w_wready,
    .mst_b_bid      (ram_axi_slv_32_bid            ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (ram_axi_slv_32_bresp          ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (ram_axi_slv_32_buser          ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (ram_axi_slv_32_bvalid         ), //input                                       mst_b_bvalid,
    .mst_b_bready   (ram_axi_slv_32_bready         ), //output                                      mst_b_bready,
    .mst_ar_arid    (ram_axi_slv_32_arid           ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (ram_axi_slv_32_araddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (ram_axi_slv_32_arlen          ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (ram_axi_slv_32_arsize         ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (ram_axi_slv_32_arburst        ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (ram_axi_slv_32_arlock         ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (ram_axi_slv_32_arcache        ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (ram_axi_slv_32_arprot         ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(ram_axi_slv_32_arregion       ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (ram_axi_slv_32_arqos          ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (ram_axi_slv_32_aruser         ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (ram_axi_slv_32_arvalid        ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (ram_axi_slv_32_arready        ), //input                                       mst_ar_arready,
    .mst_r_rid      (ram_axi_slv_32_rid            ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (ram_axi_slv_32_rdata          ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (ram_axi_slv_32_rresp          ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (ram_axi_slv_32_rlast          ), //input                                       mst_r_rlast,
    .mst_r_ruser    (ram_axi_slv_32_ruser          ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (ram_axi_slv_32_rvalid         ), //input                                       mst_r_rvalid,
    .mst_r_rready   (ram_axi_slv_32_rready         )  //output                                      mst_r_rready 
);

//reg     [10 : 0]    ram_axi_slv_32_bid;
//reg     [10 : 0]    ram_axi_slv_32_rid;
//always_ff @(posedge u_uncore_top_per_clk_i or negedge u_uncore_top_core_nic_rst_n_i) begin
//    if(!u_uncore_top_core_nic_rst_n_i) begin
//        ram_axi_slv_32_bid <= 11'b0;
//        ram_axi_slv_32_rid <= 11'b0;
//    end 
//    else begin
//        if(ram_axi_slv_32_awvalid & ram_axi_slv_32_awready)begin
//            ram_axi_slv_32_bid <= ram_axi_slv_32_awid;
//        end
//        if(ram_axi_slv_32_arvalid & ram_axi_slv_32_arready)begin
//            ram_axi_slv_32_rid <= ram_axi_slv_32_arid;
//        end
//    end
//end

axi2mem_wrapper 
#(
  .AXI_ADDR_WIDTH(64 ),
  .AXI_DATA_WIDTH(32 ),
  .AXI_ID_WIDTH  (11 ),
  .AXI_USER_WIDTH(1  )
) u_ram_axi2mem 
(
    .clk_i          (u_uncore_top_per_clk_i       ), //input                           clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i), //input                           rst_ni,

    .axi_aw_awid    (ram_axi_slv_32_awid          ), //input  [AXI_ID_WIDTH-1:0]       axi_aw_awid,
    .axi_aw_awaddr  (ram_axi_slv_32_awaddr        ), //input  [AXI_ADDR_WIDTH-1:0]     axi_aw_awaddr,
    .axi_aw_awlen   (ram_axi_slv_32_awlen         ), //input  [7:0]                    axi_aw_awlen,
    .axi_aw_awsize  (ram_axi_slv_32_awsize        ), //input  [2:0]                    axi_aw_awsize,
    .axi_aw_awburst (ram_axi_slv_32_awburst       ), //input  [1:0]                    axi_aw_awburst,
    .axi_aw_awlock  (ram_axi_slv_32_awlock        ), //input                           axi_aw_awlock,
    .axi_aw_awcache (ram_axi_slv_32_awcache       ), //input  [3:0]                    axi_aw_awcache,
    .axi_aw_awprot  (ram_axi_slv_32_awprot        ), //input  [2:0]                    axi_aw_awprot,
    .axi_aw_awregion(ram_axi_slv_32_awregion      ), //input  [3:0]                    axi_aw_awregion,
    .axi_aw_awqos   (ram_axi_slv_32_awqos         ), //input  [3:0]                    axi_aw_awqos,
    .axi_aw_awuser  (ram_axi_slv_32_awuser        ), //input  [AXI_USER_WIDTH-1:0]     axi_aw_awuser,//
    .axi_aw_awvalid (ram_axi_slv_32_awvalid       ), //input                           axi_aw_awvalid,
    .axi_aw_awready (ram_axi_slv_32_awready       ), //output                          axi_aw_awready,
    .axi_w_wdata    (ram_axi_slv_32_wdata         ), //input  [AXI_DATA_WIDTH-1:0]     axi_w_wdata,
    .axi_w_wstrb    (ram_axi_slv_32_wstrb         ), //input  [AXI_DATA_WIDTH/8-1:0]   axi_w_wstrb,
    .axi_w_wlast    (ram_axi_slv_32_wlast         ), //input                           axi_w_wlast,
    .axi_w_wuser    (ram_axi_slv_32_wuser         ), //input  [AXI_USER_WIDTH-1:0]     axi_w_wuser,
    .axi_w_wvalid   (ram_axi_slv_32_wvalid        ), //input                           axi_w_wvalid,
    .axi_w_wready   (ram_axi_slv_32_wready        ), //output                          axi_w_wready,
    .axi_b_bid      (ram_axi_slv_32_bid           ), //output [AXI_ID_WIDTH-1:0]       axi_b_bid,
    .axi_b_bresp    (ram_axi_slv_32_bresp         ), //output [1:0]                    axi_b_bresp,
    .axi_b_buser    (ram_axi_slv_32_buser         ), //output [AXI_USER_WIDTH-1:0]     axi_b_buser,
    .axi_b_bvalid   (ram_axi_slv_32_bvalid        ), //output                          axi_b_bvalid,
    .axi_b_bready   (ram_axi_slv_32_bready        ), //input                           axi_b_bready,
    .axi_ar_arid    (ram_axi_slv_32_arid          ), //input  [AXI_ID_WIDTH-1:0]       axi_ar_arid,
    .axi_ar_araddr  (ram_axi_slv_32_araddr        ), //input  [AXI_ADDR_WIDTH-1:0]     axi_ar_araddr,
    .axi_ar_arlen   (ram_axi_slv_32_arlen         ), //input  [7:0]                    axi_ar_arlen,
    .axi_ar_arsize  (ram_axi_slv_32_arsize        ), //input  [2:0]                    axi_ar_arsize,
    .axi_ar_arburst (ram_axi_slv_32_arburst       ), //input  [1:0]                    axi_ar_arburst,
    .axi_ar_arlock  (ram_axi_slv_32_arlock        ), //input                           axi_ar_arlock,
    .axi_ar_arcache (ram_axi_slv_32_arcache       ), //input  [3:0]                    axi_ar_arcache,
    .axi_ar_arprot  (ram_axi_slv_32_arprot        ), //input  [2:0]                    axi_ar_arprot,
    .axi_ar_arregion(ram_axi_slv_32_arregion      ), //input  [3:0]                    axi_ar_arregion,
    .axi_ar_arqos   (ram_axi_slv_32_arqos         ), //input  [3:0]                    axi_ar_arqos,
    .axi_ar_aruser  (ram_axi_slv_32_aruser        ), //input  [AXI_USER_WIDTH-1:0]     axi_ar_aruser,
    .axi_ar_arvalid (ram_axi_slv_32_arvalid       ), //input                           axi_ar_arvalid,
    .axi_ar_arready (ram_axi_slv_32_arready       ), //output                          axi_ar_arready,
    .axi_r_rid      (ram_axi_slv_32_rid           ), //output [AXI_ID_WIDTH-1:0]       axi_r_rid,
    .axi_r_rdata    (ram_axi_slv_32_rdata         ), //output [AXI_DATA_WIDTH-1:0]     axi_r_rdata,
    .axi_r_rresp    (ram_axi_slv_32_rresp         ), //output [1:0]                    axi_r_rresp,
    .axi_r_rlast    (ram_axi_slv_32_rlast         ), //output                          axi_r_rlast,
    .axi_r_ruser    (ram_axi_slv_32_ruser         ), //output [AXI_USER_WIDTH-1:0]     axi_r_ruser,
    .axi_r_rvalid   (ram_axi_slv_32_rvalid        ), //output                          axi_r_rvalid,
    .axi_r_rready   (ram_axi_slv_32_rready        ), //input                           axi_r_rready, 

    .mem_req_o      (ram_req                      ), //output                          mem_req_o,
    .mem_we_o       (ram_we                       ), //output                          mem_we_o,
    .mem_addr_o     (ram_addr                     ), //output [AXI_ADDR_WIDTH-1:0]     mem_addr_o,
    .mem_be_o       (ram_be                       ), //output [AXI_DATA_WIDTH/8-1:0]   mem_be_o,
    .mem_data_o     (ram_wdata                    ), //output [AXI_DATA_WIDTH-1:0]     mem_data_o,
    .mem_data_i     (ram_rdata                    )  //input  [AXI_DATA_WIDTH-1:0]     mem_data_i
);


assign ram_addr_s = ram_addr[31:0] - 32'h4060_0000;
lmu_ram #(
  .NUM_WORDS  ( 1048576  )
) u_lmu_ram (
    .clk_i      ( u_uncore_top_per_clk_i       ),
    .rst_ni     ( u_uncore_top_core_nic_rst_n_i),
    .req_i      ( ram_req                      ),
    .we_i       ( ram_we                       ),
    .addr_i     ( ram_addr_s[21:2]             ),
    .wdata_i    ( ram_wdata                    ),
    .be_i       ( ram_be                       ),
    .rdata_o    ( ram_rdata                    )
);


axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(32),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_maccfg_axi_slv_256_to_32 
(
    .clk_i          (u_uncore_top_riscv_clk_i      ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i ), //input                                       rst_ni,

    .slv_aw_awid    (maccfg_axi_slv_256_awid          ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (maccfg_axi_slv_256_awaddr        ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (maccfg_axi_slv_256_awlen         ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (maccfg_axi_slv_256_awsize        ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (maccfg_axi_slv_256_awburst       ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (maccfg_axi_slv_256_awlock        ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (maccfg_axi_slv_256_awcache       ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (maccfg_axi_slv_256_awprot        ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(maccfg_axi_slv_256_awregion      ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (maccfg_axi_slv_256_awqos         ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (maccfg_axi_slv_256_awuser        ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (maccfg_axi_slv_256_awvalid       ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (maccfg_axi_slv_256_awready       ), //output                                      slv_aw_awready,
    .slv_w_wdata    (maccfg_axi_slv_256_wdata         ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (maccfg_axi_slv_256_wstrb         ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (maccfg_axi_slv_256_wlast         ), //input                                       slv_w_wlast,
    .slv_w_wuser    (maccfg_axi_slv_256_wuser         ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (maccfg_axi_slv_256_wvalid        ), //input                                       slv_w_wvalid,
    .slv_w_wready   (maccfg_axi_slv_256_wready        ), //output                                      slv_w_wready,
    .slv_b_bid      (maccfg_axi_slv_256_bid           ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (maccfg_axi_slv_256_bresp         ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (maccfg_axi_slv_256_buser         ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (maccfg_axi_slv_256_bvalid        ), //output                                      slv_b_bvalid,
    .slv_b_bready   (maccfg_axi_slv_256_bready        ), //input                                       slv_b_bready,
    .slv_ar_arid    (maccfg_axi_slv_256_arid          ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (maccfg_axi_slv_256_araddr        ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (maccfg_axi_slv_256_arlen         ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (maccfg_axi_slv_256_arsize        ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (maccfg_axi_slv_256_arburst       ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (maccfg_axi_slv_256_arlock        ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (maccfg_axi_slv_256_arcache       ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (maccfg_axi_slv_256_arprot        ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(maccfg_axi_slv_256_arregion      ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (maccfg_axi_slv_256_arqos         ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (maccfg_axi_slv_256_aruser        ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (maccfg_axi_slv_256_arvalid       ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (maccfg_axi_slv_256_arready       ), //output                                      slv_ar_arready,
    .slv_r_rid      (maccfg_axi_slv_256_rid           ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (maccfg_axi_slv_256_rdata         ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (maccfg_axi_slv_256_rresp         ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (maccfg_axi_slv_256_rlast         ), //output                                      slv_r_rlast,
    .slv_r_ruser    (maccfg_axi_slv_256_ruser         ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (maccfg_axi_slv_256_rvalid        ), //output                                      slv_r_rvalid,
    .slv_r_rready   (maccfg_axi_slv_256_rready        ), //input                                       slv_r_rready, 

    .mst_aw_awid    (maccfg_axi_slv_32_awid           ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (maccfg_axi_slv_32_awaddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (maccfg_axi_slv_32_awlen          ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (maccfg_axi_slv_32_awsize         ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (maccfg_axi_slv_32_awburst        ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (maccfg_axi_slv_32_awlock         ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (maccfg_axi_slv_32_awcache        ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (maccfg_axi_slv_32_awprot         ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(maccfg_axi_slv_32_awregion       ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (maccfg_axi_slv_32_awqos          ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (maccfg_axi_slv_32_awuser         ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (maccfg_axi_slv_32_awvalid        ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (maccfg_axi_slv_32_awready        ), //input                                       mst_aw_awready,
    .mst_w_wdata    (maccfg_axi_slv_32_wdata          ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (maccfg_axi_slv_32_wstrb          ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (maccfg_axi_slv_32_wlast          ), //output                                      mst_w_wlast,
    .mst_w_wuser    (maccfg_axi_slv_32_wuser          ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (maccfg_axi_slv_32_wvalid         ), //output                                      mst_w_wvalid,
    .mst_w_wready   (maccfg_axi_slv_32_wready         ), //input                                       mst_w_wready,
    .mst_b_bid      (maccfg_axi_slv_32_bid            ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (maccfg_axi_slv_32_bresp          ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (maccfg_axi_slv_32_buser          ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (maccfg_axi_slv_32_bvalid         ), //input                                       mst_b_bvalid,
    .mst_b_bready   (maccfg_axi_slv_32_bready         ), //output                                      mst_b_bready,
    .mst_ar_arid    (maccfg_axi_slv_32_arid           ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (maccfg_axi_slv_32_araddr         ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (maccfg_axi_slv_32_arlen          ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (maccfg_axi_slv_32_arsize         ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (maccfg_axi_slv_32_arburst        ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (maccfg_axi_slv_32_arlock         ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (maccfg_axi_slv_32_arcache        ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (maccfg_axi_slv_32_arprot         ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(maccfg_axi_slv_32_arregion       ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (maccfg_axi_slv_32_arqos          ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (maccfg_axi_slv_32_aruser         ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (maccfg_axi_slv_32_arvalid        ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (maccfg_axi_slv_32_arready        ), //input                                       mst_ar_arready,
    .mst_r_rid      (maccfg_axi_slv_32_rid            ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (maccfg_axi_slv_32_rdata          ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (maccfg_axi_slv_32_rresp          ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (maccfg_axi_slv_32_rlast          ), //input                                       mst_r_rlast,
    .mst_r_ruser    (maccfg_axi_slv_32_ruser          ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (maccfg_axi_slv_32_rvalid         ), //input                                       mst_r_rvalid,
    .mst_r_rready   (maccfg_axi_slv_32_rready         )  //output                                      mst_r_rready 
);

axi2apb 
#(
    .AXI4_ADDRESS_WIDTH(64),
    .AXI4_RDATA_WIDTH  (32),
    .AXI4_WDATA_WIDTH  (32),
    .AXI4_ID_WIDTH     (11),
    .AXI4_USER_WIDTH   (1 ),
    .APB_ADDR_WIDTH    (64)
) u_maccfg_axil_to_apb_mst
(
    .ACLK      (u_uncore_top_riscv_clk_i              ),//input   logic                          ACLK,
    .ARESETn   (u_uncore_top_core_nic_rst_n_i         ),//input   logic                          ARESETn,
    .test_en_i (1'b0                                  ),//input   logic                          test_en_i,

    .AWID_i    (maccfg_axi_slv_32_awid                ),//input   logic [AXI4_ID_WIDTH-1:0]      AWID_i,
    .AWADDR_i  (maccfg_axi_slv_32_awaddr              ),//input   logic [AXI4_ADDRESS_WIDTH-1:0] AWADDR_i,
    .AWLEN_i   (maccfg_axi_slv_32_awlen               ),//input   logic [ 7:0]                   AWLEN_i,
    .AWSIZE_i  (maccfg_axi_slv_32_awsize              ),//input   logic [ 2:0]                   AWSIZE_i,
    .AWBURST_i (maccfg_axi_slv_32_awburst             ),//input   logic [ 1:0]                   AWBURST_i,
    .AWLOCK_i  (maccfg_axi_slv_32_awlock              ),//input   logic                          AWLOCK_i,
    .AWCACHE_i (maccfg_axi_slv_32_awcache             ),//input   logic [ 3:0]                   AWCACHE_i,
    .AWPROT_i  (maccfg_axi_slv_32_awprot              ),//input   logic [ 2:0]                   AWPROT_i,
    .AWREGION_i(maccfg_axi_slv_32_awregion            ),//input   logic [ 3:0]                   AWREGION_i,
    .AWQOS_i   (maccfg_axi_slv_32_awqos               ),//input   logic [ 3:0]                   AWQOS_i,
    .AWUSER_i  (maccfg_axi_slv_32_awuser              ),//input   logic [ AXI4_USER_WIDTH-1:0]   AWUSER_i,
    .AWVALID_i (maccfg_axi_slv_32_awvalid             ),//input   logic                          AWVALID_i,
    .AWREADY_o (maccfg_axi_slv_32_awready             ),//output  logic                          AWREADY_o,
    .WDATA_i   (maccfg_axi_slv_32_wdata               ),//input   logic [AXI4_WDATA_WIDTH-1:0]   WDATA_i,
    .WSTRB_i   (maccfg_axi_slv_32_wstrb               ),//input   logic [AXI_NUMBYTES-1:0]       WSTRB_i,
    .WLAST_i   (maccfg_axi_slv_32_wlast               ),//input   logic                          WLAST_i,
    .WUSER_i   (maccfg_axi_slv_32_wuser               ),//input   logic [AXI4_USER_WIDTH-1:0]    WUSER_i,
    .WVALID_i  (maccfg_axi_slv_32_wvalid              ),//input   logic                          WVALID_i,
    .WREADY_o  (maccfg_axi_slv_32_wready              ),//output  logic                          WREADY_o,
    .BID_o     (maccfg_axi_slv_32_bid                 ),//output  logic [AXI4_ID_WIDTH-1:0]      BID_o,
    .BRESP_o   (maccfg_axi_slv_32_bresp               ),//output  logic [ 1:0]                   BRESP_o,
    .BUSER_o   (maccfg_axi_slv_32_buser               ),//output  logic [AXI4_USER_WIDTH-1:0]    BUSER_o,
    .BVALID_o  (maccfg_axi_slv_32_bvalid              ),//output  logic                          BVALID_o,
    .BREADY_i  (maccfg_axi_slv_32_bready              ),//input   logic                          BREADY_i,
    .ARID_i    (maccfg_axi_slv_32_arid                ),//input   logic [AXI4_ID_WIDTH-1:0]      ARID_i,
    .ARADDR_i  (maccfg_axi_slv_32_araddr              ),//input   logic [AXI4_ADDRESS_WIDTH-1:0] ARADDR_i,
    .ARLEN_i   (maccfg_axi_slv_32_arlen               ),//input   logic [ 7:0]                   ARLEN_i,
    .ARSIZE_i  (maccfg_axi_slv_32_arsize              ),//input   logic [ 2:0]                   ARSIZE_i,
    .ARBURST_i (maccfg_axi_slv_32_arburst             ),//input   logic [ 1:0]                   ARBURST_i,
    .ARLOCK_i  (maccfg_axi_slv_32_arlock              ),//input   logic                          ARLOCK_i,
    .ARCACHE_i (maccfg_axi_slv_32_arcache             ),//input   logic [ 3:0]                   ARCACHE_i,
    .ARPROT_i  (maccfg_axi_slv_32_arprot              ),//input   logic [ 2:0]                   ARPROT_i,
    .ARREGION_i(maccfg_axi_slv_32_arregion            ),//input   logic [ 3:0]                   ARREGION_i,
    .ARQOS_i   (maccfg_axi_slv_32_arqos               ),//input   logic [ 3:0]                   ARQOS_i,
    .ARUSER_i  (maccfg_axi_slv_32_aruser              ),//input   logic [ AXI4_USER_WIDTH-1:0]   ARUSER_i,
    .ARVALID_i (maccfg_axi_slv_32_arvalid             ),//input   logic                          ARVALID_i,
    .ARREADY_o (maccfg_axi_slv_32_arready             ),//output  logic                          ARREADY_o,
    .RID_o     (maccfg_axi_slv_32_rid                 ),//output  logic [AXI4_ID_WIDTH-1:0]      RID_o,
    .RDATA_o   (maccfg_axi_slv_32_rdata               ),//output  logic [AXI4_RDATA_WIDTH-1:0]   RDATA_o,
    .RRESP_o   (maccfg_axi_slv_32_rresp               ),//output  logic [ 1:0]                   RRESP_o,
    .RLAST_o   (maccfg_axi_slv_32_rlast               ),//output  logic                          RLAST_o,
    .RUSER_o   (maccfg_axi_slv_32_ruser               ),//output  logic [AXI4_USER_WIDTH-1:0]    RUSER_o,
    .RVALID_o  (maccfg_axi_slv_32_rvalid              ),//output  logic                          RVALID_o,
    .RREADY_i  (maccfg_axi_slv_32_rready              ),//input   logic                          RREADY_i,
    
    .PADDR     (u_NV_nvdla_top_paddr_s                ),//output  logic [APB_ADDR_WIDTH-1:0]     PADDR,
    .PSEL      (u_NV_nvdla_top_pselX_o                ),//output  logic                          PSEL,
    .PENABLE   (u_NV_nvdla_top_penable_o              ),//output  logic                          PENABLE,
    .PWRITE    (u_NV_nvdla_top_pwrite_o               ),//output  logic                          PWRITE,
    .PWDATA    (u_NV_nvdla_top_pwdata_o               ),//output  logic [AXI4_WDATA_WIDTH-1:0]   PWDATA,
    .PREADY    (u_NV_nvdla_top_pready_i               ),//input   logic                          PREADY,
    .PRDATA    (u_NV_nvdla_top_prdata_i               ),//input   logic [AXI4_RDATA_WIDTH-1:0]   PRDATA,
    .PSLVERR   (u_NV_nvdla_top_pslverr_i              ) //input   logic                          PSLVERR
);


axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(64),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_clint_axi_slv_256_to_64   
(
    .clk_i          (u_uncore_top_riscv_clk_i      ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i ), //input                                       rst_ni,

    .slv_aw_awid    (clint_axi_slv_256_awid        ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (clint_axi_slv_256_awaddr      ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (clint_axi_slv_256_awlen       ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (clint_axi_slv_256_awsize      ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (clint_axi_slv_256_awburst     ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (clint_axi_slv_256_awlock      ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (clint_axi_slv_256_awcache     ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (clint_axi_slv_256_awprot      ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(clint_axi_slv_256_awregion    ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (clint_axi_slv_256_awqos       ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (clint_axi_slv_256_awuser      ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (clint_axi_slv_256_awvalid     ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (clint_axi_slv_256_awready     ), //output                                      slv_aw_awready,
    .slv_w_wdata    (clint_axi_slv_256_wdata       ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (clint_axi_slv_256_wstrb       ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (clint_axi_slv_256_wlast       ), //input                                       slv_w_wlast,
    .slv_w_wuser    (clint_axi_slv_256_wuser       ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (clint_axi_slv_256_wvalid      ), //input                                       slv_w_wvalid,
    .slv_w_wready   (clint_axi_slv_256_wready      ), //output                                      slv_w_wready,
    .slv_b_bid      (clint_axi_slv_256_bid         ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (clint_axi_slv_256_bresp       ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (clint_axi_slv_256_buser       ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (clint_axi_slv_256_bvalid      ), //output                                      slv_b_bvalid,
    .slv_b_bready   (clint_axi_slv_256_bready      ), //input                                       slv_b_bready,
    .slv_ar_arid    (clint_axi_slv_256_arid        ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (clint_axi_slv_256_araddr      ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (clint_axi_slv_256_arlen       ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (clint_axi_slv_256_arsize      ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (clint_axi_slv_256_arburst     ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (clint_axi_slv_256_arlock      ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (clint_axi_slv_256_arcache     ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (clint_axi_slv_256_arprot      ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(clint_axi_slv_256_arregion    ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (clint_axi_slv_256_arqos       ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (clint_axi_slv_256_aruser      ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (clint_axi_slv_256_arvalid     ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (clint_axi_slv_256_arready     ), //output                                      slv_ar_arready,
    .slv_r_rid      (clint_axi_slv_256_rid         ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (clint_axi_slv_256_rdata       ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (clint_axi_slv_256_rresp       ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (clint_axi_slv_256_rlast       ), //output                                      slv_r_rlast,
    .slv_r_ruser    (clint_axi_slv_256_ruser       ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (clint_axi_slv_256_rvalid      ), //output                                      slv_r_rvalid,
    .slv_r_rready   (clint_axi_slv_256_rready      ), //input                                       slv_r_rready, 

    .mst_aw_awid    (clint_axi_slv_64_awid         ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (clint_axi_slv_64_awaddr       ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (clint_axi_slv_64_awlen        ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (clint_axi_slv_64_awsize       ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (clint_axi_slv_64_awburst      ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (clint_axi_slv_64_awlock       ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (clint_axi_slv_64_awcache      ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (clint_axi_slv_64_awprot       ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(clint_axi_slv_64_awregion     ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (clint_axi_slv_64_awqos        ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (clint_axi_slv_64_awuser       ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (clint_axi_slv_64_awvalid      ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (clint_axi_slv_64_awready      ), //input                                       mst_aw_awready,
    .mst_w_wdata    (clint_axi_slv_64_wdata        ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (clint_axi_slv_64_wstrb        ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (clint_axi_slv_64_wlast        ), //output                                      mst_w_wlast,
    .mst_w_wuser    (clint_axi_slv_64_wuser        ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (clint_axi_slv_64_wvalid       ), //output                                      mst_w_wvalid,
    .mst_w_wready   (clint_axi_slv_64_wready       ), //input                                       mst_w_wready,
    .mst_b_bid      (clint_axi_slv_64_bid          ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (clint_axi_slv_64_bresp        ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (clint_axi_slv_64_buser        ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (clint_axi_slv_64_bvalid       ), //input                                       mst_b_bvalid,
    .mst_b_bready   (clint_axi_slv_64_bready       ), //output                                      mst_b_bready,
    .mst_ar_arid    (clint_axi_slv_64_arid         ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (clint_axi_slv_64_araddr       ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (clint_axi_slv_64_arlen        ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (clint_axi_slv_64_arsize       ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (clint_axi_slv_64_arburst      ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (clint_axi_slv_64_arlock       ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (clint_axi_slv_64_arcache      ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (clint_axi_slv_64_arprot       ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(clint_axi_slv_64_arregion     ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (clint_axi_slv_64_arqos        ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (clint_axi_slv_64_aruser       ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (clint_axi_slv_64_arvalid      ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (clint_axi_slv_64_arready      ), //input                                       mst_ar_arready,
    .mst_r_rid      (clint_axi_slv_64_rid          ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (clint_axi_slv_64_rdata        ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (clint_axi_slv_64_rresp        ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (clint_axi_slv_64_rlast        ), //input                                       mst_r_rlast,
    .mst_r_ruser    (clint_axi_slv_64_ruser        ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (clint_axi_slv_64_rvalid       ), //input                                       mst_r_rvalid,
    .mst_r_rready   (clint_axi_slv_64_rready       )  //output                                      mst_r_rready 
);

always_ff @(posedge u_uncore_top_riscv_clk_i or negedge u_uncore_top_core_nic_rst_n_i) begin
    if(~u_uncore_top_core_nic_rst_n_i) begin
        clint_axi_slv_64_bid <= 11'b0;
        clint_axi_slv_64_rid <= 11'b0;
    end 
    else begin
        if(clint_axi_slv_64_awvalid & clint_axi_slv_64_awready)begin
            clint_axi_slv_64_bid <= clint_axi_slv_64_awid;
        end
        if(clint_axi_slv_64_arvalid & clint_axi_slv_64_arready)begin
            clint_axi_slv_64_rid <= clint_axi_slv_64_arid;
        end
    end
end

clint_wrapper 
#(
  .AXI_ADDRESS_WIDTH(64),
  .AXI_DATA_WIDTH   (64)
) u_clint_wrapper 
(
    .clk_i            (u_uncore_top_riscv_clk_i       ), //input              clk_i,       // Clock
    .rst_ni           (~u_uncore_top_riscv_rst_i      ), //input              rst_ni,      // Asynchronous reset active low

    .rtc_toggle_i     (u_uncore_top_riscv_rtc_toggle_s), //input              rtc_toggle_i,// Real-time clock in (usually 32.768 kHz)
    .timer_irq_o      (riscv_timer_irq                ), //output             timer_irq_o, // Timer interrupts
    .ipi_o            (riscv_ipi                      ), //output             ipi_o,       // software interrupt (a.k.a inter-process-interrupt)

    .clint_aw_awid    (4'b1100                        ), //input  [3:0]       clint_aw_awid,
    .clint_aw_awaddr  (clint_axi_slv_64_awaddr        ), //input  [64-1:0]    clint_aw_awaddr,
    .clint_aw_awlen   (clint_axi_slv_64_awlen         ), //input  [7:0]       clint_aw_awlen,
    .clint_aw_awsize  (clint_axi_slv_64_awsize        ), //input  [2:0]       clint_aw_awsize,
    .clint_aw_awburst (clint_axi_slv_64_awburst       ), //input  [1:0]       clint_aw_awburst,
    .clint_aw_awlock  (clint_axi_slv_64_awlock        ), //input              clint_aw_awlock,
    .clint_aw_awcache (clint_axi_slv_64_awcache       ), //input  [3:0]       clint_aw_awcache,
    .clint_aw_awprot  (clint_axi_slv_64_awprot        ), //input  [2:0]       clint_aw_awprot,
    .clint_aw_awregion(clint_axi_slv_64_awregion      ), //input  [3:0]       clint_aw_awregion,
    .clint_aw_awqos   (clint_axi_slv_64_awqos         ), //input  [3:0]       clint_aw_awqos,
    .clint_aw_awuser  (clint_axi_slv_64_awuser        ), //input              clint_aw_awuser,//
    .clint_aw_awvalid (clint_axi_slv_64_awvalid       ), //input              clint_aw_awvalid,
    .clint_aw_awready (clint_axi_slv_64_awready       ), //output             clint_aw_awready,
    .clint_w_wdata    (clint_axi_slv_64_wdata         ), //input  [64-1:0]    clint_w_wdata,
    .clint_w_wstrb    (clint_axi_slv_64_wstrb         ), //input  [64/8-1:0]  clint_w_wstrb,
    .clint_w_wlast    (clint_axi_slv_64_wlast         ), //input              clint_w_wlast,
    .clint_w_wuser    (clint_axi_slv_64_wuser         ), //input              clint_w_wuser,
    .clint_w_wvalid   (clint_axi_slv_64_wvalid        ), //input              clint_w_wvalid,
    .clint_w_wready   (clint_axi_slv_64_wready        ), //output             clint_w_wready,
    .clint_b_bid      (/*nonconnection*/              ), //output [3:0]       clint_b_bid,
    .clint_b_bresp    (clint_axi_slv_64_bresp         ), //output [1:0]       clint_b_bresp,
    .clint_b_buser    (clint_axi_slv_64_buser         ), //output             clint_b_buser,
    .clint_b_bvalid   (clint_axi_slv_64_bvalid        ), //output             clint_b_bvalid,
    .clint_b_bready   (clint_axi_slv_64_bready        ), //input              clint_b_bready,
    .clint_ar_arid    (4'b1100                        ), //input  [3:0]       clint_ar_arid,
    .clint_ar_araddr  (clint_axi_slv_64_araddr        ), //input  [64-1:0]    clint_ar_araddr,
    .clint_ar_arlen   (clint_axi_slv_64_arlen         ), //input  [7:0]       clint_ar_arlen,
    .clint_ar_arsize  (clint_axi_slv_64_arsize        ), //input  [2:0]       clint_ar_arsize,
    .clint_ar_arburst (clint_axi_slv_64_arburst       ), //input  [1:0]       clint_ar_arburst,
    .clint_ar_arlock  (clint_axi_slv_64_arlock        ), //input              clint_ar_arlock,
    .clint_ar_arcache (clint_axi_slv_64_arcache       ), //input  [3:0]       clint_ar_arcache,
    .clint_ar_arprot  (clint_axi_slv_64_arprot        ), //input  [2:0]       clint_ar_arprot,
    .clint_ar_arregion(clint_axi_slv_64_arregion      ), //input  [3:0]       clint_ar_arregion,
    .clint_ar_arqos   (clint_axi_slv_64_arqos         ), //input  [3:0]       clint_ar_arqos,
    .clint_ar_aruser  (clint_axi_slv_64_aruser        ), //input              clint_ar_aruser,
    .clint_ar_arvalid (clint_axi_slv_64_arvalid       ), //input              clint_ar_arvalid,
    .clint_ar_arready (clint_axi_slv_64_arready       ), //output             clint_ar_arready,
    .clint_r_rid      (/*no connection*/              ), //output [3:0]       clint_r_rid,
    .clint_r_rdata    (clint_axi_slv_64_rdata         ), //output [64-1:0]    clint_r_rdata,
    .clint_r_rresp    (clint_axi_slv_64_rresp         ), //output [1:0]       clint_r_rresp,
    .clint_r_rlast    (clint_axi_slv_64_rlast         ), //output             clint_r_rlast,
    .clint_r_ruser    (clint_axi_slv_64_ruser         ), //output             clint_r_ruser,
    .clint_r_rvalid   (clint_axi_slv_64_rvalid        ), //output             clint_r_rvalid,
    .clint_r_rready   (clint_axi_slv_64_rready        )  //input              clint_r_rready 
);


axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(64),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_plic_axi_slv_256_to_64    
(
    .clk_i          (u_uncore_top_riscv_clk_i      ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i ), //input                                       rst_ni,

    .slv_aw_awid    (plic_axi_slv_256_awid         ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (plic_axi_slv_256_awaddr       ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (plic_axi_slv_256_awlen        ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (plic_axi_slv_256_awsize       ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (plic_axi_slv_256_awburst      ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (plic_axi_slv_256_awlock       ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (plic_axi_slv_256_awcache      ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (plic_axi_slv_256_awprot       ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(plic_axi_slv_256_awregion     ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (plic_axi_slv_256_awqos        ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (plic_axi_slv_256_awuser       ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (plic_axi_slv_256_awvalid      ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (plic_axi_slv_256_awready      ), //output                                      slv_aw_awready,
    .slv_w_wdata    (plic_axi_slv_256_wdata        ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (plic_axi_slv_256_wstrb        ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (plic_axi_slv_256_wlast        ), //input                                       slv_w_wlast,
    .slv_w_wuser    (plic_axi_slv_256_wuser        ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (plic_axi_slv_256_wvalid       ), //input                                       slv_w_wvalid,
    .slv_w_wready   (plic_axi_slv_256_wready       ), //output                                      slv_w_wready,
    .slv_b_bid      (plic_axi_slv_256_bid          ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (plic_axi_slv_256_bresp        ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (plic_axi_slv_256_buser        ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (plic_axi_slv_256_bvalid       ), //output                                      slv_b_bvalid,
    .slv_b_bready   (plic_axi_slv_256_bready       ), //input                                       slv_b_bready,
    .slv_ar_arid    (plic_axi_slv_256_arid         ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (plic_axi_slv_256_araddr       ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (plic_axi_slv_256_arlen        ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (plic_axi_slv_256_arsize       ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (plic_axi_slv_256_arburst      ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (plic_axi_slv_256_arlock       ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (plic_axi_slv_256_arcache      ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (plic_axi_slv_256_arprot       ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(plic_axi_slv_256_arregion     ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (plic_axi_slv_256_arqos        ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (plic_axi_slv_256_aruser       ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (plic_axi_slv_256_arvalid      ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (plic_axi_slv_256_arready      ), //output                                      slv_ar_arready,
    .slv_r_rid      (plic_axi_slv_256_rid          ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (plic_axi_slv_256_rdata        ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (plic_axi_slv_256_rresp        ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (plic_axi_slv_256_rlast        ), //output                                      slv_r_rlast,
    .slv_r_ruser    (plic_axi_slv_256_ruser        ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (plic_axi_slv_256_rvalid       ), //output                                      slv_r_rvalid,
    .slv_r_rready   (plic_axi_slv_256_rready       ), //input                                       slv_r_rready, 

    .mst_aw_awid    (plic_axi_slv_64_awid          ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (plic_axi_slv_64_awaddr        ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (plic_axi_slv_64_awlen         ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (plic_axi_slv_64_awsize        ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (plic_axi_slv_64_awburst       ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (plic_axi_slv_64_awlock        ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (plic_axi_slv_64_awcache       ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (plic_axi_slv_64_awprot        ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(plic_axi_slv_64_awregion      ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (plic_axi_slv_64_awqos         ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (plic_axi_slv_64_awuser        ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (plic_axi_slv_64_awvalid       ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (plic_axi_slv_64_awready       ), //input                                       mst_aw_awready,
    .mst_w_wdata    (plic_axi_slv_64_wdata         ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (plic_axi_slv_64_wstrb         ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (plic_axi_slv_64_wlast         ), //output                                      mst_w_wlast,
    .mst_w_wuser    (plic_axi_slv_64_wuser         ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (plic_axi_slv_64_wvalid        ), //output                                      mst_w_wvalid,
    .mst_w_wready   (plic_axi_slv_64_wready        ), //input                                       mst_w_wready,
    .mst_b_bid      (plic_axi_slv_64_bid           ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (plic_axi_slv_64_bresp         ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (plic_axi_slv_64_buser         ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (plic_axi_slv_64_bvalid        ), //input                                       mst_b_bvalid,
    .mst_b_bready   (plic_axi_slv_64_bready        ), //output                                      mst_b_bready,
    .mst_ar_arid    (plic_axi_slv_64_arid          ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (plic_axi_slv_64_araddr        ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (plic_axi_slv_64_arlen         ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (plic_axi_slv_64_arsize        ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (plic_axi_slv_64_arburst       ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (plic_axi_slv_64_arlock        ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (plic_axi_slv_64_arcache       ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (plic_axi_slv_64_arprot        ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(plic_axi_slv_64_arregion      ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (plic_axi_slv_64_arqos         ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (plic_axi_slv_64_aruser        ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (plic_axi_slv_64_arvalid       ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (plic_axi_slv_64_arready       ), //input                                       mst_ar_arready,
    .mst_r_rid      (plic_axi_slv_64_rid           ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (plic_axi_slv_64_rdata         ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (plic_axi_slv_64_rresp         ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (plic_axi_slv_64_rlast         ), //input                                       mst_r_rlast,
    .mst_r_ruser    (plic_axi_slv_64_ruser         ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (plic_axi_slv_64_rvalid        ), //input                                       mst_r_rvalid,
    .mst_r_rready   (plic_axi_slv_64_rready        )  //output                                      mst_r_rready 
);

always_ff @(posedge u_uncore_top_riscv_clk_i or negedge u_uncore_top_core_nic_rst_n_i) begin
    if(~u_uncore_top_core_nic_rst_n_i) begin
        plic_axi_slv_64_bid <= 11'b0;
        plic_axi_slv_64_rid <= 11'b0;
    end 
    else begin
        if(plic_axi_slv_64_awvalid & plic_axi_slv_64_awready)begin
            plic_axi_slv_64_bid <= plic_axi_slv_64_awid;
        end
        if(plic_axi_slv_64_arvalid & plic_axi_slv_64_arready)begin
            plic_axi_slv_64_rid <= plic_axi_slv_64_arid;
        end
    end
end

plic_wrapper u_plic_wrapper (
    .clk_i           (u_uncore_top_riscv_clk_i ), //input              clk_i,        // Clock
    .rst_ni          (~u_uncore_top_riscv_rst_i), //input              rst_ni,       // Asynchronous reset active low

    .le_i            (30'd0                    ), //input  [29:0]      le_i,         // 0:level 1:edge
    .irq_sources_i   (riscv_irq_sources        ), //input  [29:0]      irq_sources_i,
    .irq_o           (riscv_irq                ), //output [1:0]       irq_o,

    .plic_aw_awid    (5'b01101                 ), //input  [4:0]       plic_aw_awid,
    .plic_aw_awaddr  (plic_axi_slv_64_awaddr   ), //input  [64-1:0]    plic_aw_awaddr,
    .plic_aw_awlen   (plic_axi_slv_64_awlen    ), //input  [7:0]       plic_aw_awlen,
    .plic_aw_awsize  (plic_axi_slv_64_awsize   ), //input  [2:0]       plic_aw_awsize,
    .plic_aw_awburst (plic_axi_slv_64_awburst  ), //input  [1:0]       plic_aw_awburst,
    .plic_aw_awlock  (plic_axi_slv_64_awlock   ), //input              plic_aw_awlock,
    .plic_aw_awcache (plic_axi_slv_64_awcache  ), //input  [3:0]       plic_aw_awcache,
    .plic_aw_awprot  (plic_axi_slv_64_awprot   ), //input  [2:0]       plic_aw_awprot,
    .plic_aw_awregion(plic_axi_slv_64_awregion ), //input  [3:0]       plic_aw_awregion,
    .plic_aw_awqos   (plic_axi_slv_64_awqos    ), //input  [3:0]       plic_aw_awqos,
    .plic_aw_awuser  (plic_axi_slv_64_awuser   ), //input              plic_aw_awuser,//
    .plic_aw_awvalid (plic_axi_slv_64_awvalid  ), //input              plic_aw_awvalid,
    .plic_aw_awready (plic_axi_slv_64_awready  ), //output             plic_aw_awready,
    .plic_w_wdata    (plic_axi_slv_64_wdata    ), //input  [64-1:0]    plic_w_wdata,
    .plic_w_wstrb    (plic_axi_slv_64_wstrb    ), //input  [64/8-1:0]  plic_w_wstrb,
    .plic_w_wlast    (plic_axi_slv_64_wlast    ), //input              plic_w_wlast,
    .plic_w_wuser    (plic_axi_slv_64_wuser    ), //input              plic_w_wuser,
    .plic_w_wvalid   (plic_axi_slv_64_wvalid   ), //input              plic_w_wvalid,
    .plic_w_wready   (plic_axi_slv_64_wready   ), //output             plic_w_wready,
    .plic_b_bid      (/*no connection*/        ), //output [4:0]       plic_b_bid,
    .plic_b_bresp    (plic_axi_slv_64_bresp    ), //output [1:0]       plic_b_bresp,
    .plic_b_buser    (plic_axi_slv_64_buser    ), //output             plic_b_buser,
    .plic_b_bvalid   (plic_axi_slv_64_bvalid   ), //output             plic_b_bvalid,
    .plic_b_bready   (plic_axi_slv_64_bready   ), //input              plic_b_bready,
    .plic_ar_arid    (5'b01101                 ), //input  [4:0]       plic_ar_arid,
    .plic_ar_araddr  (plic_axi_slv_64_araddr   ), //input  [64-1:0]    plic_ar_araddr,
    .plic_ar_arlen   (plic_axi_slv_64_arlen    ), //input  [7:0]       plic_ar_arlen,
    .plic_ar_arsize  (plic_axi_slv_64_arsize   ), //input  [2:0]       plic_ar_arsize,
    .plic_ar_arburst (plic_axi_slv_64_arburst  ), //input  [1:0]       plic_ar_arburst,
    .plic_ar_arlock  (plic_axi_slv_64_arlock   ), //input              plic_ar_arlock,
    .plic_ar_arcache (plic_axi_slv_64_arcache  ), //input  [3:0]       plic_ar_arcache,
    .plic_ar_arprot  (plic_axi_slv_64_arprot   ), //input  [2:0]       plic_ar_arprot,
    .plic_ar_arregion(plic_axi_slv_64_arregion ), //input  [3:0]       plic_ar_arregion,
    .plic_ar_arqos   (plic_axi_slv_64_arqos    ), //input  [3:0]       plic_ar_arqos,
    .plic_ar_aruser  (plic_axi_slv_64_aruser   ), //input              plic_ar_aruser,
    .plic_ar_arvalid (plic_axi_slv_64_arvalid  ), //input              plic_ar_arvalid,
    .plic_ar_arready (plic_axi_slv_64_arready  ), //output             plic_ar_arready,
    .plic_r_rid      (/*no connection*/        ), //output [4:0]       plic_r_rid,
    .plic_r_rdata    (plic_axi_slv_64_rdata    ), //output [64-1:0]    plic_r_rdata,
    .plic_r_rresp    (plic_axi_slv_64_rresp    ), //output [1:0]       plic_r_rresp,
    .plic_r_rlast    (plic_axi_slv_64_rlast    ), //output             plic_r_rlast,
    .plic_r_ruser    (plic_axi_slv_64_ruser    ), //output             plic_r_ruser,
    .plic_r_rvalid   (plic_axi_slv_64_rvalid   ), //output             plic_r_rvalid,
    .plic_r_rready   (plic_axi_slv_64_rready   )  //input              plic_r_rready 
);


axi_dw_converter_wrapper 
#(
  .AXI_ADDR_WIDTH         (64 ),
  .AXI_SLV_PORT_DATA_WIDTH(256),
  .AXI_MST_PORT_DATA_WIDTH(32),
  .AXI_ID_WIDTH           (11),
  .AXI_USER_WIDTH         (1),
  .AXI_MAX_READS          (8)
) u_uncore_axi_mst_256_to_32     
(
    .clk_i          (u_uncore_top_per_clk_i               ), //input                                       clk_i,
    .rst_ni         (u_uncore_top_core_nic_rst_n_i        ), //input                                       rst_ni,

    .slv_aw_awid    (uncore_axi_slv_256_awid              ), //input     [AXI_ID_WIDTH-1:0]                slv_aw_awid,
    .slv_aw_awaddr  (uncore_axi_slv_256_awaddr            ), //input     [AXI_ADDR_WIDTH-1:0]              slv_aw_awaddr,
    .slv_aw_awlen   (uncore_axi_slv_256_awlen             ), //input     [7:0]                             slv_aw_awlen,
    .slv_aw_awsize  (uncore_axi_slv_256_awsize            ), //input     [2:0]                             slv_aw_awsize,
    .slv_aw_awburst (uncore_axi_slv_256_awburst           ), //input     [1:0]                             slv_aw_awburst,
    .slv_aw_awlock  (uncore_axi_slv_256_awlock            ), //input                                       slv_aw_awlock,
    .slv_aw_awcache (uncore_axi_slv_256_awcache           ), //input     [3:0]                             slv_aw_awcache,
    .slv_aw_awprot  (uncore_axi_slv_256_awprot            ), //input     [2:0]                             slv_aw_awprot,
    .slv_aw_awregion(uncore_axi_slv_256_awregion          ), //input     [3:0]                             slv_aw_awregion,
    .slv_aw_awqos   (uncore_axi_slv_256_awqos             ), //input     [3:0]                             slv_aw_awqos,
    .slv_aw_awuser  (uncore_axi_slv_256_awuser            ), //input     [AXI_USER_WIDTH-1:0]              slv_aw_awuser,//
    .slv_aw_awvalid (uncore_axi_slv_256_awvalid           ), //input                                       slv_aw_awvalid,
    .slv_aw_awready (uncore_axi_slv_256_awready           ), //output                                      slv_aw_awready,
    .slv_w_wdata    (uncore_axi_slv_256_wdata             ), //input     [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_w_wdata,
    .slv_w_wstrb    (uncore_axi_slv_256_wstrb             ), //input     [AXI_SLV_PORT_DATA_WIDTH/8-1:0]   slv_w_wstrb,
    .slv_w_wlast    (uncore_axi_slv_256_wlast             ), //input                                       slv_w_wlast,
    .slv_w_wuser    (uncore_axi_slv_256_wuser             ), //input     [AXI_USER_WIDTH-1:0]              slv_w_wuser,
    .slv_w_wvalid   (uncore_axi_slv_256_wvalid            ), //input                                       slv_w_wvalid,
    .slv_w_wready   (uncore_axi_slv_256_wready            ), //output                                      slv_w_wready,
    .slv_b_bid      (uncore_axi_slv_256_bid               ), //output    [AXI_ID_WIDTH-1:0]                slv_b_bid,
    .slv_b_bresp    (uncore_axi_slv_256_bresp             ), //output    [1:0]                             slv_b_bresp,
    .slv_b_buser    (uncore_axi_slv_256_buser             ), //output    [AXI_USER_WIDTH-1:0]              slv_b_buser,
    .slv_b_bvalid   (uncore_axi_slv_256_bvalid            ), //output                                      slv_b_bvalid,
    .slv_b_bready   (uncore_axi_slv_256_bready            ), //input                                       slv_b_bready,
    .slv_ar_arid    (uncore_axi_slv_256_arid              ), //input     [AXI_ID_WIDTH-1:0]                slv_ar_arid,
    .slv_ar_araddr  (uncore_axi_slv_256_araddr            ), //input     [AXI_ADDR_WIDTH-1:0]              slv_ar_araddr,
    .slv_ar_arlen   (uncore_axi_slv_256_arlen             ), //input     [7:0]                             slv_ar_arlen,
    .slv_ar_arsize  (uncore_axi_slv_256_arsize            ), //input     [2:0]                             slv_ar_arsize,
    .slv_ar_arburst (uncore_axi_slv_256_arburst           ), //input     [1:0]                             slv_ar_arburst,
    .slv_ar_arlock  (uncore_axi_slv_256_arlock            ), //input                                       slv_ar_arlock,
    .slv_ar_arcache (uncore_axi_slv_256_arcache           ), //input     [3:0]                             slv_ar_arcache,
    .slv_ar_arprot  (uncore_axi_slv_256_arprot            ), //input     [2:0]                             slv_ar_arprot,
    .slv_ar_arregion(uncore_axi_slv_256_arregion          ), //input     [3:0]                             slv_ar_arregion,
    .slv_ar_arqos   (uncore_axi_slv_256_arqos             ), //input     [3:0]                             slv_ar_arqos,
    .slv_ar_aruser  (uncore_axi_slv_256_aruser            ), //input     [AXI_USER_WIDTH-1:0]              slv_ar_aruser,
    .slv_ar_arvalid (uncore_axi_slv_256_arvalid           ), //input                                       slv_ar_arvalid,
    .slv_ar_arready (uncore_axi_slv_256_arready           ), //output                                      slv_ar_arready,
    .slv_r_rid      (uncore_axi_slv_256_rid               ), //output    [AXI_ID_WIDTH-1:0]                slv_r_rid,
    .slv_r_rdata    (uncore_axi_slv_256_rdata             ), //output    [AXI_SLV_PORT_DATA_WIDTH-1:0]     slv_r_rdata,
    .slv_r_rresp    (uncore_axi_slv_256_rresp             ), //output    [1:0]                             slv_r_rresp,
    .slv_r_rlast    (uncore_axi_slv_256_rlast             ), //output                                      slv_r_rlast,
    .slv_r_ruser    (uncore_axi_slv_256_ruser             ), //output    [AXI_USER_WIDTH-1:0]              slv_r_ruser,
    .slv_r_rvalid   (uncore_axi_slv_256_rvalid            ), //output                                      slv_r_rvalid,
    .slv_r_rready   (uncore_axi_slv_256_rready            ), //input                                       slv_r_rready, 

    .mst_aw_awid    (u_uncore_top_AWID_AXI_CORE_MST_s     ), //output    [AXI_ID_WIDTH-1:0]                mst_aw_awid,
    .mst_aw_awaddr  (u_uncore_top_AWADDR_AXI_CORE_MST_s   ), //output    [AXI_ADDR_WIDTH-1:0]              mst_aw_awaddr,
    .mst_aw_awlen   (u_uncore_top_AWLEN_AXI_CORE_MST_o    ), //output    [7:0]                             mst_aw_awlen,
    .mst_aw_awsize  (u_uncore_top_AWSIZE_AXI_CORE_MST_o   ), //output    [2:0]                             mst_aw_awsize,
    .mst_aw_awburst (u_uncore_top_AWBURST_AXI_CORE_MST_o  ), //output    [1:0]                             mst_aw_awburst,
    .mst_aw_awlock  (u_uncore_top_AWLOCK_AXI_CORE_MST_o   ), //output                                      mst_aw_awlock,
    .mst_aw_awcache (u_uncore_top_AWCACHE_AXI_CORE_MST_o  ), //output    [3:0]                             mst_aw_awcache,
    .mst_aw_awprot  (u_uncore_top_AWPROT_AXI_CORE_MST_o   ), //output    [2:0]                             mst_aw_awprot,
    .mst_aw_awregion(/*no connection*/                    ), //output    [3:0]                             mst_aw_awregion,
    .mst_aw_awqos   (/*no connection*/                    ), //output    [3:0]                             mst_aw_awqos,
    .mst_aw_awuser  (/*no connection*/                    ), //output    [AXI_USER_WIDTH-1:0]              mst_aw_awuser,//
    .mst_aw_awvalid (u_uncore_top_AWVALID_AXI_CORE_MST_o  ), //output                                      mst_aw_awvalid,
    .mst_aw_awready (u_uncore_top_AWREADY_AXI_CORE_MST_i  ), //input                                       mst_aw_awready,
    .mst_w_wdata    (u_uncore_top_WDATA_AXI_CORE_MST_o    ), //output    [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_w_wdata,
    .mst_w_wstrb    (u_uncore_top_WSTRB_AXI_CORE_MST_o    ), //output    [AXI_MST_PORT_DATA_WIDTH/8-1:0]   mst_w_wstrb,
    .mst_w_wlast    (u_uncore_top_WLAST_AXI_CORE_MST_o    ), //output                                      mst_w_wlast,
    .mst_w_wuser    (/*no connection*/                    ), //output    [AXI_USER_WIDTH-1:0]              mst_w_wuser,
    .mst_w_wvalid   (u_uncore_top_WVALID_AXI_CORE_MST_o   ), //output                                      mst_w_wvalid,
    .mst_w_wready   (u_uncore_top_WREADY_AXI_CORE_MST_i   ), //input                                       mst_w_wready,
    .mst_b_bid      (u_uncore_top_BID_AXI_CORE_MST_i      ), //input     [AXI_ID_WIDTH-1:0]                mst_b_bid,
    .mst_b_bresp    (u_uncore_top_BRESP_AXI_CORE_MST_i    ), //input     [1:0]                             mst_b_bresp,
    .mst_b_buser    (1'b0                                 ), //input     [AXI_USER_WIDTH-1:0]              mst_b_buser,
    .mst_b_bvalid   (u_uncore_top_BVALID_AXI_CORE_MST_i   ), //input                                       mst_b_bvalid,
    .mst_b_bready   (u_uncore_top_BREADY_AXI_CORE_MST_o   ), //output                                      mst_b_bready,
    .mst_ar_arid    (u_uncore_top_ARID_AXI_CORE_MST_s     ), //output    [AXI_ID_WIDTH-1:0]                mst_ar_arid,
    .mst_ar_araddr  (u_uncore_top_ARADDR_AXI_CORE_MST_s   ), //output    [AXI_ADDR_WIDTH-1:0]              mst_ar_araddr,
    .mst_ar_arlen   (u_uncore_top_ARLEN_AXI_CORE_MST_o    ), //output    [7:0]                             mst_ar_arlen,
    .mst_ar_arsize  (u_uncore_top_ARSIZE_AXI_CORE_MST_o   ), //output    [2:0]                             mst_ar_arsize,
    .mst_ar_arburst (u_uncore_top_ARBURST_AXI_CORE_MST_o  ), //output    [1:0]                             mst_ar_arburst,
    .mst_ar_arlock  (u_uncore_top_ARLOCK_AXI_CORE_MST_o   ), //output                                      mst_ar_arlock,
    .mst_ar_arcache (u_uncore_top_ARCACHE_AXI_CORE_MST_o  ), //output    [3:0]                             mst_ar_arcache,
    .mst_ar_arprot  (u_uncore_top_ARPROT_AXI_CORE_MST_o   ), //output    [2:0]                             mst_ar_arprot,
    .mst_ar_arregion(/*no connection*/                    ), //output    [3:0]                             mst_ar_arregion,
    .mst_ar_arqos   (/*no connection*/                    ), //output    [3:0]                             mst_ar_arqos,
    .mst_ar_aruser  (/*no connection*/                    ), //output    [AXI_USER_WIDTH-1:0]              mst_ar_aruser,
    .mst_ar_arvalid (u_uncore_top_ARVALID_AXI_CORE_MST_o  ), //output                                      mst_ar_arvalid,
    .mst_ar_arready (u_uncore_top_ARREADY_AXI_CORE_MST_i  ), //input                                       mst_ar_arready,
    .mst_r_rid      (u_uncore_top_RID_AXI_CORE_MST_i      ), //input     [AXI_ID_WIDTH-1:0]                mst_r_rid,
    .mst_r_rdata    (u_uncore_top_RDATA_AXI_CORE_MST_i    ), //input     [AXI_MST_PORT_DATA_WIDTH-1:0]     mst_r_rdata,
    .mst_r_rresp    (u_uncore_top_RRESP_AXI_CORE_MST_i    ), //input     [1:0]                             mst_r_rresp,
    .mst_r_rlast    (u_uncore_top_RLAST_AXI_CORE_MST_i    ), //input                                       mst_r_rlast,
    .mst_r_ruser    (1'b0                                 ), //input     [AXI_USER_WIDTH-1:0]              mst_r_ruser,
    .mst_r_rvalid   (u_uncore_top_RVALID_AXI_CORE_MST_i   ), //input                                       mst_r_rvalid,
    .mst_r_rready   (u_uncore_top_RREADY_AXI_CORE_MST_o   )  //output                                      mst_r_rready 
);

//reg     [10:0]      u_uncore_top_BID_AXI_CORE_MST_s;
//reg     [10:0]      u_uncore_top_RID_AXI_CORE_MST_s;
//always_ff @(posedge u_uncore_top_per_clk_i or negedge u_uncore_top_core_nic_rst_n_i) begin
//    if(~u_uncore_top_core_nic_rst_n_i) begin
//        u_uncore_top_BID_AXI_CORE_MST_s <= 11'b0;
//        u_uncore_top_RID_AXI_CORE_MST_s <= 11'b0;
//    end 
//    else begin
//        if(u_uncore_top_AWVALID_AXI_CORE_MST_o & u_uncore_top_AWREADY_AXI_CORE_MST_i)begin
//            u_uncore_top_BID_AXI_CORE_MST_s <= u_uncore_top_AWID_AXI_CORE_MST_s;
//        end
//        if(u_uncore_top_ARVALID_AXI_CORE_MST_o & u_uncore_top_ARREADY_AXI_CORE_MST_i)begin
//            u_uncore_top_RID_AXI_CORE_MST_s <= u_uncore_top_ARID_AXI_CORE_MST_s;
//        end
//    end
//end


//u_misc instance
misc u_misc(
    //input ports
    .dma_int(8'd0/*u_dmac_dma_int_s*/),
    .timer0_int_cmp(u_uncore_top_timer0_int_cmp_s),
    .timer0_int_ovf(u_uncore_top_timer0_int_ovf_s),
    .timer1_int_cmp(u_uncore_top_timer1_int_cmp_s),
    .timer1_int_ovf(u_uncore_top_timer1_int_ovf_s),
    .wdt_prewarning_int(1'b0),
    .sw_int0(u_uncore_top_sw_int0_s),
    .sw_int1(u_uncore_top_sw_int1_s),
    .scu_int(u_uncore_top_scu_int_s),
    .uart_int(u_uncore_top_uart_int_s),
    .uart_tx_int(1'b0),
    .uart_rx_int(1'b0),
    .mac_int(u_NV_nvdla_top_nvdla_intr_s),
    .core_clk(u_uncore_top_riscv_clk_s),
    .core_rst_n(~u_uncore_top_riscv_rst_s),
    //output ports
    .dma_int_out( ),
    .timer0_int_ovf_out(u_misc_timer0_int_ovf_out_s),
    .timer0_int_cmp_out(u_misc_timer0_int_cmp_out_s),
    .timer1_int_ovf_out(u_misc_timer1_int_ovf_out_s),
    .timer1_int_cmp_out(u_misc_timer1_int_cmp_out_s),
    .wdt_prewarning_int_out(),
    .sw_int0_out(u_misc_sw_int0_out_s),
    .sw_int1_out(u_misc_sw_int1_out_s),
    .scu_int_out(u_misc_scu_int_out_s),
    .uart_int_out(u_misc_uart_int_out_s),
    .uart_tx_int_out(),
    .uart_rx_int_out(),
    .mac_int_out(u_misc_mac_int_out_s)
    //inout ports
);



 //rst_sync instance
stdcc_rstn_sync2 u_nic_rst_sync(
    //input ports
    .clk(u_xdma_0_top_axi_aclk_s),
    .rstn(u_uncore_top_core_nic_rst_n_s & u_xdma_0_top_axi_aresetn_s),
    //output ports
    .dout(u_xdma_0_top_pcie_nic_aresetn_s)
    //inout ports
);   


 //rst_sync instance
stdcc_rstn_sync2 u_ddr_rst_sync(
    //input ports
    .clk(u_ddr4_0_top_c0_ddr4_ui_clk_s),
    .rstn(u_uncore_top_core_nic_rst_n_s),
    //output ports
    .dout(u_uncore_top_c0_nic_ddr4_ui_clk_sync_rst_s)
    //inout ports
);   


//rst_sync instance
stdcc_rstn_sync2 u_jtag_rst_sync(
    //input ports
    .clk(u_soc_top_TCK_i),
    .rstn(por_rstn_sync),
    //output ports
    .dout(jtag_trst_sync_rst_s)
    //inout ports
);

endmodule
